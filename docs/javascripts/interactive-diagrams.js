/**\n * Interactive Diagrams and Visual Learning Elements\n * Provides interactive system design diagrams, flowcharts, and visualizations\n */\n\nclass InteractiveDiagrams {\n  constructor() {\n    this.diagrams = new Map();\n    this.animationQueue = [];\n    this.isAnimating = false;\n    this.init();\n  }\n\n  init() {\n    this.initMermaidDiagrams();\n    this.createInteractiveElements();\n    this.bindEvents();\n    this.addDiagramControls();\n  }\n\n  initMermaidDiagrams() {\n    if (typeof mermaid !== 'undefined') {\n      mermaid.initialize({\n        startOnLoad: true,\n        theme: 'default',\n        themeVariables: {\n          primaryColor: '#FF9900',\n          primaryTextColor: '#2c3e50',\n          primaryBorderColor: '#FF9900',\n          lineColor: '#34495e',\n          secondaryColor: '#FFB84D',\n          tertiaryColor: '#f8f9fa'\n        },\n        flowchart: {\n          useMaxWidth: true,\n          htmlLabels: true,\n          curve: 'basis'\n        },\n        sequence: {\n          diagramMarginX: 50,\n          diagramMarginY: 10,\n          actorMargin: 50,\n          width: 150,\n          height: 65,\n          boxMargin: 10,\n          boxTextMargin: 5,\n          noteMargin: 10,\n          messageMargin: 35,\n          mirrorActors: true,\n          bottomMarginAdj: 1,\n          useMaxWidth: true\n        },\n        gantt: {\n          useMaxWidth: true,\n          barHeight: 20,\n          fontSize: 11,\n          fontFamily: '\"trebuchet ms\", verdana, arial, sans-serif',\n          numberSectionStyles: 4,\n          axisFormat: '%Y-%m-%d'\n        }\n      });\n      \n      // Re-render diagrams after theme changes\n      window.addEventListener('theme-changed', () => {\n        this.updateDiagramTheme();\n      });\n    }\n  }\n\n  createInteractiveElements() {\n    // Find all diagram containers\n    const diagramContainers = document.querySelectorAll(\n      '.mermaid, [data-diagram], .system-diagram, .flowchart-container'\n    );\n    \n    diagramContainers.forEach((container, index) => {\n      this.enhanceDiagram(container, index);\n    });\n    \n    // Create custom interactive diagrams\n    this.createSystemDesignDiagrams();\n    this.createLearningPathDiagrams();\n    this.createDecisionFlowcharts();\n  }\n\n  enhanceDiagram(container, index) {\n    const diagramId = `diagram-${index}`;\n    container.setAttribute('data-diagram-id', diagramId);\n    \n    // Wrap in interactive container\n    const wrapper = document.createElement('div');\n    wrapper.className = 'interactive-diagram-wrapper';\n    wrapper.innerHTML = `\n      <div class=\"diagram-header\">\n        <h4 class=\"diagram-title\">${this.getDiagramTitle(container)}</h4>\n        <div class=\"diagram-controls\">\n          <button class=\"diagram-control\" data-action=\"zoom-in\" title=\"Zoom In\">\n            <svg viewBox=\"0 0 24 24\" width=\"16\" height=\"16\">\n              <path d=\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"/>\n              <path d=\"M12 10h-2v2H9v-2H7V9h2V7h1v2h2v1z\"/>\n            </svg>\n          </button>\n          <button class=\"diagram-control\" data-action=\"zoom-out\" title=\"Zoom Out\">\n            <svg viewBox=\"0 0 24 24\" width=\"16\" height=\"16\">\n              <path d=\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"/>\n              <path d=\"M7 9h5v1H7z\"/>\n            </svg>\n          </button>\n          <button class=\"diagram-control\" data-action=\"reset\" title=\"Reset View\">\n            <svg viewBox=\"0 0 24 24\" width=\"16\" height=\"16\">\n              <path d=\"M17.65,6.35C16.2,4.9 14.21,4 12,4A8,8 0 0,0 4,12A8,8 0 0,0 12,20C15.73,20 18.84,17.45 19.73,14H17.65C16.83,16.33 14.61,18 12,18A6,6 0 0,1 6,12A6,6 0 0,1 12,6C13.66,6 15.14,6.69 16.22,7.78L13,11H20V4L17.65,6.35Z\"/>\n            </svg>\n          </button>\n          <button class=\"diagram-control\" data-action=\"fullscreen\" title=\"Fullscreen\">\n            <svg viewBox=\"0 0 24 24\" width=\"16\" height=\"16\">\n              <path d=\"M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z\"/>\n            </svg>\n          </button>\n          <button class=\"diagram-control\" data-action=\"animate\" title=\"Animate\">\n            <svg viewBox=\"0 0 24 24\" width=\"16\" height=\"16\">\n              <path d=\"M8,5.14V19.14L19,12.14L8,5.14Z\"/>\n            </svg>\n          </button>\n        </div>\n      </div>\n      <div class=\"diagram-content\">\n        ${container.outerHTML}\n      </div>\n      <div class=\"diagram-description\" hidden>\n        <p>Interactive diagram - click elements to explore details</p>\n      </div>\n    `;\n    \n    // Replace original container\n    container.parentNode.replaceChild(wrapper, container);\n    \n    // Store diagram reference\n    this.diagrams.set(diagramId, {\n      wrapper,\n      container: wrapper.querySelector('.diagram-content > *'),\n      scale: 1,\n      panX: 0,\n      panY: 0\n    });\n  }\n\n  getDiagramTitle(container) {\n    // Try to get title from previous heading or data attribute\n    const title = container.dataset.title ||\n                  container.getAttribute('title') ||\n                  this.findPreviousHeading(container) ||\n                  'Interactive Diagram';\n    return title;\n  }\n\n  findPreviousHeading(element) {\n    let current = element.previousElementSibling;\n    while (current) {\n      if (/^H[1-6]$/.test(current.tagName)) {\n        return current.textContent.trim();\n      }\n      current = current.previousElementSibling;\n    }\n    return null;\n  }\n\n  createSystemDesignDiagrams() {\n    // Create interactive system design templates\n    const systemDesignContainers = document.querySelectorAll('.system-design-canvas');\n    \n    systemDesignContainers.forEach(container => {\n      this.createSystemDesignCanvas(container);\n    });\n  }\n\n  createSystemDesignCanvas(container) {\n    const canvas = document.createElement('div');\n    canvas.className = 'system-design-interactive';\n    canvas.innerHTML = `\n      <div class=\"design-toolbar\">\n        <div class=\"tool-section\">\n          <h5>Components</h5>\n          <button class=\"design-tool\" data-component=\"load-balancer\">\n            <span class=\"tool-icon\">⚖️</span>\n            <span class=\"tool-label\">Load Balancer</span>\n          </button>\n          <button class=\"design-tool\" data-component=\"web-server\">\n            <span class=\"tool-icon\">🌐</span>\n            <span class=\"tool-label\">Web Server</span>\n          </button>\n          <button class=\"design-tool\" data-component=\"database\">\n            <span class=\"tool-icon\">🗄️</span>\n            <span class=\"tool-label\">Database</span>\n          </button>\n          <button class=\"design-tool\" data-component=\"cache\">\n            <span class=\"tool-icon\">⚡</span>\n            <span class=\"tool-label\">Cache</span>\n          </button>\n          <button class=\"design-tool\" data-component=\"queue\">\n            <span class=\"tool-icon\">📬</span>\n            <span class=\"tool-label\">Queue</span>\n          </button>\n        </div>\n        <div class=\"tool-section\">\n          <h5>AWS Services</h5>\n          <button class=\"design-tool\" data-component=\"ec2\">\n            <span class=\"tool-icon\">💻</span>\n            <span class=\"tool-label\">EC2</span>\n          </button>\n          <button class=\"design-tool\" data-component=\"rds\">\n            <span class=\"tool-icon\">🗃️</span>\n            <span class=\"tool-label\">RDS</span>\n          </button>\n          <button class=\"design-tool\" data-component=\"s3\">\n            <span class=\"tool-icon\">🪣</span>\n            <span class=\"tool-label\">S3</span>\n          </button>\n          <button class=\"design-tool\" data-component=\"sqs\">\n            <span class=\"tool-icon\">📨</span>\n            <span class=\"tool-label\">SQS</span>\n          </button>\n        </div>\n        <div class=\"tool-actions\">\n          <button class=\"design-action\" data-action=\"clear\">Clear</button>\n          <button class=\"design-action\" data-action=\"save\">Save</button>\n          <button class=\"design-action\" data-action=\"export\">Export</button>\n        </div>\n      </div>\n      <div class=\"design-canvas\" ondrop=\"interactiveDiagrams.handleDrop(event)\" ondragover=\"interactiveDiagrams.allowDrop(event)\">\n        <div class=\"canvas-grid\"></div>\n        <div class=\"canvas-components\"></div>\n        <svg class=\"canvas-connections\" viewBox=\"0 0 800 600\">\n          <defs>\n            <marker id=\"arrowhead\" markerWidth=\"10\" markerHeight=\"7\" refX=\"9\" refY=\"3.5\" orient=\"auto\">\n              <polygon points=\"0 0, 10 3.5, 0 7\" fill=\"#666\" />\n            </marker>\n          </defs>\n        </svg>\n      </div>\n      <div class=\"design-info\">\n        <h5>Design Metrics</h5>\n        <div class=\"metrics\">\n          <span class=\"metric\">Components: <span id=\"component-count\">0</span></span>\n          <span class=\"metric\">Connections: <span id=\"connection-count\">0</span></span>\n        </div>\n      </div>\n    `;\n    \n    container.appendChild(canvas);\n    this.bindDesignCanvasEvents(canvas);\n  }\n\n  bindDesignCanvasEvents(canvas) {\n    const tools = canvas.querySelectorAll('.design-tool');\n    const canvasArea = canvas.querySelector('.design-canvas');\n    \n    // Make tools draggable\n    tools.forEach(tool => {\n      tool.draggable = true;\n      tool.addEventListener('dragstart', (e) => {\n        e.dataTransfer.setData('text/plain', tool.dataset.component);\n        e.dataTransfer.effectAllowed = 'copy';\n      });\n    });\n    \n    // Canvas events\n    canvasArea.addEventListener('click', (e) => {\n      if (e.target.classList.contains('component')) {\n        this.selectComponent(e.target);\n      } else {\n        this.deselectAllComponents(canvas);\n      }\n    });\n  }\n\n  allowDrop(event) {\n    event.preventDefault();\n  }\n\n  handleDrop(event) {\n    event.preventDefault();\n    const componentType = event.dataTransfer.getData('text/plain');\n    const canvas = event.currentTarget;\n    const rect = canvas.getBoundingClientRect();\n    \n    const x = event.clientX - rect.left;\n    const y = event.clientY - rect.top;\n    \n    this.addComponentToCanvas(canvas, componentType, x, y);\n  }\n\n  addComponentToCanvas(canvas, componentType, x, y) {\n    const componentsContainer = canvas.querySelector('.canvas-components');\n    const componentId = `component-${Date.now()}`;\n    \n    const component = document.createElement('div');\n    component.className = 'canvas-component';\n    component.dataset.type = componentType;\n    component.dataset.id = componentId;\n    component.style.left = `${x - 30}px`;\n    component.style.top = `${y - 30}px`;\n    \n    const componentInfo = this.getComponentInfo(componentType);\n    component.innerHTML = `\n      <div class=\"component-icon\">${componentInfo.icon}</div>\n      <div class=\"component-label\">${componentInfo.label}</div>\n      <div class=\"component-handles\">\n        <div class=\"handle handle-input\" data-direction=\"input\"></div>\n        <div class=\"handle handle-output\" data-direction=\"output\"></div>\n      </div>\n      <button class=\"component-delete\" onclick=\"this.parentElement.remove(); interactiveDiagrams.updateMetrics();\">&times;</button>\n    `;\n    \n    componentsContainer.appendChild(component);\n    this.makeComponentDraggable(component);\n    this.updateMetrics();\n    \n    // Show component details\n    this.showComponentTooltip(component, componentInfo);\n  }\n\n  getComponentInfo(type) {\n    const components = {\n      'load-balancer': { icon: '⚖️', label: 'Load Balancer', description: 'Distributes incoming requests across multiple servers' },\n      'web-server': { icon: '🌐', label: 'Web Server', description: 'Handles HTTP requests and serves web content' },\n      'database': { icon: '🗄️', label: 'Database', description: 'Stores and retrieves structured data' },\n      'cache': { icon: '⚡', label: 'Cache', description: 'Stores frequently accessed data for quick retrieval' },\n      'queue': { icon: '📬', label: 'Queue', description: 'Manages asynchronous message processing' },\n      'ec2': { icon: '💻', label: 'EC2', description: 'Amazon Elastic Compute Cloud - Virtual servers' },\n      'rds': { icon: '🗃️', label: 'RDS', description: 'Amazon Relational Database Service' },\n      's3': { icon: '🪣', label: 'S3', description: 'Amazon Simple Storage Service - Object storage' },\n      'sqs': { icon: '📨', label: 'SQS', description: 'Amazon Simple Queue Service' }\n    };\n    \n    return components[type] || { icon: '❓', label: type, description: 'Unknown component' };\n  }\n\n  makeComponentDraggable(component) {\n    let isDragging = false;\n    let dragOffsetX = 0;\n    let dragOffsetY = 0;\n    \n    component.addEventListener('mousedown', (e) => {\n      if (e.target.classList.contains('component-delete')) return;\n      \n      isDragging = true;\n      const rect = component.getBoundingClientRect();\n      dragOffsetX = e.clientX - rect.left;\n      dragOffsetY = e.clientY - rect.top;\n      \n      component.style.zIndex = '1000';\n      component.classList.add('dragging');\n      \n      e.preventDefault();\n    });\n    \n    document.addEventListener('mousemove', (e) => {\n      if (!isDragging) return;\n      \n      const canvas = component.closest('.design-canvas');\n      const canvasRect = canvas.getBoundingClientRect();\n      \n      const x = e.clientX - canvasRect.left - dragOffsetX;\n      const y = e.clientY - canvasRect.top - dragOffsetY;\n      \n      component.style.left = `${Math.max(0, Math.min(x, canvasRect.width - 60))}px`;\n      component.style.top = `${Math.max(0, Math.min(y, canvasRect.height - 60))}px`;\n    });\n    \n    document.addEventListener('mouseup', () => {\n      if (isDragging) {\n        isDragging = false;\n        component.style.zIndex = 'auto';\n        component.classList.remove('dragging');\n      }\n    });\n  }\n\n  showComponentTooltip(component, info) {\n    const tooltip = document.createElement('div');\n    tooltip.className = 'component-tooltip';\n    tooltip.innerHTML = `\n      <h6>${info.label}</h6>\n      <p>${info.description}</p>\n    `;\n    \n    document.body.appendChild(tooltip);\n    \n    const rect = component.getBoundingClientRect();\n    tooltip.style.left = `${rect.right + 10}px`;\n    tooltip.style.top = `${rect.top}px`;\n    \n    setTimeout(() => {\n      tooltip.classList.add('show');\n    }, 100);\n    \n    setTimeout(() => {\n      tooltip.remove();\n    }, 3000);\n  }\n\n  selectComponent(component) {\n    this.deselectAllComponents(component.closest('.system-design-interactive'));\n    component.classList.add('selected');\n  }\n\n  deselectAllComponents(canvas) {\n    const components = canvas.querySelectorAll('.canvas-component');\n    components.forEach(comp => comp.classList.remove('selected'));\n  }\n\n  updateMetrics() {\n    const componentCount = document.querySelectorAll('.canvas-component').length;\n    const connectionCount = document.querySelectorAll('.connection-line').length;\n    \n    const componentCountEl = document.getElementById('component-count');\n    const connectionCountEl = document.getElementById('connection-count');\n    \n    if (componentCountEl) componentCountEl.textContent = componentCount;\n    if (connectionCountEl) connectionCountEl.textContent = connectionCount;\n  }\n\n  createLearningPathDiagrams() {\n    const pathContainers = document.querySelectorAll('.learning-path-visual');\n    \n    pathContainers.forEach(container => {\n      this.createLearningPathVisualization(container);\n    });\n  }\n\n  createLearningPathVisualization(container) {\n    const pathData = this.getLearningPathData(container.dataset.path);\n    if (!pathData) return;\n    \n    const visualization = document.createElement('div');\n    visualization.className = 'learning-path-diagram';\n    visualization.innerHTML = `\n      <div class=\"path-header\">\n        <h4>${pathData.title}</h4>\n        <div class=\"path-controls\">\n          <button class=\"path-control\" data-action=\"play\">▶️ Animate Path</button>\n          <button class=\"path-control\" data-action=\"reset\">🔄 Reset</button>\n        </div>\n      </div>\n      <div class=\"path-visualization\">\n        <svg class=\"path-svg\" viewBox=\"0 0 800 400\">\n          ${this.renderLearningPathSVG(pathData)}\n        </svg>\n      </div>\n      <div class=\"path-legend\">\n        <div class=\"legend-item\">\n          <div class=\"legend-color\" style=\"background: var(--success-color)\"></div>\n          <span>Completed</span>\n        </div>\n        <div class=\"legend-item\">\n          <div class=\"legend-color\" style=\"background: var(--md-primary-fg-color)\"></div>\n          <span>In Progress</span>\n        </div>\n        <div class=\"legend-item\">\n          <div class=\"legend-color\" style=\"background: var(--md-default-fg-color--lighter)\"></div>\n          <span>Not Started</span>\n        </div>\n      </div>\n    `;\n    \n    container.appendChild(visualization);\n    this.bindLearningPathEvents(visualization, pathData);\n  }\n\n  getLearningPathData(pathType) {\n    const paths = {\n      'behavioral': {\n        title: 'Behavioral Interview Mastery Path',\n        steps: [\n          { id: 'lp-basics', title: 'Leadership Principles', x: 100, y: 200, status: 'completed' },\n          { id: 'star', title: 'STAR Framework', x: 250, y: 150, status: 'completed' },\n          { id: 'stories', title: 'Story Development', x: 400, y: 200, status: 'in-progress' },\n          { id: 'practice', title: 'Mock Interviews', x: 550, y: 150, status: 'not-started' },\n          { id: 'bar-raiser', title: 'Bar Raiser Prep', x: 700, y: 200, status: 'not-started' }\n        ]\n      },\n      'system-design': {\n        title: 'System Design Mastery Path',\n        steps: [\n          { id: 'fundamentals', title: 'Fundamentals', x: 100, y: 200, status: 'completed' },\n          { id: 'scaling', title: 'Scaling Patterns', x: 250, y: 150, status: 'in-progress' },\n          { id: 'databases', title: 'Database Design', x: 250, y: 250, status: 'in-progress' },\n          { id: 'distributed', title: 'Distributed Systems', x: 400, y: 200, status: 'not-started' },\n          { id: 'aws', title: 'AWS Architecture', x: 550, y: 150, status: 'not-started' },\n          { id: 'practice', title: 'Practice Problems', x: 700, y: 200, status: 'not-started' }\n        ]\n      }\n    };\n    \n    return paths[pathType];\n  }\n\n  renderLearningPathSVG(pathData) {\n    let svg = '';\n    \n    // Draw connections\n    for (let i = 0; i < pathData.steps.length - 1; i++) {\n      const current = pathData.steps[i];\n      const next = pathData.steps[i + 1];\n      \n      const strokeColor = current.status === 'completed' ? 'var(--success-color)' : 'var(--md-default-fg-color--lighter)';\n      \n      svg += `<line x1=\"${current.x + 30}\" y1=\"${current.y + 15}\" x2=\"${next.x - 30}\" y2=\"${next.y + 15}\" stroke=\"${strokeColor}\" stroke-width=\"2\" marker-end=\"url(#arrowhead)\" />`;\n    }\n    \n    // Draw steps\n    pathData.steps.forEach((step, index) => {\n      const colors = {\n        'completed': 'var(--success-color)',\n        'in-progress': 'var(--md-primary-fg-color)',\n        'not-started': 'var(--md-default-fg-color--lighter)'\n      };\n      \n      const color = colors[step.status];\n      \n      svg += `\n        <g class=\"path-step\" data-step=\"${step.id}\" data-index=\"${index}\">\n          <circle cx=\"${step.x}\" cy=\"${step.y}\" r=\"20\" fill=\"${color}\" stroke=\"white\" stroke-width=\"2\" class=\"step-circle\" />\n          <text x=\"${step.x}\" y=\"${step.y + 5}\" text-anchor=\"middle\" fill=\"white\" font-weight=\"bold\" font-size=\"14\">${index + 1}</text>\n          <text x=\"${step.x}\" y=\"${step.y + 45}\" text-anchor=\"middle\" fill=\"var(--md-default-fg-color--dark)\" font-size=\"12\" font-weight=\"500\">${step.title}</text>\n        </g>\n      `;\n    });\n    \n    // Add arrow marker definition\n    svg = `\n      <defs>\n        <marker id=\"arrowhead\" markerWidth=\"10\" markerHeight=\"7\" refX=\"9\" refY=\"3.5\" orient=\"auto\">\n          <polygon points=\"0 0, 10 3.5, 0 7\" fill=\"var(--md-default-fg-color--lighter)\" />\n        </marker>\n      </defs>\n      ${svg}\n    `;\n    \n    return svg;\n  }\n\n  bindLearningPathEvents(visualization, pathData) {\n    const playButton = visualization.querySelector('[data-action=\"play\"]');\n    const resetButton = visualization.querySelector('[data-action=\"reset\"]');\n    const steps = visualization.querySelectorAll('.path-step');\n    \n    playButton?.addEventListener('click', () => {\n      this.animateLearningPath(visualization, pathData);\n    });\n    \n    resetButton?.addEventListener('click', () => {\n      this.resetLearningPath(visualization, pathData);\n    });\n    \n    steps.forEach(step => {\n      step.addEventListener('click', () => {\n        this.showStepDetails(step, pathData);\n      });\n    });\n  }\n\n  animateLearningPath(visualization, pathData) {\n    const steps = visualization.querySelectorAll('.path-step');\n    const lines = visualization.querySelectorAll('line');\n    \n    // Reset all elements\n    steps.forEach(step => step.classList.add('path-hidden'));\n    lines.forEach(line => line.classList.add('path-hidden'));\n    \n    // Animate each step\n    pathData.steps.forEach((stepData, index) => {\n      setTimeout(() => {\n        const step = steps[index];\n        step.classList.remove('path-hidden');\n        step.classList.add('path-animate');\n        \n        // Animate connection line\n        if (index < lines.length) {\n          setTimeout(() => {\n            lines[index].classList.remove('path-hidden');\n            lines[index].classList.add('path-animate');\n          }, 200);\n        }\n      }, index * 600);\n    });\n  }\n\n  resetLearningPath(visualization, pathData) {\n    const steps = visualization.querySelectorAll('.path-step');\n    const lines = visualization.querySelectorAll('line');\n    \n    steps.forEach(step => {\n      step.classList.remove('path-hidden', 'path-animate');\n    });\n    \n    lines.forEach(line => {\n      line.classList.remove('path-hidden', 'path-animate');\n    });\n  }\n\n  showStepDetails(stepElement, pathData) {\n    const stepId = stepElement.dataset.step;\n    const stepData = pathData.steps.find(s => s.id === stepId);\n    if (!stepData) return;\n    \n    const modal = document.createElement('div');\n    modal.className = 'step-details-modal';\n    modal.innerHTML = `\n      <div class=\"modal-backdrop\"></div>\n      <div class=\"modal-content\">\n        <div class=\"modal-header\">\n          <h3>${stepData.title}</h3>\n          <button class=\"modal-close\">&times;</button>\n        </div>\n        <div class=\"modal-body\">\n          <div class=\"step-status status-${stepData.status}\">\n            Status: ${stepData.status.replace('-', ' ').toUpperCase()}\n          </div>\n          <div class=\"step-description\">\n            ${this.getStepDescription(stepData.id)}\n          </div>\n          <div class=\"step-actions\">\n            <button class=\"md-button md-button--primary\">Start Learning</button>\n            <button class=\"md-button\">View Resources</button>\n          </div>\n        </div>\n      </div>\n    `;\n    \n    document.body.appendChild(modal);\n    \n    // Bind close events\n    modal.querySelector('.modal-close').onclick = () => modal.remove();\n    modal.querySelector('.modal-backdrop').onclick = () => modal.remove();\n    \n    // Show modal\n    setTimeout(() => modal.classList.add('show'), 10);\n  }\n\n  getStepDescription(stepId) {\n    const descriptions = {\n      'lp-basics': 'Master Amazon\\'s 16 Leadership Principles with practical examples and applications.',\n      'star': 'Learn the STAR (Situation, Task, Action, Result) framework for structured storytelling.',\n      'stories': 'Develop compelling personal stories that demonstrate leadership and technical skills.',\n      'practice': 'Practice with mock interviews to build confidence and receive feedback.',\n      'bar-raiser': 'Prepare for the most challenging interview round with a bar raiser.',\n      'fundamentals': 'Learn core system design principles and patterns.',\n      'scaling': 'Understand how to design systems that scale to millions of users.',\n      'databases': 'Master database selection, design, and optimization techniques.',\n      'distributed': 'Learn about distributed systems, consistency, and fault tolerance.',\n      'aws': 'Understand AWS services and how to architect cloud-native solutions.',\n    };\n    \n    return descriptions[stepId] || 'Detailed information about this learning step.';\n  }\n\n  createDecisionFlowcharts() {\n    const flowchartContainers = document.querySelectorAll('.decision-flowchart');\n    \n    flowchartContainers.forEach(container => {\n      this.enhanceDecisionFlowchart(container);\n    });\n  }\n\n  enhanceDecisionFlowchart(container) {\n    // Add interactive elements to existing flowcharts\n    const nodes = container.querySelectorAll('.flowchart-node, [data-node]');\n    \n    nodes.forEach(node => {\n      node.addEventListener('click', () => {\n        this.highlightFlowchartPath(node);\n      });\n      \n      node.addEventListener('mouseenter', () => {\n        this.showNodeTooltip(node);\n      });\n      \n      node.addEventListener('mouseleave', () => {\n        this.hideNodeTooltip();\n      });\n    });\n  }\n\n  highlightFlowchartPath(node) {\n    // Clear previous highlights\n    const container = node.closest('.decision-flowchart');\n    const allNodes = container.querySelectorAll('.flowchart-node, [data-node]');\n    const allConnections = container.querySelectorAll('.flowchart-connection, [data-connection]');\n    \n    allNodes.forEach(n => n.classList.remove('highlighted', 'dimmed'));\n    allConnections.forEach(c => c.classList.remove('highlighted', 'dimmed'));\n    \n    // Highlight current path\n    this.traceFlowchartPath(node);\n  }\n\n  traceFlowchartPath(startNode) {\n    const visited = new Set();\n    const toHighlight = [];\n    \n    const traverse = (node) => {\n      if (visited.has(node)) return;\n      visited.add(node);\n      toHighlight.push(node);\n      \n      // Find connected nodes\n      const connections = this.findConnectedNodes(node);\n      connections.forEach(traverse);\n    };\n    \n    traverse(startNode);\n    \n    // Apply highlighting\n    toHighlight.forEach(node => {\n      node.classList.add('highlighted');\n    });\n    \n    // Dim non-highlighted elements\n    const container = startNode.closest('.decision-flowchart');\n    const allElements = container.querySelectorAll('.flowchart-node, [data-node], .flowchart-connection, [data-connection]');\n    allElements.forEach(el => {\n      if (!toHighlight.includes(el)) {\n        el.classList.add('dimmed');\n      }\n    });\n  }\n\n  findConnectedNodes(node) {\n    // Implementation depends on how connections are defined in the flowchart\n    // This is a simplified version\n    return [];\n  }\n\n  showNodeTooltip(node) {\n    const tooltip = document.createElement('div');\n    tooltip.className = 'flowchart-tooltip';\n    tooltip.textContent = node.dataset.description || node.title || 'Flowchart node';\n    \n    document.body.appendChild(tooltip);\n    \n    const rect = node.getBoundingClientRect();\n    tooltip.style.left = `${rect.right + 10}px`;\n    tooltip.style.top = `${rect.top}px`;\n    \n    this.currentTooltip = tooltip;\n  }\n\n  hideNodeTooltip() {\n    if (this.currentTooltip) {\n      this.currentTooltip.remove();\n      this.currentTooltip = null;\n    }\n  }\n\n  bindEvents() {\n    // Global diagram events\n    document.addEventListener('click', (e) => {\n      const control = e.target.closest('.diagram-control');\n      if (control) {\n        this.handleDiagramControl(control, e);\n      }\n    });\n    \n    // Keyboard shortcuts for diagrams\n    document.addEventListener('keydown', (e) => {\n      if (e.target.closest('.interactive-diagram-wrapper')) {\n        this.handleDiagramKeyboard(e);\n      }\n    });\n    \n    // Responsive handling\n    window.addEventListener('resize', () => {\n      this.handleResize();\n    });\n  }\n\n  handleDiagramControl(control, event) {\n    const action = control.dataset.action;\n    const wrapper = control.closest('.interactive-diagram-wrapper');\n    const diagramId = wrapper.querySelector('[data-diagram-id]')?.dataset.diagramId;\n    \n    if (!diagramId) return;\n    \n    const diagram = this.diagrams.get(diagramId);\n    if (!diagram) return;\n    \n    switch (action) {\n      case 'zoom-in':\n        this.zoomDiagram(diagram, 1.2);\n        break;\n      case 'zoom-out':\n        this.zoomDiagram(diagram, 0.8);\n        break;\n      case 'reset':\n        this.resetDiagram(diagram);\n        break;\n      case 'fullscreen':\n        this.toggleFullscreen(wrapper);\n        break;\n      case 'animate':\n        this.animateDiagram(diagram);\n        break;\n    }\n  }\n\n  zoomDiagram(diagram, factor) {\n    diagram.scale *= factor;\n    diagram.scale = Math.max(0.5, Math.min(diagram.scale, 3));\n    \n    this.updateDiagramTransform(diagram);\n  }\n\n  resetDiagram(diagram) {\n    diagram.scale = 1;\n    diagram.panX = 0;\n    diagram.panY = 0;\n    \n    this.updateDiagramTransform(diagram);\n  }\n\n  updateDiagramTransform(diagram) {\n    const transform = `scale(${diagram.scale}) translate(${diagram.panX}px, ${diagram.panY}px)`;\n    diagram.container.style.transform = transform;\n  }\n\n  toggleFullscreen(wrapper) {\n    if (document.fullscreenElement) {\n      document.exitFullscreen();\n    } else {\n      wrapper.requestFullscreen();\n    }\n  }\n\n  animateDiagram(diagram) {\n    // Add animation to diagram elements\n    const elements = diagram.container.querySelectorAll('*');\n    elements.forEach((el, index) => {\n      setTimeout(() => {\n        el.classList.add('diagram-animate');\n      }, index * 100);\n    });\n    \n    // Remove animation classes after completion\n    setTimeout(() => {\n      elements.forEach(el => {\n        el.classList.remove('diagram-animate');\n      });\n    }, elements.length * 100 + 1000);\n  }\n\n  handleDiagramKeyboard(event) {\n    // Handle keyboard navigation for diagrams\n    switch (event.key) {\n      case '+':\n      case '=':\n        event.preventDefault();\n        // Zoom in\n        break;\n      case '-':\n        event.preventDefault();\n        // Zoom out\n        break;\n      case '0':\n        event.preventDefault();\n        // Reset zoom\n        break;\n    }\n  }\n\n  handleResize() {\n    // Recalculate diagram layouts on window resize\n    this.diagrams.forEach(diagram => {\n      // Update diagram responsive behavior\n      this.updateDiagramLayout(diagram);\n    });\n  }\n\n  updateDiagramLayout(diagram) {\n    // Responsive layout updates\n    const container = diagram.container;\n    const wrapper = diagram.wrapper;\n    \n    if (window.innerWidth <= 768) {\n      // Mobile layout adjustments\n      wrapper.classList.add('mobile-diagram');\n    } else {\n      wrapper.classList.remove('mobile-diagram');\n    }\n  }\n\n  updateDiagramTheme() {\n    // Update diagram colors when theme changes\n    if (typeof mermaid !== 'undefined') {\n      const isDark = document.documentElement.getAttribute('data-md-color-scheme') === 'slate';\n      \n      mermaid.initialize({\n        theme: isDark ? 'dark' : 'default',\n        themeVariables: {\n          primaryColor: isDark ? '#FFB84D' : '#FF9900',\n          primaryTextColor: isDark ? '#ffffff' : '#2c3e50',\n          primaryBorderColor: isDark ? '#FFB84D' : '#FF9900',\n          lineColor: isDark ? '#ffffff' : '#34495e'\n        }\n      });\n      \n      // Re-render existing diagrams\n      document.querySelectorAll('.mermaid').forEach(diagram => {\n        mermaid.init(undefined, diagram);\n      });\n    }\n  }\n\n  addDiagramControls() {\n    // Add global diagram controls\n    const style = document.createElement('style');\n    style.textContent = `\n      /* Interactive Diagram Styles */\n      .interactive-diagram-wrapper {\n        background: var(--md-default-bg-color);\n        border: 1px solid var(--md-default-fg-color--lighter);\n        border-radius: var(--radius-lg);\n        margin: var(--spacing-xl) 0;\n        overflow: hidden;\n        position: relative;\n      }\n      \n      .diagram-header {\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n        padding: var(--spacing-md) var(--spacing-lg);\n        background: var(--md-default-fg-color--lightest);\n        border-bottom: 1px solid var(--md-default-fg-color--lighter);\n      }\n      \n      .diagram-title {\n        margin: 0;\n        font-size: 1.1rem;\n        color: var(--md-primary-fg-color--dark);\n      }\n      \n      .diagram-controls {\n        display: flex;\n        gap: var(--spacing-xs);\n      }\n      \n      .diagram-control {\n        width: 32px;\n        height: 32px;\n        border: 1px solid var(--md-default-fg-color--lighter);\n        background: var(--md-default-bg-color);\n        border-radius: var(--radius-sm);\n        cursor: pointer;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        transition: var(--hover-transition);\n        color: var(--md-default-fg-color);\n      }\n      \n      .diagram-control:hover {\n        background: var(--md-primary-fg-color);\n        color: white;\n        border-color: var(--md-primary-fg-color);\n        transform: translateY(-1px);\n      }\n      \n      .diagram-content {\n        padding: var(--spacing-lg);\n        overflow: auto;\n      }\n      \n      /* Animation classes */\n      .diagram-animate {\n        animation: diagramFadeIn 0.5s ease-out;\n      }\n      \n      @keyframes diagramFadeIn {\n        from {\n          opacity: 0;\n          transform: translateY(10px);\n        }\n        to {\n          opacity: 1;\n          transform: translateY(0);\n        }\n      }\n      \n      /* Learning Path Visualization */\n      .learning-path-diagram {\n        background: linear-gradient(135deg, #f8f9fa, #e9ecef);\n        border-radius: var(--radius-lg);\n        padding: var(--spacing-xl);\n        margin: var(--spacing-xl) 0;\n      }\n      \n      .path-header {\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n        margin-bottom: var(--spacing-lg);\n      }\n      \n      .path-controls {\n        display: flex;\n        gap: var(--spacing-sm);\n      }\n      \n      .path-control {\n        padding: var(--spacing-sm) var(--spacing-md);\n        background: var(--md-primary-fg-color);\n        color: white;\n        border: none;\n        border-radius: var(--radius-md);\n        cursor: pointer;\n        transition: var(--hover-transition);\n      }\n      \n      .path-control:hover {\n        background: var(--md-primary-fg-color--dark);\n      }\n      \n      .path-svg {\n        width: 100%;\n        height: 300px;\n      }\n      \n      .path-step {\n        cursor: pointer;\n        transition: var(--hover-transition);\n      }\n      \n      .path-step:hover .step-circle {\n        transform: scale(1.1);\n      }\n      \n      .path-legend {\n        display: flex;\n        justify-content: center;\n        gap: var(--spacing-lg);\n        margin-top: var(--spacing-lg);\n      }\n      \n      .legend-item {\n        display: flex;\n        align-items: center;\n        gap: var(--spacing-sm);\n        font-size: 0.9rem;\n      }\n      \n      .legend-color {\n        width: 16px;\n        height: 16px;\n        border-radius: 50%;\n      }\n      \n      /* Path animations */\n      .path-hidden {\n        opacity: 0;\n        transform: scale(0);\n      }\n      \n      .path-animate {\n        opacity: 1 !important;\n        transform: scale(1) !important;\n        transition: all 0.5s ease;\n      }\n      \n      /* System Design Canvas */\n      .system-design-interactive {\n        background: white;\n        border: 1px solid var(--md-default-fg-color--lighter);\n        border-radius: var(--radius-lg);\n        overflow: hidden;\n        margin: var(--spacing-xl) 0;\n      }\n      \n      .design-toolbar {\n        display: flex;\n        background: var(--md-default-fg-color--lightest);\n        border-bottom: 1px solid var(--md-default-fg-color--lighter);\n        padding: var(--spacing-md);\n        gap: var(--spacing-lg);\n        flex-wrap: wrap;\n      }\n      \n      .tool-section h5 {\n        margin: 0 0 var(--spacing-sm) 0;\n        font-size: 0.9rem;\n        color: var(--md-default-fg-color--dark);\n        text-transform: uppercase;\n        letter-spacing: 0.5px;\n      }\n      \n      .design-tool {\n        display: flex;\n        align-items: center;\n        gap: var(--spacing-xs);\n        padding: var(--spacing-xs) var(--spacing-sm);\n        background: white;\n        border: 1px solid var(--md-default-fg-color--lighter);\n        border-radius: var(--radius-md);\n        cursor: grab;\n        transition: var(--hover-transition);\n        margin-bottom: var(--spacing-xs);\n        font-size: 0.8rem;\n      }\n      \n      .design-tool:hover {\n        border-color: var(--md-primary-fg-color);\n        box-shadow: var(--shadow-light);\n        transform: translateY(-1px);\n      }\n      \n      .design-tool:active {\n        cursor: grabbing;\n      }\n      \n      .tool-icon {\n        font-size: 1.2rem;\n      }\n      \n      .design-canvas {\n        position: relative;\n        height: 400px;\n        background: #fafafa;\n        background-image: \n          linear-gradient(rgba(0,0,0,.05) 1px, transparent 1px),\n          linear-gradient(90deg, rgba(0,0,0,.05) 1px, transparent 1px);\n        background-size: 20px 20px;\n      }\n      \n      .canvas-components {\n        position: relative;\n        height: 100%;\n        z-index: 2;\n      }\n      \n      .canvas-component {\n        position: absolute;\n        width: 60px;\n        height: 60px;\n        background: white;\n        border: 2px solid var(--md-primary-fg-color);\n        border-radius: var(--radius-md);\n        cursor: move;\n        transition: var(--hover-transition);\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n        font-size: 0.7rem;\n        text-align: center;\n        box-shadow: var(--shadow-light);\n      }\n      \n      .canvas-component:hover {\n        transform: scale(1.05);\n        box-shadow: var(--shadow-medium);\n      }\n      \n      .canvas-component.selected {\n        border-color: var(--success-color);\n        box-shadow: 0 0 0 2px rgba(76, 175, 80, 0.3);\n      }\n      \n      .canvas-component.dragging {\n        transform: rotate(5deg);\n        box-shadow: var(--shadow-heavy);\n      }\n      \n      .component-icon {\n        font-size: 1.5rem;\n        margin-bottom: 2px;\n      }\n      \n      .component-label {\n        font-weight: 500;\n        line-height: 1.1;\n      }\n      \n      .component-delete {\n        position: absolute;\n        top: -8px;\n        right: -8px;\n        width: 20px;\n        height: 20px;\n        background: var(--error-color);\n        color: white;\n        border: none;\n        border-radius: 50%;\n        cursor: pointer;\n        font-size: 12px;\n        display: none;\n      }\n      \n      .canvas-component:hover .component-delete {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n      }\n      \n      .canvas-connections {\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        pointer-events: none;\n        z-index: 1;\n      }\n      \n      .design-info {\n        padding: var(--spacing-md);\n        background: var(--md-default-fg-color--lightest);\n        border-top: 1px solid var(--md-default-fg-color--lighter);\n      }\n      \n      .design-info h5 {\n        margin: 0 0 var(--spacing-sm) 0;\n        font-size: 0.9rem;\n      }\n      \n      .metrics {\n        display: flex;\n        gap: var(--spacing-lg);\n      }\n      \n      .metric {\n        font-size: 0.8rem;\n        color: var(--md-default-fg-color--light);\n      }\n      \n      /* Component Tooltip */\n      .component-tooltip {\n        position: absolute;\n        background: rgba(0, 0, 0, 0.9);\n        color: white;\n        padding: var(--spacing-sm);\n        border-radius: var(--radius-md);\n        font-size: 0.8rem;\n        max-width: 200px;\n        z-index: 1000;\n        opacity: 0;\n        transition: opacity 0.3s;\n      }\n      \n      .component-tooltip.show {\n        opacity: 1;\n      }\n      \n      .component-tooltip h6 {\n        margin: 0 0 var(--spacing-xs) 0;\n        font-size: 0.9rem;\n      }\n      \n      .component-tooltip p {\n        margin: 0;\n        line-height: 1.4;\n      }\n      \n      /* Mobile responsiveness */\n      @media (max-width: 768px) {\n        .diagram-header {\n          flex-direction: column;\n          gap: var(--spacing-md);\n        }\n        \n        .diagram-controls {\n          justify-content: center;\n        }\n        \n        .design-toolbar {\n          flex-direction: column;\n        }\n        \n        .design-canvas {\n          height: 300px;\n        }\n        \n        .path-header {\n          flex-direction: column;\n          gap: var(--spacing-md);\n        }\n        \n        .path-legend {\n          flex-direction: column;\n          align-items: center;\n        }\n      }\n    `;\n    \n    document.head.appendChild(style);\n  }\n}\n\n// Initialize interactive diagrams when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n  window.interactiveDiagrams = new InteractiveDiagrams();\n});"