/**\n * Advanced Search Features and Enhancements\n * Provides fuzzy search, filters, suggestions, and search analytics\n */\n\nclass AdvancedSearch {\n  constructor() {\n    this.searchIndex = null;\n    this.searchHistory = this.loadSearchHistory();\n    this.popularSearches = this.loadPopularSearches();\n    this.searchFilters = {\n      level: [],\n      topic: [],\n      difficulty: [],\n      contentType: []\n    };\n    this.init();\n  }\n\n  init() {\n    this.enhanceDefaultSearch();\n    this.buildAdvancedSearchInterface();\n    this.loadSearchIndex();\n    this.bindSearchEvents();\n    this.initSearchSuggestions();\n  }\n\n  enhanceDefaultSearch() {\n    const searchInput = document.querySelector('.md-search__input');\n    const searchForm = document.querySelector('.md-search__form');\n    \n    if (searchInput) {\n      // Add search enhancements\n      searchInput.setAttribute('autocomplete', 'off');\n      searchInput.setAttribute('spellcheck', 'false');\n      \n      // Create enhanced search container\n      const enhancedContainer = document.createElement('div');\n      enhancedContainer.className = 'advanced-search-container';\n      enhancedContainer.innerHTML = `\n        <div class=\"search-suggestions\" role=\"listbox\"></div>\n        <div class=\"search-filters\">\n          <button type=\"button\" class=\"filter-toggle\" aria-expanded=\"false\">\n            <span>Filters</span>\n            <svg class=\"filter-icon\" viewBox=\"0 0 24 24\" width=\"16\" height=\"16\">\n              <path d=\"M10 18h4v-2h-4v2zM3 6v2h18V6H3zm3 7h12v-2H6v2z\"/>\n            </svg>\n          </button>\n          <div class=\"filter-panel\" hidden>\n            ${this.renderFilterPanel()}\n          </div>\n        </div>\n        <div class=\"search-stats\"></div>\n      `;\n      \n      searchForm.appendChild(enhancedContainer);\n    }\n  }\n\n  renderFilterPanel() {\n    return `\n      <div class=\"filter-section\">\n        <h4>Level</h4>\n        <div class=\"filter-options\">\n          <label><input type=\"checkbox\" value=\"l6\"> L6</label>\n          <label><input type=\"checkbox\" value=\"l7\"> L7</label>\n          <label><input type=\"checkbox\" value=\"beginner\"> Beginner</label>\n          <label><input type=\"checkbox\" value=\"advanced\"> Advanced</label>\n        </div>\n      </div>\n      \n      <div class=\"filter-section\">\n        <h4>Topic</h4>\n        <div class=\"filter-options\">\n          <label><input type=\"checkbox\" value=\"behavioral\"> Behavioral</label>\n          <label><input type=\"checkbox\" value=\"system-design\"> System Design</label>\n          <label><input type=\"checkbox\" value=\"coding\"> Coding</label>\n          <label><input type=\"checkbox\" value=\"leadership\"> Leadership</label>\n        </div>\n      </div>\n      \n      <div class=\"filter-section\">\n        <h4>Content Type</h4>\n        <div class=\"filter-options\">\n          <label><input type=\"checkbox\" value=\"guide\"> Guides</label>\n          <label><input type=\"checkbox\" value=\"practice\"> Practice</label>\n          <label><input type=\"checkbox\" value=\"example\"> Examples</label>\n          <label><input type=\"checkbox\" value=\"template\"> Templates</label>\n        </div>\n      </div>\n      \n      <div class=\"filter-actions\">\n        <button type=\"button\" class=\"filter-clear\">Clear All</button>\n        <button type=\"button\" class=\"filter-apply\">Apply Filters</button>\n      </div>\n    `;\n  }\n\n  buildAdvancedSearchInterface() {\n    // Create floating search widget\n    const searchWidget = document.createElement('div');\n    searchWidget.className = 'advanced-search-widget';\n    searchWidget.innerHTML = `\n      <button class=\"search-widget-toggle\" aria-label=\"Open advanced search\" title=\"Advanced Search (Ctrl+K)\">\n        <svg viewBox=\"0 0 24 24\" width=\"20\" height=\"20\">\n          <path d=\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"/>\n        </svg>\n      </button>\n      <div class=\"search-widget-panel\" hidden>\n        <div class=\"search-widget-header\">\n          <input type=\"search\" class=\"search-widget-input\" placeholder=\"Search SystemCraft...\" autocomplete=\"off\">\n          <button class=\"search-widget-close\" aria-label=\"Close\">&times;</button>\n        </div>\n        <div class=\"search-widget-body\">\n          <div class=\"search-quick-filters\">\n            <button class=\"quick-filter\" data-filter=\"recent\">Recent</button>\n            <button class=\"quick-filter\" data-filter=\"popular\">Popular</button>\n            <button class=\"quick-filter\" data-filter=\"behavioral\">Behavioral</button>\n            <button class=\"quick-filter\" data-filter=\"system-design\">System Design</button>\n            <button class=\"quick-filter\" data-filter=\"coding\">Coding</button>\n          </div>\n          <div class=\"search-results-container\">\n            <div class=\"search-suggestions-list\" role=\"listbox\"></div>\n          </div>\n          <div class=\"search-footer\">\n            <div class=\"search-shortcuts\">\n              <kbd>↑↓</kbd> to navigate\n              <kbd>↵</kbd> to select\n              <kbd>Esc</kbd> to close\n            </div>\n          </div>\n        </div>\n      </div>\n    `;\n    \n    document.body.appendChild(searchWidget);\n  }\n\n  async loadSearchIndex() {\n    try {\n      // Try to load the search index from MkDocs\n      const response = await fetch('/search/search_index.json');\n      if (response.ok) {\n        this.searchIndex = await response.json();\n        this.buildFuzzySearchIndex();\n      } else {\n        // Fallback to building index from page content\n        this.buildContentIndex();\n      }\n    } catch (error) {\n      console.warn('Could not load search index:', error);\n      this.buildContentIndex();\n    }\n  }\n\n  buildFuzzySearchIndex() {\n    if (!this.searchIndex) return;\n    \n    // Enhance index with additional metadata\n    this.enhancedIndex = this.searchIndex.docs.map(doc => ({\n      ...doc,\n      // Extract metadata from content\n      level: this.extractLevel(doc.text),\n      difficulty: this.extractDifficulty(doc.text),\n      topic: this.extractTopic(doc.location),\n      contentType: this.extractContentType(doc.location),\n      keywords: this.extractKeywords(doc.text)\n    }));\n  }\n\n  buildContentIndex() {\n    // Fallback method to build index from page content\n    const pages = document.querySelectorAll('[data-md-component=\"content\"]');\n    this.enhancedIndex = [];\n    \n    // This would be implemented to scan current page content\n    console.log('Building content index from current page...');\n  }\n\n  extractLevel(text) {\n    if (text.toLowerCase().includes('l7') || text.toLowerCase().includes('principal')) return 'l7';\n    if (text.toLowerCase().includes('l6') || text.toLowerCase().includes('senior')) return 'l6';\n    return null;\n  }\n\n  extractDifficulty(text) {\n    const text_lower = text.toLowerCase();\n    if (text_lower.includes('beginner') || text_lower.includes('basic')) return 'beginner';\n    if (text_lower.includes('advanced') || text_lower.includes('expert')) return 'advanced';\n    if (text_lower.includes('intermediate')) return 'intermediate';\n    return null;\n  }\n\n  extractTopic(location) {\n    if (location.includes('behavioral')) return 'behavioral';\n    if (location.includes('system-design')) return 'system-design';\n    if (location.includes('coding')) return 'coding';\n    if (location.includes('leadership')) return 'leadership';\n    return null;\n  }\n\n  extractContentType(location) {\n    if (location.includes('practice')) return 'practice';\n    if (location.includes('template')) return 'template';\n    if (location.includes('example')) return 'example';\n    return 'guide';\n  }\n\n  extractKeywords(text) {\n    // Simple keyword extraction\n    const words = text.toLowerCase().match(/\\b\\w{4,}\\b/g) || [];\n    const commonWords = new Set(['that', 'this', 'with', 'from', 'they', 'have', 'will', 'been', 'were', 'said', 'what', 'your']);\n    return words.filter(word => !commonWords.has(word)).slice(0, 10);\n  }\n\n  bindSearchEvents() {\n    // Keyboard shortcuts\n    document.addEventListener('keydown', (e) => {\n      if ((e.ctrlKey || e.metaKey) && e.key === 'k') {\n        e.preventDefault();\n        this.openAdvancedSearch();\n      }\n      if (e.key === 'Escape') {\n        this.closeAdvancedSearch();\n      }\n    });\n\n    // Search widget events\n    const searchToggle = document.querySelector('.search-widget-toggle');\n    const searchClose = document.querySelector('.search-widget-close');\n    const searchInput = document.querySelector('.search-widget-input');\n    \n    if (searchToggle) {\n      searchToggle.addEventListener('click', () => this.openAdvancedSearch());\n    }\n    \n    if (searchClose) {\n      searchClose.addEventListener('click', () => this.closeAdvancedSearch());\n    }\n    \n    if (searchInput) {\n      searchInput.addEventListener('input', (e) => this.handleSearchInput(e.target.value));\n      searchInput.addEventListener('keydown', (e) => this.handleSearchKeydown(e));\n    }\n\n    // Filter events\n    document.addEventListener('click', (e) => {\n      if (e.target.classList.contains('filter-toggle')) {\n        this.toggleFilterPanel(e.target);\n      }\n      if (e.target.classList.contains('quick-filter')) {\n        this.applyQuickFilter(e.target.dataset.filter);\n      }\n      if (e.target.classList.contains('filter-apply')) {\n        this.applyFilters();\n      }\n      if (e.target.classList.contains('filter-clear')) {\n        this.clearFilters();\n      }\n    });\n\n    // Filter change events\n    document.addEventListener('change', (e) => {\n      if (e.target.type === 'checkbox' && e.target.closest('.filter-panel')) {\n        this.updateSearchFilters();\n      }\n    });\n  }\n\n  openAdvancedSearch() {\n    const widget = document.querySelector('.advanced-search-widget');\n    const panel = document.querySelector('.search-widget-panel');\n    const input = document.querySelector('.search-widget-input');\n    \n    if (widget) {\n      widget.classList.add('active');\n      panel.hidden = false;\n      input.focus();\n      \n      // Show recent/popular searches\n      this.showDefaultSuggestions();\n    }\n  }\n\n  closeAdvancedSearch() {\n    const widget = document.querySelector('.advanced-search-widget');\n    const panel = document.querySelector('.search-widget-panel');\n    \n    if (widget) {\n      widget.classList.remove('active');\n      panel.hidden = true;\n    }\n  }\n\n  handleSearchInput(query) {\n    if (query.length < 2) {\n      this.showDefaultSuggestions();\n      return;\n    }\n    \n    const results = this.performFuzzySearch(query);\n    this.displaySearchResults(results, query);\n    \n    // Update search stats\n    this.updateSearchStats(query, results.length);\n  }\n\n  performFuzzySearch(query) {\n    if (!this.enhancedIndex) return [];\n    \n    const queryTerms = query.toLowerCase().split(/\\s+/);\n    const results = [];\n    \n    this.enhancedIndex.forEach(doc => {\n      let score = 0;\n      const text = `${doc.title} ${doc.text}`.toLowerCase();\n      \n      queryTerms.forEach(term => {\n        // Exact matches\n        if (text.includes(term)) {\n          score += term.length;\n        }\n        \n        // Fuzzy matching (simple implementation)\n        if (this.fuzzyMatch(text, term)) {\n          score += term.length * 0.7;\n        }\n        \n        // Title matches get higher score\n        if (doc.title.toLowerCase().includes(term)) {\n          score += term.length * 1.5;\n        }\n        \n        // Keyword matches\n        if (doc.keywords && doc.keywords.some(kw => kw.includes(term))) {\n          score += term.length * 0.8;\n        }\n      });\n      \n      // Apply filters\n      if (this.matchesFilters(doc)) {\n        results.push({ ...doc, score });\n      }\n    });\n    \n    // Sort by score and return top results\n    return results\n      .filter(r => r.score > 0)\n      .sort((a, b) => b.score - a.score)\n      .slice(0, 10);\n  }\n\n  fuzzyMatch(text, term) {\n    // Simple fuzzy matching - checks if characters appear in order\n    let textIndex = 0;\n    let termIndex = 0;\n    \n    while (textIndex < text.length && termIndex < term.length) {\n      if (text[textIndex] === term[termIndex]) {\n        termIndex++;\n      }\n      textIndex++;\n    }\n    \n    return termIndex === term.length;\n  }\n\n  matchesFilters(doc) {\n    const activeFilters = this.getActiveFilters();\n    \n    // If no filters are active, show all results\n    if (Object.values(activeFilters).every(f => f.length === 0)) {\n      return true;\n    }\n    \n    // Check each filter category\n    for (const [category, values] of Object.entries(activeFilters)) {\n      if (values.length > 0) {\n        const docValue = doc[category];\n        if (!docValue || !values.includes(docValue)) {\n          return false;\n        }\n      }\n    }\n    \n    return true;\n  }\n\n  getActiveFilters() {\n    const filters = { level: [], topic: [], difficulty: [], contentType: [] };\n    \n    document.querySelectorAll('.filter-panel input[type=\"checkbox\"]:checked').forEach(checkbox => {\n      const section = checkbox.closest('.filter-section');\n      const category = section?.querySelector('h4')?.textContent.toLowerCase();\n      \n      if (category && filters[category]) {\n        filters[category].push(checkbox.value);\n      }\n    });\n    \n    return filters;\n  }\n\n  displaySearchResults(results, query) {\n    const container = document.querySelector('.search-suggestions-list');\n    if (!container) return;\n    \n    if (results.length === 0) {\n      container.innerHTML = `\n        <div class=\"search-no-results\">\n          <div class=\"no-results-icon\">🔍</div>\n          <p>No results found for \"<strong>${this.escapeHtml(query)}</strong>\"</p>\n          <p class=\"text-sm\">Try different keywords or check your spelling</p>\n        </div>\n      `;\n      return;\n    }\n    \n    container.innerHTML = results.map((result, index) => `\n      <div class=\"search-result-item\" \n           role=\"option\" \n           tabindex=\"-1\" \n           data-url=\"${result.location}\"\n           data-index=\"${index}\">\n        <div class=\"search-result-header\">\n          <h4 class=\"search-result-title\">${this.highlightQuery(result.title, query)}</h4>\n          <div class=\"search-result-badges\">\n            ${result.level ? `<span class=\"badge badge--${result.level}\">${result.level.toUpperCase()}</span>` : ''}\n            ${result.difficulty ? `<span class=\"badge badge--${result.difficulty}\">${result.difficulty}</span>` : ''}\n          </div>\n        </div>\n        <p class=\"search-result-text\">${this.highlightQuery(this.truncateText(result.text, 120), query)}</p>\n        <div class=\"search-result-meta\">\n          <span class=\"search-result-type\">${result.contentType || 'Guide'}</span>\n          <span class=\"search-result-topic\">${result.topic || 'General'}</span>\n        </div>\n      </div>\n    `).join('');\n    \n    // Bind result click events\n    container.querySelectorAll('.search-result-item').forEach(item => {\n      item.addEventListener('click', () => {\n        const url = item.dataset.url;\n        this.recordSearch(query, url);\n        window.location.href = url;\n      });\n    });\n  }\n\n  showDefaultSuggestions() {\n    const container = document.querySelector('.search-suggestions-list');\n    if (!container) return;\n    \n    const recentSearches = this.searchHistory.slice(0, 5);\n    const popularSearches = this.popularSearches.slice(0, 5);\n    \n    container.innerHTML = `\n      ${recentSearches.length > 0 ? `\n        <div class=\"search-suggestions-section\">\n          <h4>Recent Searches</h4>\n          ${recentSearches.map(search => `\n            <div class=\"search-suggestion\" data-query=\"${search.query}\">\n              <span class=\"suggestion-icon\">🕒</span>\n              <span class=\"suggestion-text\">${this.escapeHtml(search.query)}</span>\n            </div>\n          `).join('')}\n        </div>\n      ` : ''}\n      \n      ${popularSearches.length > 0 ? `\n        <div class=\"search-suggestions-section\">\n          <h4>Popular Searches</h4>\n          ${popularSearches.map(search => `\n            <div class=\"search-suggestion\" data-query=\"${search.query}\">\n              <span class=\"suggestion-icon\">🔥</span>\n              <span class=\"suggestion-text\">${this.escapeHtml(search.query)}</span>\n              <span class=\"suggestion-count\">${search.count}</span>\n            </div>\n          `).join('')}\n        </div>\n      ` : ''}\n      \n      <div class=\"search-suggestions-section\">\n        <h4>Quick Start</h4>\n        <div class=\"search-suggestion\" data-query=\"behavioral interview\">\n          <span class=\"suggestion-icon\">💼</span>\n          <span class=\"suggestion-text\">Behavioral interview prep</span>\n        </div>\n        <div class=\"search-suggestion\" data-query=\"system design\">\n          <span class=\"suggestion-icon\">🏗️</span>\n          <span class=\"suggestion-text\">System design fundamentals</span>\n        </div>\n        <div class=\"search-suggestion\" data-query=\"coding problems\">\n          <span class=\"suggestion-icon\">💻</span>\n          <span class=\"suggestion-text\">Coding practice problems</span>\n        </div>\n      </div>\n    `;\n    \n    // Bind suggestion clicks\n    container.querySelectorAll('.search-suggestion').forEach(suggestion => {\n      suggestion.addEventListener('click', () => {\n        const query = suggestion.dataset.query;\n        const input = document.querySelector('.search-widget-input');\n        if (input) {\n          input.value = query;\n          this.handleSearchInput(query);\n        }\n      });\n    });\n  }\n\n  handleSearchKeydown(e) {\n    const results = document.querySelectorAll('.search-result-item');\n    const currentActive = document.querySelector('.search-result-item.active');\n    \n    switch (e.key) {\n      case 'ArrowDown':\n        e.preventDefault();\n        const nextIndex = currentActive ? \n          Math.min(parseInt(currentActive.dataset.index) + 1, results.length - 1) : 0;\n        this.setActiveResult(nextIndex);\n        break;\n      \n      case 'ArrowUp':\n        e.preventDefault();\n        const prevIndex = currentActive ? \n          Math.max(parseInt(currentActive.dataset.index) - 1, 0) : results.length - 1;\n        this.setActiveResult(prevIndex);\n        break;\n      \n      case 'Enter':\n        e.preventDefault();\n        if (currentActive) {\n          const url = currentActive.dataset.url;\n          const query = e.target.value;\n          this.recordSearch(query, url);\n          window.location.href = url;\n        }\n        break;\n    }\n  }\n\n  setActiveResult(index) {\n    const results = document.querySelectorAll('.search-result-item');\n    results.forEach((result, i) => {\n      result.classList.toggle('active', i === index);\n      if (i === index) {\n        result.scrollIntoView({ block: 'nearest' });\n      }\n    });\n  }\n\n  highlightQuery(text, query) {\n    if (!query || !text) return text;\n    \n    const queryTerms = query.toLowerCase().split(/\\s+/);\n    let highlightedText = text;\n    \n    queryTerms.forEach(term => {\n      const regex = new RegExp(`(${this.escapeRegex(term)})`, 'gi');\n      highlightedText = highlightedText.replace(regex, '<mark>$1</mark>');\n    });\n    \n    return highlightedText;\n  }\n\n  truncateText(text, length) {\n    if (text.length <= length) return text;\n    return text.substring(0, length) + '...';\n  }\n\n  escapeHtml(text) {\n    const div = document.createElement('div');\n    div.textContent = text;\n    return div.innerHTML;\n  }\n\n  escapeRegex(string) {\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n  }\n\n  recordSearch(query, resultUrl = null) {\n    const searchRecord = {\n      query: query.trim(),\n      timestamp: new Date().toISOString(),\n      resultUrl\n    };\n    \n    // Add to search history\n    this.searchHistory = this.searchHistory.filter(s => s.query !== query);\n    this.searchHistory.unshift(searchRecord);\n    this.searchHistory = this.searchHistory.slice(0, 20); // Keep last 20\n    \n    // Update popular searches\n    const popularIndex = this.popularSearches.findIndex(s => s.query === query);\n    if (popularIndex >= 0) {\n      this.popularSearches[popularIndex].count++;\n    } else {\n      this.popularSearches.push({ query, count: 1 });\n    }\n    this.popularSearches.sort((a, b) => b.count - a.count);\n    this.popularSearches = this.popularSearches.slice(0, 20);\n    \n    // Save to storage\n    this.saveSearchData();\n  }\n\n  loadSearchHistory() {\n    try {\n      const saved = localStorage.getItem('systemcraft-search-history');\n      return saved ? JSON.parse(saved) : [];\n    } catch (e) {\n      return [];\n    }\n  }\n\n  loadPopularSearches() {\n    try {\n      const saved = localStorage.getItem('systemcraft-popular-searches');\n      return saved ? JSON.parse(saved) : [];\n    } catch (e) {\n      return [];\n    }\n  }\n\n  saveSearchData() {\n    try {\n      localStorage.setItem('systemcraft-search-history', JSON.stringify(this.searchHistory));\n      localStorage.setItem('systemcraft-popular-searches', JSON.stringify(this.popularSearches));\n    } catch (e) {\n      console.warn('Could not save search data:', e);\n    }\n  }\n\n  toggleFilterPanel(toggle) {\n    const panel = toggle.nextElementSibling;\n    const isExpanded = toggle.getAttribute('aria-expanded') === 'true';\n    \n    toggle.setAttribute('aria-expanded', !isExpanded);\n    panel.hidden = isExpanded;\n  }\n\n  applyQuickFilter(filterType) {\n    // Clear existing filters first\n    this.clearFilters();\n    \n    switch (filterType) {\n      case 'behavioral':\n        this.setFilter('topic', 'behavioral');\n        break;\n      case 'system-design':\n        this.setFilter('topic', 'system-design');\n        break;\n      case 'coding':\n        this.setFilter('topic', 'coding');\n        break;\n      case 'recent':\n        this.showRecentContent();\n        return;\n      case 'popular':\n        this.showPopularContent();\n        return;\n    }\n    \n    // Refresh search results\n    const query = document.querySelector('.search-widget-input')?.value;\n    if (query) {\n      this.handleSearchInput(query);\n    }\n  }\n\n  setFilter(category, value) {\n    const checkbox = document.querySelector(`.filter-panel input[value=\"${value}\"]`);\n    if (checkbox) {\n      checkbox.checked = true;\n    }\n  }\n\n  clearFilters() {\n    document.querySelectorAll('.filter-panel input[type=\"checkbox\"]').forEach(cb => {\n      cb.checked = false;\n    });\n  }\n\n  applyFilters() {\n    const query = document.querySelector('.search-widget-input')?.value;\n    if (query) {\n      this.handleSearchInput(query);\n    }\n    \n    // Close filter panel\n    const filterToggle = document.querySelector('.filter-toggle');\n    if (filterToggle) {\n      this.toggleFilterPanel(filterToggle);\n    }\n  }\n\n  updateSearchStats(query, resultCount) {\n    const statsContainer = document.querySelector('.search-stats');\n    if (statsContainer) {\n      const timeString = resultCount > 0 ? 'Found' : 'No results';\n      statsContainer.textContent = `${timeString} ${resultCount} results`;\n    }\n  }\n\n  initSearchSuggestions() {\n    // Initialize autocomplete suggestions for main search\n    const mainSearchInput = document.querySelector('.md-search__input');\n    if (mainSearchInput) {\n      let suggestionTimeout;\n      \n      mainSearchInput.addEventListener('input', (e) => {\n        clearTimeout(suggestionTimeout);\n        suggestionTimeout = setTimeout(() => {\n          this.showMainSearchSuggestions(e.target.value);\n        }, 200);\n      });\n    }\n  }\n\n  showMainSearchSuggestions(query) {\n    if (query.length < 2) return;\n    \n    const suggestions = this.generateSuggestions(query);\n    if (suggestions.length === 0) return;\n    \n    // Create or update suggestions dropdown\n    let suggestionsContainer = document.querySelector('.search-suggestions');\n    if (!suggestionsContainer) return;\n    \n    suggestionsContainer.innerHTML = suggestions.map(suggestion => `\n      <div class=\"search-suggestion-item\" data-suggestion=\"${this.escapeHtml(suggestion)}\">\n        <span class=\"suggestion-icon\">💡</span>\n        <span class=\"suggestion-text\">${this.highlightQuery(suggestion, query)}</span>\n      </div>\n    `).join('');\n    \n    suggestionsContainer.style.display = 'block';\n    \n    // Bind click events\n    suggestionsContainer.querySelectorAll('.search-suggestion-item').forEach(item => {\n      item.addEventListener('click', () => {\n        const mainInput = document.querySelector('.md-search__input');\n        if (mainInput) {\n          mainInput.value = item.dataset.suggestion;\n          mainInput.dispatchEvent(new Event('input'));\n          suggestionsContainer.style.display = 'none';\n        }\n      });\n    });\n  }\n\n  generateSuggestions(query) {\n    const suggestions = [\n      'behavioral interview questions',\n      'system design patterns',\n      'coding interview practice',\n      'leadership principles',\n      'Amazon L6 requirements',\n      'Amazon L7 requirements',\n      'STAR method examples',\n      'system design fundamentals',\n      'mock interview preparation',\n      'salary negotiation tips'\n    ];\n    \n    return suggestions\n      .filter(s => s.toLowerCase().includes(query.toLowerCase()))\n      .slice(0, 5);\n  }\n\n  showRecentContent() {\n    // Implementation to show recently viewed content\n    console.log('Showing recent content...');\n  }\n\n  showPopularContent() {\n    // Implementation to show popular content\n    console.log('Showing popular content...');\n  }\n}\n\n// Initialize when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n  window.advancedSearch = new AdvancedSearch();\n});\n\n// Add required CSS\nconst searchCSS = `\n.advanced-search-widget {\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  z-index: 1000;\n}\n\n.search-widget-toggle {\n  width: 48px;\n  height: 48px;\n  border-radius: 50%;\n  background: var(--md-primary-fg-color);\n  color: white;\n  border: none;\n  cursor: pointer;\n  box-shadow: var(--shadow-medium);\n  transition: var(--hover-transition);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.search-widget-toggle:hover {\n  background: var(--md-primary-fg-color--dark);\n  transform: scale(1.05);\n}\n\n.search-widget-panel {\n  position: absolute;\n  top: 60px;\n  right: 0;\n  width: 400px;\n  max-height: 500px;\n  background: white;\n  border-radius: var(--radius-lg);\n  box-shadow: var(--shadow-heavy);\n  border: 1px solid var(--md-default-fg-color--lighter);\n  overflow: hidden;\n}\n\n.search-widget-header {\n  display: flex;\n  align-items: center;\n  padding: var(--spacing-md);\n  border-bottom: 1px solid var(--md-default-fg-color--lighter);\n}\n\n.search-widget-input {\n  flex: 1;\n  border: none;\n  outline: none;\n  font-size: 16px;\n  padding: var(--spacing-sm) 0;\n}\n\n.search-widget-close {\n  background: none;\n  border: none;\n  font-size: 20px;\n  cursor: pointer;\n  padding: var(--spacing-xs);\n  border-radius: var(--radius-sm);\n  color: var(--md-default-fg-color--light);\n}\n\n.search-widget-close:hover {\n  background: var(--md-default-fg-color--lightest);\n}\n\n.search-widget-body {\n  max-height: 400px;\n  overflow-y: auto;\n}\n\n.search-quick-filters {\n  display: flex;\n  gap: var(--spacing-xs);\n  padding: var(--spacing-md);\n  border-bottom: 1px solid var(--md-default-fg-color--lighter);\n  flex-wrap: wrap;\n}\n\n.quick-filter {\n  padding: var(--spacing-xs) var(--spacing-sm);\n  background: var(--md-default-fg-color--lightest);\n  border: 1px solid transparent;\n  border-radius: var(--radius-xl);\n  font-size: 0.8rem;\n  cursor: pointer;\n  transition: var(--hover-transition);\n}\n\n.quick-filter:hover,\n.quick-filter.active {\n  background: var(--md-primary-fg-color);\n  color: white;\n}\n\n.search-suggestions-list {\n  padding: var(--spacing-sm);\n}\n\n.search-result-item {\n  padding: var(--spacing-md);\n  border-radius: var(--radius-md);\n  cursor: pointer;\n  transition: var(--hover-transition);\n  border-bottom: 1px solid var(--md-default-fg-color--lightest);\n}\n\n.search-result-item:hover,\n.search-result-item.active {\n  background: rgba(255, 153, 0, 0.1);\n}\n\n.search-result-header {\n  display: flex;\n  align-items: flex-start;\n  justify-content: space-between;\n  margin-bottom: var(--spacing-xs);\n}\n\n.search-result-title {\n  margin: 0;\n  font-size: 1rem;\n  font-weight: 600;\n  color: var(--md-primary-fg-color--dark);\n}\n\n.search-result-badges {\n  display: flex;\n  gap: var(--spacing-xs);\n}\n\n.search-result-text {\n  margin: var(--spacing-xs) 0;\n  color: var(--md-default-fg-color--light);\n  font-size: 0.9rem;\n  line-height: 1.4;\n}\n\n.search-result-meta {\n  display: flex;\n  gap: var(--spacing-sm);\n  font-size: 0.8rem;\n  color: var(--md-default-fg-color--lighter);\n}\n\n.search-suggestions-section {\n  margin-bottom: var(--spacing-lg);\n}\n\n.search-suggestions-section h4 {\n  margin: 0 0 var(--spacing-sm) 0;\n  font-size: 0.9rem;\n  color: var(--md-default-fg-color--light);\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n  padding: 0 var(--spacing-md);\n}\n\n.search-suggestion {\n  display: flex;\n  align-items: center;\n  gap: var(--spacing-sm);\n  padding: var(--spacing-sm) var(--spacing-md);\n  cursor: pointer;\n  transition: var(--hover-transition);\n}\n\n.search-suggestion:hover {\n  background: rgba(255, 153, 0, 0.1);\n}\n\n.suggestion-icon {\n  font-size: 1rem;\n  opacity: 0.7;\n}\n\n.suggestion-text {\n  flex: 1;\n}\n\n.suggestion-count {\n  font-size: 0.8rem;\n  color: var(--md-default-fg-color--light);\n  background: var(--md-default-fg-color--lightest);\n  padding: 0.2em 0.5em;\n  border-radius: var(--radius-xl);\n}\n\n.search-no-results {\n  text-align: center;\n  padding: var(--spacing-xl);\n  color: var(--md-default-fg-color--light);\n}\n\n.no-results-icon {\n  font-size: 3rem;\n  margin-bottom: var(--spacing-md);\n  opacity: 0.5;\n}\n\n.search-footer {\n  padding: var(--spacing-sm) var(--spacing-md);\n  border-top: 1px solid var(--md-default-fg-color--lighter);\n  background: var(--md-default-fg-color--lightest);\n}\n\n.search-shortcuts {\n  display: flex;\n  gap: var(--spacing-md);\n  font-size: 0.8rem;\n  color: var(--md-default-fg-color--light);\n  align-items: center;\n}\n\n.search-shortcuts kbd {\n  padding: 0.2em 0.4em;\n  background: white;\n  border: 1px solid var(--md-default-fg-color--lighter);\n  border-radius: var(--radius-sm);\n  font-size: 0.7rem;\n}\n\nmark {\n  background: var(--md-primary-fg-color);\n  color: white;\n  padding: 0.1em 0.2em;\n  border-radius: var(--radius-sm);\n}\n\n/* Filter styles */\n.filter-panel {\n  position: absolute;\n  top: 100%;\n  left: 0;\n  background: white;\n  border: 1px solid var(--md-default-fg-color--lighter);\n  border-radius: var(--radius-md);\n  box-shadow: var(--shadow-medium);\n  padding: var(--spacing-md);\n  min-width: 250px;\n  z-index: 1000;\n}\n\n.filter-section {\n  margin-bottom: var(--spacing-md);\n}\n\n.filter-section h4 {\n  margin: 0 0 var(--spacing-sm) 0;\n  font-size: 0.9rem;\n  color: var(--md-default-fg-color--dark);\n}\n\n.filter-options {\n  display: flex;\n  flex-direction: column;\n  gap: var(--spacing-xs);\n}\n\n.filter-options label {\n  display: flex;\n  align-items: center;\n  gap: var(--spacing-sm);\n  font-size: 0.9rem;\n  cursor: pointer;\n}\n\n.filter-actions {\n  display: flex;\n  gap: var(--spacing-sm);\n  justify-content: flex-end;\n  margin-top: var(--spacing-md);\n  padding-top: var(--spacing-md);\n  border-top: 1px solid var(--md-default-fg-color--lighter);\n}\n\n.filter-clear,\n.filter-apply {\n  padding: var(--spacing-xs) var(--spacing-md);\n  border: 1px solid var(--md-default-fg-color--lighter);\n  background: white;\n  border-radius: var(--radius-md);\n  cursor: pointer;\n  font-size: 0.9rem;\n  transition: var(--hover-transition);\n}\n\n.filter-apply {\n  background: var(--md-primary-fg-color);\n  color: white;\n  border-color: var(--md-primary-fg-color);\n}\n\n.filter-apply:hover {\n  background: var(--md-primary-fg-color--dark);\n}\n\n.filter-clear:hover {\n  background: var(--md-default-fg-color--lightest);\n}\n\n/* Mobile responsiveness */\n@media (max-width: 768px) {\n  .advanced-search-widget {\n    top: 10px;\n    right: 10px;\n  }\n  \n  .search-widget-panel {\n    width: calc(100vw - 20px);\n    max-width: 400px;\n  }\n  \n  .search-quick-filters {\n    justify-content: center;\n  }\n  \n  .search-shortcuts {\n    justify-content: center;\n  }\n}\n`;\n\nconst styleSheet = document.createElement('style');\nstyleSheet.textContent = searchCSS;\ndocument.head.appendChild(styleSheet);"