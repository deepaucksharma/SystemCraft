/**\n * Personalization and User Preferences System\n * Handles bookmarks, notes, custom goals, and user preferences\n */\n\nclass PersonalizationSystem {\n  constructor() {\n    this.storageKey = 'systemcraft-personalization';\n    this.preferences = this.loadPreferences();\n    this.init();\n  }\n\n  loadPreferences() {\n    try {\n      const saved = localStorage.getItem(this.storageKey);\n      if (saved) {\n        return JSON.parse(saved);\n      }\n    } catch (e) {\n      console.warn('Could not load preferences:', e);\n    }\n    \n    return {\n      bookmarks: [],\n      notes: {},\n      customGoals: [],\n      preferences: {\n        theme: 'auto',\n        fontSize: 16,\n        highContrast: false,\n        reducedMotion: false,\n        studyReminders: true,\n        progressNotifications: true,\n        weeklyDigest: false\n      },\n      studyPlan: {\n        targetLevel: null,\n        timeframe: null,\n        weakAreas: [],\n        completedSections: []\n      },\n      analytics: {\n        timeSpent: {},\n        sectionsVisited: {},\n        searchQueries: [],\n        lastVisit: null\n      }\n    };\n  }\n\n  savePreferences() {\n    try {\n      this.preferences.analytics.lastVisit = new Date().toISOString();\n      localStorage.setItem(this.storageKey, JSON.stringify(this.preferences));\n      this.dispatchEvent('preferencesUpdated', this.preferences);\n    } catch (e) {\n      console.error('Could not save preferences:', e);\n    }\n  }\n\n  init() {\n    this.createPersonalizationPanel();\n    this.bindEvents();\n    this.applyPreferences();\n    this.trackPageVisit();\n    this.initBookmarksPanel();\n    this.initNotesSystem();\n    this.startPeriodicSave();\n  }\n\n  createPersonalizationPanel() {\n    const panel = document.createElement('div');\n    panel.className = 'personalization-panel';\n    panel.innerHTML = `\n      <button class=\"personalization-toggle\" \n              aria-label=\"Open personalization settings\" \n              title=\"Personalization (Alt+P)\">\n        <svg viewBox=\"0 0 24 24\" width=\"20\" height=\"20\">\n          <path d=\"M12 15.5A3.5 3.5 0 0 1 8.5 12A3.5 3.5 0 0 1 12 8.5a3.5 3.5 0 0 1 3.5 3.5 3.5 3.5 0 0 1-3.5 3.5m7.43-2.53c.04-.32.07-.64.07-.97 0-.33-.03-.66-.07-1l2.11-1.63c.19-.15.24-.42.12-.64l-2-3.46c-.12-.22-.39-.31-.61-.22l-2.49 1c-.52-.39-1.06-.73-1.69-.98l-.37-2.65A.506.506 0 0 0 14 2h-4c-.25 0-.46.18-.5.42l-.37 2.65c-.63.25-1.17.59-1.69.98l-2.49-1c-.22-.09-.49 0-.61.22l-2 3.46c-.13.22-.07.49.12.64L4.57 11c-.04.34-.07.67-.07 1 0 .33.03.65.07.97l-2.11 1.66c-.19.15-.25.42-.12.64l2 3.46c.12.22.39.3.61.22l2.49-1.01c.52.4 1.06.74 1.69.99l.37 2.65c.04.24.25.42.5.42h4c.25 0 .46-.18.5-.42l.37-2.65c.63-.26 1.17-.59 1.69-.99l2.49 1.01c.22.08.49 0 .61-.22l2-3.46c.12-.22.07-.49-.12-.64l-2.11-1.66Z\"/>\n        </svg>\n      </button>\n      <div class=\"personalization-menu\" hidden>\n        <div class=\"personalization-header\">\n          <h3>Personalization</h3>\n          <button class=\"close-personalization\" aria-label=\"Close\">&times;</button>\n        </div>\n        <div class=\"personalization-tabs\">\n          <button class=\"tab-button active\" data-tab=\"preferences\">Preferences</button>\n          <button class=\"tab-button\" data-tab=\"bookmarks\">Bookmarks</button>\n          <button class=\"tab-button\" data-tab=\"notes\">Notes</button>\n          <button class=\"tab-button\" data-tab=\"goals\">Goals</button>\n        </div>\n        <div class=\"personalization-content\">\n          <div class=\"tab-panel active\" data-panel=\"preferences\">\n            ${this.renderPreferencesPanel()}\n          </div>\n          <div class=\"tab-panel\" data-panel=\"bookmarks\">\n            ${this.renderBookmarksPanel()}\n          </div>\n          <div class=\"tab-panel\" data-panel=\"notes\">\n            ${this.renderNotesPanel()}\n          </div>\n          <div class=\"tab-panel\" data-panel=\"goals\">\n            ${this.renderGoalsPanel()}\n          </div>\n        </div>\n      </div>\n    `;\n    \n    document.body.appendChild(panel);\n  }\n\n  renderPreferencesPanel() {\n    return `\n      <div class=\"preferences-section\">\n        <h4>Display Preferences</h4>\n        <div class=\"preference-item\">\n          <label for=\"theme-select\">Theme</label>\n          <select id=\"theme-select\" onchange=\"personalization.updatePreference('theme', this.value)\">\n            <option value=\"auto\" ${this.preferences.preferences.theme === 'auto' ? 'selected' : ''}>Auto</option>\n            <option value=\"light\" ${this.preferences.preferences.theme === 'light' ? 'selected' : ''}>Light</option>\n            <option value=\"dark\" ${this.preferences.preferences.theme === 'dark' ? 'selected' : ''}>Dark</option>\n          </select>\n        </div>\n        \n        <div class=\"preference-item\">\n          <label for=\"font-size-slider\">Font Size</label>\n          <div class=\"slider-container\">\n            <input type=\"range\" id=\"font-size-slider\" \n                   min=\"12\" max=\"24\" step=\"1\" \n                   value=\"${this.preferences.preferences.fontSize}\"\n                   oninput=\"personalization.updateFontSize(this.value)\">\n            <span class=\"slider-value\">${this.preferences.preferences.fontSize}px</span>\n          </div>\n        </div>\n        \n        <div class=\"preference-item\">\n          <label class=\"checkbox-label\">\n            <input type=\"checkbox\" \n                   ${this.preferences.preferences.highContrast ? 'checked' : ''}\n                   onchange=\"personalization.toggleHighContrast(this.checked)\">\n            High Contrast Mode\n          </label>\n        </div>\n        \n        <div class=\"preference-item\">\n          <label class=\"checkbox-label\">\n            <input type=\"checkbox\" \n                   ${this.preferences.preferences.reducedMotion ? 'checked' : ''}\n                   onchange=\"personalization.toggleReducedMotion(this.checked)\">\n            Reduce Motion\n          </label>\n        </div>\n      </div>\n      \n      <div class=\"preferences-section\">\n        <h4>Study Preferences</h4>\n        <div class=\"preference-item\">\n          <label for=\"target-level\">Target Level</label>\n          <select id=\"target-level\" onchange=\"personalization.updateStudyPlan('targetLevel', this.value)\">\n            <option value=\"\" ${!this.preferences.studyPlan.targetLevel ? 'selected' : ''}>Not specified</option>\n            <option value=\"l6\" ${this.preferences.studyPlan.targetLevel === 'l6' ? 'selected' : ''}>L6 Senior Engineering Manager</option>\n            <option value=\"l7\" ${this.preferences.studyPlan.targetLevel === 'l7' ? 'selected' : ''}>L7 Principal Engineering Manager</option>\n          </select>\n        </div>\n        \n        <div class=\"preference-item\">\n          <label for=\"timeframe\">Study Timeframe</label>\n          <select id=\"timeframe\" onchange=\"personalization.updateStudyPlan('timeframe', this.value)\">\n            <option value=\"\" ${!this.preferences.studyPlan.timeframe ? 'selected' : ''}>Not specified</option>\n            <option value=\"2-weeks\" ${this.preferences.studyPlan.timeframe === '2-weeks' ? 'selected' : ''}>2 weeks (Crash course)</option>\n            <option value=\"6-weeks\" ${this.preferences.studyPlan.timeframe === '6-weeks' ? 'selected' : ''}>6 weeks (Intensive)</option>\n            <option value=\"12-weeks\" ${this.preferences.studyPlan.timeframe === '12-weeks' ? 'selected' : ''}>12 weeks (Comprehensive)</option>\n            <option value=\"6-months\" ${this.preferences.studyPlan.timeframe === '6-months' ? 'selected' : ''}>6 months (Thorough)</option>\n          </select>\n        </div>\n        \n        <div class=\"preference-item\">\n          <label class=\"checkbox-label\">\n            <input type=\"checkbox\" \n                   ${this.preferences.preferences.studyReminders ? 'checked' : ''}\n                   onchange=\"personalization.updatePreference('studyReminders', this.checked)\">\n            Study Reminders\n          </label>\n        </div>\n        \n        <div class=\"preference-item\">\n          <label class=\"checkbox-label\">\n            <input type=\"checkbox\" \n                   ${this.preferences.preferences.progressNotifications ? 'checked' : ''}\n                   onchange=\"personalization.updatePreference('progressNotifications', this.checked)\">\n            Progress Notifications\n          </label>\n        </div>\n      </div>\n      \n      <div class=\"preferences-section\">\n        <h4>Data Management</h4>\n        <div class=\"preference-actions\">\n          <button class=\"md-button\" onclick=\"personalization.exportData()\">Export Data</button>\n          <button class=\"md-button\" onclick=\"personalization.importData()\">Import Data</button>\n          <button class=\"md-button md-button--primary\" onclick=\"personalization.resetAll()\">Reset All</button>\n        </div>\n      </div>\n    `;\n  }\n\n  renderBookmarksPanel() {\n    const bookmarks = this.preferences.bookmarks;\n    return `\n      <div class=\"bookmarks-section\">\n        <div class=\"section-header\">\n          <h4>Your Bookmarks</h4>\n          <button class=\"md-button md-button--primary\" onclick=\"personalization.bookmarkCurrentPage()\">\n            <span>📖</span> Bookmark This Page\n          </button>\n        </div>\n        \n        <div class=\"bookmarks-list\">\n          ${bookmarks.length === 0 ? `\n            <div class=\"empty-state\">\n              <div class=\"empty-icon\">📚</div>\n              <p>No bookmarks yet</p>\n              <p class=\"text-sm\">Bookmark pages to quickly access them later</p>\n            </div>\n          ` : bookmarks.map(bookmark => `\n            <div class=\"bookmark-item\">\n              <div class=\"bookmark-content\">\n                <a href=\"${bookmark.url}\" class=\"bookmark-title\">${bookmark.title}</a>\n                <div class=\"bookmark-meta\">\n                  <span class=\"bookmark-date\">${this.formatDate(bookmark.timestamp)}</span>\n                  ${bookmark.tags ? bookmark.tags.map(tag => `<span class=\"bookmark-tag\">${tag}</span>`).join('') : ''}\n                </div>\n                ${bookmark.note ? `<p class=\"bookmark-note\">${bookmark.note}</p>` : ''}\n              </div>\n              <div class=\"bookmark-actions\">\n                <button class=\"bookmark-action\" \n                        onclick=\"personalization.editBookmark('${bookmark.url}')\" \n                        title=\"Edit\">\n                  ✏️\n                </button>\n                <button class=\"bookmark-action\" \n                        onclick=\"personalization.removeBookmark('${bookmark.url}')\" \n                        title=\"Remove\">\n                  🗑️\n                </button>\n              </div>\n            </div>\n          `).join('')}\n        </div>\n        \n        ${bookmarks.length > 0 ? `\n          <div class=\"bookmarks-actions\">\n            <button class=\"md-button\" onclick=\"personalization.exportBookmarks()\">Export Bookmarks</button>\n            <button class=\"md-button\" onclick=\"personalization.clearBookmarks()\">Clear All</button>\n          </div>\n        ` : ''}\n      </div>\n    `;\n  }\n\n  renderNotesPanel() {\n    const notes = this.preferences.notes;\n    const noteEntries = Object.entries(notes);\n    \n    return `\n      <div class=\"notes-section\">\n        <div class=\"section-header\">\n          <h4>Your Notes</h4>\n          <button class=\"md-button md-button--primary\" onclick=\"personalization.addNoteToCurrentPage()\">\n            <span>📝</span> Add Note\n          </button>\n        </div>\n        \n        <div class=\"notes-list\">\n          ${noteEntries.length === 0 ? `\n            <div class=\"empty-state\">\n              <div class=\"empty-icon\">📝</div>\n              <p>No notes yet</p>\n              <p class=\"text-sm\">Add personal notes to remember key insights</p>\n            </div>\n          ` : noteEntries.map(([url, pageNotes]) => `\n            <div class=\"note-page\">\n              <h5 class=\"note-page-title\">\n                <a href=\"${url}\">${this.getPageTitle(url)}</a>\n              </h5>\n              <div class=\"note-items\">\n                ${pageNotes.map((note, index) => `\n                  <div class=\"note-item\">\n                    <div class=\"note-content\">${note.text}</div>\n                    <div class=\"note-meta\">\n                      <span class=\"note-date\">${this.formatDate(note.timestamp)}</span>\n                      <button class=\"note-action\" \n                              onclick=\"personalization.editNote('${url}', ${index})\" \n                              title=\"Edit\">\n                        ✏️\n                      </button>\n                      <button class=\"note-action\" \n                              onclick=\"personalization.deleteNote('${url}', ${index})\" \n                              title=\"Delete\">\n                        🗑️\n                      </button>\n                    </div>\n                  </div>\n                `).join('')}\n              </div>\n            </div>\n          `).join('')}\n        </div>\n        \n        ${noteEntries.length > 0 ? `\n          <div class=\"notes-actions\">\n            <button class=\"md-button\" onclick=\"personalization.exportNotes()\">Export Notes</button>\n            <button class=\"md-button\" onclick=\"personalization.clearNotes()\">Clear All</button>\n          </div>\n        ` : ''}\n      </div>\n    `;\n  }\n\n  renderGoalsPanel() {\n    const goals = this.preferences.customGoals;\n    return `\n      <div class=\"goals-section\">\n        <div class=\"section-header\">\n          <h4>Custom Study Goals</h4>\n          <button class=\"md-button md-button--primary\" onclick=\"personalization.addCustomGoal()\">\n            <span>🎯</span> Add Goal\n          </button>\n        </div>\n        \n        <div class=\"goals-list\">\n          ${goals.length === 0 ? `\n            <div class=\"empty-state\">\n              <div class=\"empty-icon\">🎯</div>\n              <p>No custom goals set</p>\n              <p class=\"text-sm\">Set personal study goals to track your progress</p>\n            </div>\n          ` : goals.map((goal, index) => `\n            <div class=\"goal-item\">\n              <div class=\"goal-header\">\n                <div class=\"goal-title\">${goal.title}</div>\n                <div class=\"goal-progress\">\n                  <div class=\"progress-bar\">\n                    <div class=\"progress-fill\" style=\"width: ${goal.progress || 0}%\"></div>\n                  </div>\n                  <span class=\"progress-text\">${goal.progress || 0}%</span>\n                </div>\n              </div>\n              ${goal.description ? `<p class=\"goal-description\">${goal.description}</p>` : ''}\n              <div class=\"goal-meta\">\n                <span class=\"goal-deadline\">Target: ${this.formatDate(goal.deadline)}</span>\n                <div class=\"goal-actions\">\n                  <button class=\"goal-action\" \n                          onclick=\"personalization.updateGoalProgress(${index})\" \n                          title=\"Update Progress\">\n                    📈\n                  </button>\n                  <button class=\"goal-action\" \n                          onclick=\"personalization.editGoal(${index})\" \n                          title=\"Edit\">\n                    ✏️\n                  </button>\n                  <button class=\"goal-action\" \n                          onclick=\"personalization.deleteGoal(${index})\" \n                          title=\"Delete\">\n                    🗑️\n                  </button>\n                </div>\n              </div>\n            </div>\n          `).join('')}\n        </div>\n      </div>\n    `;\n  }\n\n  bindEvents() {\n    // Toggle panel\n    document.addEventListener('click', (e) => {\n      if (e.target.classList.contains('personalization-toggle')) {\n        this.togglePanel();\n      }\n      \n      if (e.target.classList.contains('close-personalization')) {\n        this.closePanel();\n      }\n      \n      if (e.target.classList.contains('tab-button')) {\n        this.switchTab(e.target.dataset.tab);\n      }\n    });\n\n    // Keyboard shortcuts\n    document.addEventListener('keydown', (e) => {\n      if (e.altKey && e.key === 'p') {\n        e.preventDefault();\n        this.togglePanel();\n      }\n      \n      if (e.key === 'Escape') {\n        this.closePanel();\n      }\n    });\n\n    // Auto-save on beforeunload\n    window.addEventListener('beforeunload', () => {\n      this.savePreferences();\n    });\n  }\n\n  togglePanel() {\n    const menu = document.querySelector('.personalization-menu');\n    const isHidden = menu.hasAttribute('hidden');\n    \n    if (isHidden) {\n      menu.removeAttribute('hidden');\n      this.refreshPanelContent();\n    } else {\n      menu.setAttribute('hidden', '');\n    }\n  }\n\n  closePanel() {\n    const menu = document.querySelector('.personalization-menu');\n    menu.setAttribute('hidden', '');\n  }\n\n  switchTab(tabName) {\n    // Update tab buttons\n    document.querySelectorAll('.tab-button').forEach(btn => {\n      btn.classList.toggle('active', btn.dataset.tab === tabName);\n    });\n    \n    // Update tab panels\n    document.querySelectorAll('.tab-panel').forEach(panel => {\n      panel.classList.toggle('active', panel.dataset.panel === tabName);\n    });\n    \n    // Refresh content for the active tab\n    this.refreshTabContent(tabName);\n  }\n\n  refreshPanelContent() {\n    const activeTab = document.querySelector('.tab-button.active')?.dataset.tab || 'preferences';\n    this.refreshTabContent(activeTab);\n  }\n\n  refreshTabContent(tabName) {\n    const panel = document.querySelector(`[data-panel=\"${tabName}\"]`);\n    if (!panel) return;\n    \n    switch (tabName) {\n      case 'preferences':\n        panel.innerHTML = this.renderPreferencesPanel();\n        break;\n      case 'bookmarks':\n        panel.innerHTML = this.renderBookmarksPanel();\n        break;\n      case 'notes':\n        panel.innerHTML = this.renderNotesPanel();\n        break;\n      case 'goals':\n        panel.innerHTML = this.renderGoalsPanel();\n        break;\n    }\n  }\n\n  // Preference methods\n  updatePreference(key, value) {\n    this.preferences.preferences[key] = value;\n    this.applyPreference(key, value);\n    this.savePreferences();\n  }\n\n  updateFontSize(size) {\n    const fontSize = parseInt(size);\n    this.preferences.preferences.fontSize = fontSize;\n    document.documentElement.style.fontSize = `${fontSize}px`;\n    \n    // Update slider display\n    const sliderValue = document.querySelector('.slider-value');\n    if (sliderValue) {\n      sliderValue.textContent = `${fontSize}px`;\n    }\n    \n    this.savePreferences();\n  }\n\n  toggleHighContrast(enabled) {\n    this.preferences.preferences.highContrast = enabled;\n    document.documentElement.classList.toggle('high-contrast', enabled);\n    this.savePreferences();\n  }\n\n  toggleReducedMotion(enabled) {\n    this.preferences.preferences.reducedMotion = enabled;\n    document.documentElement.classList.toggle('reduced-motion', enabled);\n    this.savePreferences();\n  }\n\n  updateStudyPlan(key, value) {\n    this.preferences.studyPlan[key] = value;\n    this.savePreferences();\n    \n    // Trigger study plan recommendations update\n    this.dispatchEvent('studyPlanUpdated', this.preferences.studyPlan);\n  }\n\n  applyPreferences() {\n    Object.entries(this.preferences.preferences).forEach(([key, value]) => {\n      this.applyPreference(key, value);\n    });\n  }\n\n  applyPreference(key, value) {\n    switch (key) {\n      case 'theme':\n        this.applyTheme(value);\n        break;\n      case 'fontSize':\n        document.documentElement.style.fontSize = `${value}px`;\n        break;\n      case 'highContrast':\n        document.documentElement.classList.toggle('high-contrast', value);\n        break;\n      case 'reducedMotion':\n        document.documentElement.classList.toggle('reduced-motion', value);\n        break;\n    }\n  }\n\n  applyTheme(theme) {\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    \n    switch (theme) {\n      case 'light':\n        document.documentElement.setAttribute('data-md-color-scheme', 'default');\n        break;\n      case 'dark':\n        document.documentElement.setAttribute('data-md-color-scheme', 'slate');\n        break;\n      case 'auto':\n      default:\n        const prefersDark = mediaQuery.matches;\n        document.documentElement.setAttribute('data-md-color-scheme', prefersDark ? 'slate' : 'default');\n        \n        // Listen for system theme changes\n        mediaQuery.addListener((e) => {\n          if (this.preferences.preferences.theme === 'auto') {\n            document.documentElement.setAttribute('data-md-color-scheme', e.matches ? 'slate' : 'default');\n          }\n        });\n        break;\n    }\n  }\n\n  // Bookmark methods\n  bookmarkCurrentPage() {\n    const url = window.location.pathname;\n    const title = document.title;\n    \n    // Check if already bookmarked\n    if (this.preferences.bookmarks.some(b => b.url === url)) {\n      this.showNotification('Page already bookmarked', 'info');\n      return;\n    }\n    \n    const bookmark = {\n      url,\n      title,\n      timestamp: new Date().toISOString(),\n      tags: this.extractPageTags(),\n      note: ''\n    };\n    \n    this.preferences.bookmarks.unshift(bookmark);\n    this.savePreferences();\n    this.refreshTabContent('bookmarks');\n    this.showNotification('Page bookmarked successfully', 'success');\n  }\n\n  extractPageTags() {\n    const tags = [];\n    const url = window.location.pathname;\n    \n    if (url.includes('behavioral')) tags.push('Behavioral');\n    if (url.includes('system-design')) tags.push('System Design');\n    if (url.includes('coding')) tags.push('Coding');\n    if (url.includes('practice')) tags.push('Practice');\n    if (url.includes('l6')) tags.push('L6');\n    if (url.includes('l7')) tags.push('L7');\n    \n    return tags;\n  }\n\n  editBookmark(url) {\n    const bookmark = this.preferences.bookmarks.find(b => b.url === url);\n    if (!bookmark) return;\n    \n    const newNote = prompt('Edit bookmark note:', bookmark.note || '');\n    if (newNote !== null) {\n      bookmark.note = newNote;\n      this.savePreferences();\n      this.refreshTabContent('bookmarks');\n    }\n  }\n\n  removeBookmark(url) {\n    if (confirm('Remove this bookmark?')) {\n      this.preferences.bookmarks = this.preferences.bookmarks.filter(b => b.url !== url);\n      this.savePreferences();\n      this.refreshTabContent('bookmarks');\n      this.showNotification('Bookmark removed', 'success');\n    }\n  }\n\n  clearBookmarks() {\n    if (confirm('Clear all bookmarks? This cannot be undone.')) {\n      this.preferences.bookmarks = [];\n      this.savePreferences();\n      this.refreshTabContent('bookmarks');\n      this.showNotification('All bookmarks cleared', 'success');\n    }\n  }\n\n  exportBookmarks() {\n    const data = {\n      bookmarks: this.preferences.bookmarks,\n      exportDate: new Date().toISOString(),\n      version: '1.0'\n    };\n    \n    this.downloadData('systemcraft-bookmarks.json', data);\n  }\n\n  // Notes methods\n  addNoteToCurrentPage() {\n    const url = window.location.pathname;\n    const note = prompt('Add a note for this page:');\n    \n    if (note && note.trim()) {\n      if (!this.preferences.notes[url]) {\n        this.preferences.notes[url] = [];\n      }\n      \n      this.preferences.notes[url].push({\n        text: note.trim(),\n        timestamp: new Date().toISOString()\n      });\n      \n      this.savePreferences();\n      this.refreshTabContent('notes');\n      this.showNotification('Note added successfully', 'success');\n    }\n  }\n\n  editNote(url, index) {\n    const note = this.preferences.notes[url]?.[index];\n    if (!note) return;\n    \n    const newText = prompt('Edit note:', note.text);\n    if (newText !== null && newText.trim()) {\n      note.text = newText.trim();\n      note.timestamp = new Date().toISOString(); // Update timestamp\n      this.savePreferences();\n      this.refreshTabContent('notes');\n    }\n  }\n\n  deleteNote(url, index) {\n    if (confirm('Delete this note?')) {\n      this.preferences.notes[url].splice(index, 1);\n      \n      // Remove empty note arrays\n      if (this.preferences.notes[url].length === 0) {\n        delete this.preferences.notes[url];\n      }\n      \n      this.savePreferences();\n      this.refreshTabContent('notes');\n      this.showNotification('Note deleted', 'success');\n    }\n  }\n\n  clearNotes() {\n    if (confirm('Clear all notes? This cannot be undone.')) {\n      this.preferences.notes = {};\n      this.savePreferences();\n      this.refreshTabContent('notes');\n      this.showNotification('All notes cleared', 'success');\n    }\n  }\n\n  exportNotes() {\n    const data = {\n      notes: this.preferences.notes,\n      exportDate: new Date().toISOString(),\n      version: '1.0'\n    };\n    \n    this.downloadData('systemcraft-notes.json', data);\n  }\n\n  // Goals methods\n  addCustomGoal() {\n    const title = prompt('Goal title:');\n    if (!title || !title.trim()) return;\n    \n    const description = prompt('Goal description (optional):') || '';\n    const deadlineStr = prompt('Target completion date (YYYY-MM-DD):');\n    \n    let deadline;\n    try {\n      deadline = deadlineStr ? new Date(deadlineStr).toISOString() : null;\n    } catch (e) {\n      deadline = null;\n    }\n    \n    const goal = {\n      title: title.trim(),\n      description: description.trim(),\n      deadline,\n      progress: 0,\n      created: new Date().toISOString()\n    };\n    \n    this.preferences.customGoals.push(goal);\n    this.savePreferences();\n    this.refreshTabContent('goals');\n    this.showNotification('Custom goal added', 'success');\n  }\n\n  updateGoalProgress(index) {\n    const goal = this.preferences.customGoals[index];\n    if (!goal) return;\n    \n    const newProgress = prompt(`Update progress for \"${goal.title}\" (0-100%):`, goal.progress.toString());\n    const progress = parseInt(newProgress);\n    \n    if (!isNaN(progress) && progress >= 0 && progress <= 100) {\n      goal.progress = progress;\n      this.savePreferences();\n      this.refreshTabContent('goals');\n      \n      if (progress === 100) {\n        this.showNotification(`🎉 Goal completed: ${goal.title}!`, 'success');\n      } else {\n        this.showNotification('Goal progress updated', 'success');\n      }\n    }\n  }\n\n  editGoal(index) {\n    const goal = this.preferences.customGoals[index];\n    if (!goal) return;\n    \n    const newTitle = prompt('Edit goal title:', goal.title);\n    if (newTitle && newTitle.trim()) {\n      goal.title = newTitle.trim();\n      \n      const newDescription = prompt('Edit goal description:', goal.description || '');\n      goal.description = newDescription || '';\n      \n      this.savePreferences();\n      this.refreshTabContent('goals');\n    }\n  }\n\n  deleteGoal(index) {\n    const goal = this.preferences.customGoals[index];\n    if (!goal) return;\n    \n    if (confirm(`Delete goal \"${goal.title}\"?`)) {\n      this.preferences.customGoals.splice(index, 1);\n      this.savePreferences();\n      this.refreshTabContent('goals');\n      this.showNotification('Goal deleted', 'success');\n    }\n  }\n\n  // Data management methods\n  exportData() {\n    const data = {\n      ...this.preferences,\n      exportDate: new Date().toISOString(),\n      version: '1.0'\n    };\n    \n    this.downloadData('systemcraft-data.json', data);\n    this.showNotification('Data exported successfully', 'success');\n  }\n\n  importData() {\n    const input = document.createElement('input');\n    input.type = 'file';\n    input.accept = '.json';\n    \n    input.onchange = (e) => {\n      const file = e.target.files[0];\n      if (!file) return;\n      \n      const reader = new FileReader();\n      reader.onload = (e) => {\n        try {\n          const data = JSON.parse(e.target.result);\n          if (this.validateImportData(data)) {\n            if (confirm('Import data? This will overwrite your current settings.')) {\n              this.preferences = data;\n              this.savePreferences();\n              this.applyPreferences();\n              this.refreshPanelContent();\n              this.showNotification('Data imported successfully', 'success');\n            }\n          } else {\n            this.showNotification('Invalid data format', 'error');\n          }\n        } catch (error) {\n          this.showNotification('Error importing data', 'error');\n          console.error('Import error:', error);\n        }\n      };\n      \n      reader.readAsText(file);\n    };\n    \n    input.click();\n  }\n\n  validateImportData(data) {\n    return data && \n           typeof data.bookmarks === 'object' &&\n           typeof data.notes === 'object' &&\n           typeof data.preferences === 'object' &&\n           Array.isArray(data.customGoals);\n  }\n\n  resetAll() {\n    if (confirm('Reset all personalization data? This cannot be undone.')) {\n      localStorage.removeItem(this.storageKey);\n      this.preferences = this.loadPreferences();\n      this.applyPreferences();\n      this.refreshPanelContent();\n      this.showNotification('All data reset successfully', 'success');\n    }\n  }\n\n  downloadData(filename, data) {\n    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = filename;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  }\n\n  // Utility methods\n  trackPageVisit() {\n    const url = window.location.pathname;\n    const now = new Date().toISOString();\n    \n    // Track page visit\n    if (!this.preferences.analytics.sectionsVisited[url]) {\n      this.preferences.analytics.sectionsVisited[url] = {\n        visits: 0,\n        timeSpent: 0,\n        firstVisit: now,\n        lastVisit: now\n      };\n    }\n    \n    this.preferences.analytics.sectionsVisited[url].visits++;\n    this.preferences.analytics.sectionsVisited[url].lastVisit = now;\n    \n    // Track time spent\n    this.startTimeTracking(url);\n  }\n\n  startTimeTracking(url) {\n    let startTime = Date.now();\n    let lastActivity = Date.now();\n    \n    const updateActivity = () => {\n      lastActivity = Date.now();\n    };\n    \n    // Track user activity\n    ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart'].forEach(event => {\n      document.addEventListener(event, updateActivity, { passive: true });\n    });\n    \n    // Update time spent periodically\n    const timeTracker = setInterval(() => {\n      const now = Date.now();\n      if (now - lastActivity < 30000) { // Only count active time\n        const timeSpent = Math.floor((now - startTime) / 1000); // seconds\n        if (!this.preferences.analytics.timeSpent[url]) {\n          this.preferences.analytics.timeSpent[url] = 0;\n        }\n        this.preferences.analytics.timeSpent[url] += 1;\n      }\n    }, 1000);\n    \n    // Clean up on page unload\n    window.addEventListener('beforeunload', () => {\n      clearInterval(timeTracker);\n    });\n  }\n\n  getPageTitle(url) {\n    // Try to get title from navigation or fallback to URL\n    const navLink = document.querySelector(`a[href*=\"${url}\"]`);\n    if (navLink) {\n      return navLink.textContent.trim();\n    }\n    \n    // Fallback to formatting URL\n    return url.split('/').filter(Boolean).pop()?.replace(/-/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase()) || url;\n  }\n\n  formatDate(timestamp) {\n    return new Date(timestamp).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    });\n  }\n\n  showNotification(message, type = 'info') {\n    const notification = document.createElement('div');\n    notification.className = `notification notification--${type}`;\n    notification.innerHTML = `\n      <div class=\"notification-content\">\n        <span class=\"notification-icon\">${this.getNotificationIcon(type)}</span>\n        <span class=\"notification-message\">${message}</span>\n      </div>\n      <button class=\"notification-close\" onclick=\"this.parentElement.remove()\">&times;</button>\n    `;\n    \n    document.body.appendChild(notification);\n    \n    setTimeout(() => {\n      notification.classList.add('show');\n    }, 100);\n    \n    setTimeout(() => {\n      if (document.body.contains(notification)) {\n        notification.remove();\n      }\n    }, 5000);\n  }\n\n  getNotificationIcon(type) {\n    const icons = {\n      success: '✅',\n      error: '❌',\n      warning: '⚠️',\n      info: 'ℹ️'\n    };\n    return icons[type] || icons.info;\n  }\n\n  dispatchEvent(eventName, data) {\n    const event = new CustomEvent(`personalization:${eventName}`, {\n      detail: data\n    });\n    window.dispatchEvent(event);\n  }\n\n  initBookmarksPanel() {\n    // Initialize bookmark indicators on current page\n    const currentUrl = window.location.pathname;\n    if (this.preferences.bookmarks.some(b => b.url === currentUrl)) {\n      this.addBookmarkIndicator();\n    }\n  }\n\n  addBookmarkIndicator() {\n    const indicator = document.createElement('div');\n    indicator.className = 'page-bookmarked-indicator';\n    indicator.innerHTML = '📖 Bookmarked';\n    indicator.title = 'This page is bookmarked';\n    \n    // Try to add to header or create floating indicator\n    const header = document.querySelector('.md-content__inner');\n    if (header) {\n      header.insertBefore(indicator, header.firstChild);\n    }\n  }\n\n  initNotesSystem() {\n    // Show notes indicator if current page has notes\n    const currentUrl = window.location.pathname;\n    const pageNotes = this.preferences.notes[currentUrl];\n    if (pageNotes && pageNotes.length > 0) {\n      this.addNotesIndicator(pageNotes.length);\n    }\n  }\n\n  addNotesIndicator(count) {\n    const indicator = document.createElement('div');\n    indicator.className = 'page-notes-indicator';\n    indicator.innerHTML = `📝 ${count} note${count !== 1 ? 's' : ''}`;\n    indicator.title = `This page has ${count} personal note${count !== 1 ? 's' : ''}`;\n    \n    const header = document.querySelector('.md-content__inner');\n    if (header) {\n      header.insertBefore(indicator, header.firstChild);\n    }\n  }\n\n  startPeriodicSave() {\n    // Auto-save every 5 minutes\n    setInterval(() => {\n      this.savePreferences();\n    }, 5 * 60 * 1000);\n  }\n}\n\n// Initialize personalization system\ndocument.addEventListener('DOMContentLoaded', () => {\n  window.personalization = new PersonalizationSystem();\n});\n\n// Add required CSS\nconst personalizationCSS = `\n/* Personalization Panel Styles */\n.personalization-panel {\n  position: fixed;\n  top: 80px;\n  right: 20px;\n  z-index: 1000;\n}\n\n.personalization-toggle {\n  width: 48px;\n  height: 48px;\n  border-radius: 50%;\n  background: var(--md-primary-fg-color);\n  color: white;\n  border: none;\n  cursor: pointer;\n  box-shadow: var(--shadow-medium);\n  transition: var(--hover-transition);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.personalization-toggle:hover {\n  background: var(--md-primary-fg-color--dark);\n  transform: scale(1.05);\n}\n\n.personalization-menu {\n  position: absolute;\n  top: 60px;\n  right: 0;\n  width: 420px;\n  max-height: 600px;\n  background: white;\n  border-radius: var(--radius-lg);\n  box-shadow: var(--shadow-heavy);\n  border: 1px solid var(--md-default-fg-color--lighter);\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n}\n\n.personalization-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: var(--spacing-lg);\n  border-bottom: 1px solid var(--md-default-fg-color--lighter);\n  background: var(--md-default-fg-color--lightest);\n}\n\n.personalization-header h3 {\n  margin: 0;\n  color: var(--md-primary-fg-color--dark);\n}\n\n.close-personalization {\n  background: none;\n  border: none;\n  font-size: 20px;\n  cursor: pointer;\n  padding: var(--spacing-xs);\n  border-radius: var(--radius-sm);\n  color: var(--md-default-fg-color--light);\n}\n\n.close-personalization:hover {\n  background: var(--md-default-fg-color--lighter);\n}\n\n.personalization-tabs {\n  display: flex;\n  border-bottom: 1px solid var(--md-default-fg-color--lighter);\n}\n\n.tab-button {\n  flex: 1;\n  padding: var(--spacing-md) var(--spacing-sm);\n  background: none;\n  border: none;\n  cursor: pointer;\n  font-size: 0.9rem;\n  color: var(--md-default-fg-color--light);\n  transition: var(--hover-transition);\n  border-bottom: 2px solid transparent;\n}\n\n.tab-button:hover {\n  background: var(--md-default-fg-color--lightest);\n}\n\n.tab-button.active {\n  color: var(--md-primary-fg-color--dark);\n  border-bottom-color: var(--md-primary-fg-color);\n  background: var(--md-default-fg-color--lightest);\n}\n\n.personalization-content {\n  flex: 1;\n  overflow-y: auto;\n}\n\n.tab-panel {\n  display: none;\n  padding: var(--spacing-lg);\n}\n\n.tab-panel.active {\n  display: block;\n}\n\n/* Preferences Styles */\n.preferences-section {\n  margin-bottom: var(--spacing-xl);\n}\n\n.preferences-section h4 {\n  margin: 0 0 var(--spacing-md) 0;\n  color: var(--md-primary-fg-color--dark);\n  font-size: 1rem;\n  border-bottom: 1px solid var(--md-default-fg-color--lighter);\n  padding-bottom: var(--spacing-xs);\n}\n\n.preference-item {\n  margin-bottom: var(--spacing-md);\n}\n\n.preference-item label {\n  display: block;\n  margin-bottom: var(--spacing-xs);\n  font-weight: 500;\n  color: var(--md-default-fg-color--dark);\n}\n\n.preference-item select,\n.preference-item input[type=\"range\"] {\n  width: 100%;\n  padding: var(--spacing-sm);\n  border: 1px solid var(--md-default-fg-color--lighter);\n  border-radius: var(--radius-md);\n}\n\n.slider-container {\n  display: flex;\n  align-items: center;\n  gap: var(--spacing-sm);\n}\n\n.slider-container input[type=\"range\"] {\n  flex: 1;\n}\n\n.slider-value {\n  min-width: 50px;\n  text-align: center;\n  font-family: monospace;\n  background: var(--md-default-fg-color--lightest);\n  padding: var(--spacing-xs);\n  border-radius: var(--radius-sm);\n}\n\n.checkbox-label {\n  display: flex !important;\n  align-items: center;\n  gap: var(--spacing-sm);\n  cursor: pointer;\n}\n\n.preference-actions {\n  display: flex;\n  gap: var(--spacing-sm);\n  flex-wrap: wrap;\n}\n\n/* Bookmarks Styles */\n.section-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: var(--spacing-lg);\n}\n\n.section-header h4 {\n  margin: 0;\n  color: var(--md-primary-fg-color--dark);\n}\n\n.empty-state {\n  text-align: center;\n  padding: var(--spacing-xl);\n  color: var(--md-default-fg-color--light);\n}\n\n.empty-icon {\n  font-size: 3rem;\n  margin-bottom: var(--spacing-md);\n  opacity: 0.5;\n}\n\n.bookmark-item,\n.note-item,\n.goal-item {\n  display: flex;\n  align-items: flex-start;\n  gap: var(--spacing-md);\n  padding: var(--spacing-md);\n  border: 1px solid var(--md-default-fg-color--lighter);\n  border-radius: var(--radius-md);\n  margin-bottom: var(--spacing-md);\n  transition: var(--hover-transition);\n}\n\n.bookmark-item:hover,\n.note-item:hover,\n.goal-item:hover {\n  box-shadow: var(--shadow-light);\n  border-color: var(--md-primary-fg-color);\n}\n\n.bookmark-content,\n.goal-content {\n  flex: 1;\n}\n\n.bookmark-title {\n  font-weight: 600;\n  color: var(--md-primary-fg-color--dark);\n  text-decoration: none;\n  display: block;\n  margin-bottom: var(--spacing-xs);\n}\n\n.bookmark-title:hover {\n  text-decoration: underline;\n}\n\n.bookmark-meta,\n.note-meta,\n.goal-meta {\n  display: flex;\n  align-items: center;\n  gap: var(--spacing-sm);\n  font-size: 0.8rem;\n  color: var(--md-default-fg-color--light);\n  margin-top: var(--spacing-xs);\n}\n\n.bookmark-tag {\n  background: var(--md-primary-fg-color);\n  color: white;\n  padding: 0.2em 0.5em;\n  border-radius: var(--radius-xl);\n  font-size: 0.7rem;\n}\n\n.bookmark-note {\n  margin-top: var(--spacing-sm);\n  padding: var(--spacing-sm);\n  background: var(--md-default-fg-color--lightest);\n  border-radius: var(--radius-sm);\n  font-size: 0.9rem;\n  font-style: italic;\n}\n\n.bookmark-actions,\n.goal-actions {\n  display: flex;\n  flex-direction: column;\n  gap: var(--spacing-xs);\n}\n\n.bookmark-action,\n.note-action,\n.goal-action {\n  background: none;\n  border: none;\n  cursor: pointer;\n  padding: var(--spacing-xs);\n  border-radius: var(--radius-sm);\n  transition: var(--hover-transition);\n  font-size: 1rem;\n}\n\n.bookmark-action:hover,\n.note-action:hover,\n.goal-action:hover {\n  background: var(--md-default-fg-color--lightest);\n}\n\n/* Notes Styles */\n.note-page {\n  margin-bottom: var(--spacing-xl);\n}\n\n.note-page-title {\n  margin: 0 0 var(--spacing-md) 0;\n  font-size: 1rem;\n}\n\n.note-page-title a {\n  color: var(--md-primary-fg-color--dark);\n  text-decoration: none;\n}\n\n.note-page-title a:hover {\n  text-decoration: underline;\n}\n\n.note-items {\n  border-left: 2px solid var(--md-primary-fg-color);\n  padding-left: var(--spacing-md);\n}\n\n.note-content {\n  flex: 1;\n  line-height: 1.5;\n}\n\n/* Goals Styles */\n.goal-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: var(--spacing-sm);\n}\n\n.goal-title {\n  font-weight: 600;\n  color: var(--md-primary-fg-color--dark);\n}\n\n.goal-progress {\n  display: flex;\n  align-items: center;\n  gap: var(--spacing-sm);\n  min-width: 120px;\n}\n\n.goal-description {\n  color: var(--md-default-fg-color--light);\n  font-size: 0.9rem;\n  margin: var(--spacing-sm) 0;\n}\n\n.goal-deadline {\n  font-size: 0.8rem;\n}\n\n/* Page Indicators */\n.page-bookmarked-indicator,\n.page-notes-indicator {\n  display: inline-block;\n  background: var(--md-primary-fg-color);\n  color: white;\n  padding: var(--spacing-xs) var(--spacing-sm);\n  border-radius: var(--radius-xl);\n  font-size: 0.8rem;\n  margin-bottom: var(--spacing-md);\n  font-weight: 500;\n}\n\n.page-notes-indicator {\n  background: var(--info-color);\n}\n\n/* Notifications */\n.notification {\n  position: fixed;\n  top: 20px;\n  right: -400px;\n  width: 350px;\n  background: white;\n  border-radius: var(--radius-md);\n  box-shadow: var(--shadow-medium);\n  border: 1px solid var(--md-default-fg-color--lighter);\n  transition: right 0.3s ease;\n  z-index: 10000;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: var(--spacing-md);\n}\n\n.notification.show {\n  right: 20px;\n}\n\n.notification--success {\n  border-left: 4px solid var(--success-color);\n}\n\n.notification--error {\n  border-left: 4px solid var(--error-color);\n}\n\n.notification--warning {\n  border-left: 4px solid var(--warning-color);\n}\n\n.notification--info {\n  border-left: 4px solid var(--info-color);\n}\n\n.notification-content {\n  display: flex;\n  align-items: center;\n  gap: var(--spacing-sm);\n  flex: 1;\n}\n\n.notification-icon {\n  font-size: 1.2rem;\n}\n\n.notification-message {\n  font-size: 0.9rem;\n}\n\n.notification-close {\n  background: none;\n  border: none;\n  font-size: 18px;\n  cursor: pointer;\n  padding: var(--spacing-xs);\n  border-radius: var(--radius-sm);\n  color: var(--md-default-fg-color--light);\n}\n\n.notification-close:hover {\n  background: var(--md-default-fg-color--lightest);\n}\n\n/* Mobile responsiveness */\n@media (max-width: 768px) {\n  .personalization-panel {\n    top: 10px;\n    right: 10px;\n  }\n  \n  .personalization-menu {\n    width: calc(100vw - 20px);\n    max-width: 400px;\n  }\n  \n  .tab-button {\n    font-size: 0.8rem;\n    padding: var(--spacing-sm);\n  }\n  \n  .preference-actions {\n    justify-content: center;\n  }\n  \n  .section-header {\n    flex-direction: column;\n    align-items: stretch;\n    gap: var(--spacing-md);\n  }\n  \n  .bookmark-item,\n  .note-item,\n  .goal-item {\n    flex-direction: column;\n  }\n  \n  .bookmark-actions,\n  .goal-actions {\n    flex-direction: row;\n    justify-content: center;\n  }\n  \n  .notification {\n    width: calc(100vw - 20px);\n    right: -100vw;\n  }\n  \n  .notification.show {\n    right: 10px;\n  }\n}\n`;\n\nconst styleSheet = document.createElement('style');\nstyleSheet.textContent = personalizationCSS;\ndocument.head.appendChild(styleSheet);"