/**\n * Learning Progress and Skill Tree Management\n * Handles progress tracking, skill trees, and learning path visualizations\n */\n\nclass LearningProgress {\n  constructor() {\n    this.storageKey = 'systemcraft-progress';\n    this.progress = this.loadProgress();\n    this.init();\n  }\n\n  init() {\n    this.renderProgressDashboard();\n    this.initSkillTrees();\n    this.initProgressTracking();\n    this.startPeriodicSave();\n  }\n\n  loadProgress() {\n    const saved = localStorage.getItem(this.storageKey);\n    if (saved) {\n      try {\n        return JSON.parse(saved);\n      } catch (e) {\n        console.warn('Could not parse saved progress:', e);\n      }\n    }\n    \n    return {\n      skills: {},\n      milestones: {},\n      assessmentScores: {},\n      studyTime: 0,\n      streak: 0,\n      lastActivity: null,\n      achievements: [],\n      bookmarks: [],\n      notes: {},\n      customGoals: [],\n      completedContent: [],\n      startDate: new Date().toISOString()\n    };\n  }\n\n  saveProgress() {\n    try {\n      localStorage.setItem(this.storageKey, JSON.stringify(this.progress));\n      this.dispatchProgressEvent('saved', this.progress);\n    } catch (e) {\n      console.error('Could not save progress:', e);\n    }\n  }\n\n  renderProgressDashboard() {\n    const dashboards = document.querySelectorAll('.progress-dashboard-container');\n    dashboards.forEach(dashboard => {\n      dashboard.innerHTML = this.generateDashboardHTML();\n    });\n  }\n\n  generateDashboardHTML() {\n    const stats = this.calculateStats();\n    return `\n      <div class=\"progress-dashboard\">\n        <div class=\"progress-card\">\n          <div class=\"progress-card-header\">\n            <h4 class=\"progress-card-title\">Study Streak</h4>\n          </div>\n          <h2 class=\"progress-card-value\">${this.progress.streak}</h2>\n          <div class=\"progress-card-change positive\">\n            <span>üìÖ ${this.formatStreakStatus()}</span>\n          </div>\n        </div>\n        \n        <div class=\"progress-card\">\n          <div class=\"progress-card-header\">\n            <h4 class=\"progress-card-title\">Skills Mastered</h4>\n          </div>\n          <h2 class=\"progress-card-value\">${stats.masteredSkills}</h2>\n          <div class=\"progress-card-change positive\">\n            <span>+${stats.recentSkills} this week</span>\n          </div>\n        </div>\n        \n        <div class=\"progress-card\">\n          <div class=\"progress-card-header\">\n            <h4 class=\"progress-card-title\">Total Study Time</h4>\n          </div>\n          <h2 class=\"progress-card-value\">${this.formatStudyTime(this.progress.studyTime)}</h2>\n          <div class=\"progress-card-change ${stats.weeklyTimeChange >= 0 ? 'positive' : 'negative'}\">\n            <span>${stats.weeklyTimeChange >= 0 ? '+' : ''}${stats.weeklyTimeChange}h this week</span>\n          </div>\n        </div>\n        \n        <div class=\"progress-card\">\n          <div class=\"progress-card-header\">\n            <h4 class=\"progress-card-title\">Interview Readiness</h4>\n          </div>\n          <div class=\"progress-ring\">\n            <svg viewBox=\"0 0 36 36\">\n              <path class=\"progress-ring-background\"\n                    d=\"M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831\"\n                    fill=\"none\" stroke-width=\"3\" stroke-dasharray=\"100, 100\"/>\n              <path class=\"progress-ring-progress\"\n                    d=\"M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831\"\n                    fill=\"none\" stroke-width=\"3\" \n                    stroke-dasharray=\"${stats.readinessScore}, 100\"/>\n            </svg>\n            <div class=\"progress-ring-text\">${Math.round(stats.readinessScore)}%</div>\n          </div>\n        </div>\n      </div>\n      \n      <div class=\"achievement-showcase mt-lg\">\n        <h4>Recent Achievements</h4>\n        <div class=\"achievement-grid\">\n          ${this.renderRecentAchievements()}\n        </div>\n      </div>\n    `;\n  }\n\n  calculateStats() {\n    const now = new Date();\n    const weekAgo = new Date(now.getTime() - (7 * 24 * 60 * 60 * 1000));\n    \n    const masteredSkills = Object.values(this.progress.skills)\n      .filter(skill => skill.level >= 4).length;\n    \n    const recentSkills = Object.values(this.progress.skills)\n      .filter(skill => skill.level >= 4 && new Date(skill.lastUpdate) > weekAgo).length;\n    \n    const weeklyTimeChange = this.calculateWeeklyTimeChange();\n    const readinessScore = this.calculateReadinessScore();\n    \n    return {\n      masteredSkills,\n      recentSkills,\n      weeklyTimeChange,\n      readinessScore\n    };\n  }\n\n  formatStreakStatus() {\n    if (this.progress.streak === 0) return 'Start your streak!';\n    if (this.progress.streak === 1) return '1 day';\n    return `${this.progress.streak} days`;\n  }\n\n  formatStudyTime(minutes) {\n    if (minutes < 60) return `${minutes}m`;\n    const hours = Math.floor(minutes / 60);\n    const remainingMinutes = minutes % 60;\n    return remainingMinutes > 0 ? `${hours}h ${remainingMinutes}m` : `${hours}h`;\n  }\n\n  calculateWeeklyTimeChange() {\n    // Simplified calculation - in a real implementation, you'd track daily/weekly data\n    return Math.floor(Math.random() * 10) - 2;\n  }\n\n  calculateReadinessScore() {\n    const skillCategories = {\n      'behavioral': ['leadership-stories', 'star-framework', 'amazon-lps'],\n      'system-design': ['scalability', 'distributed-systems', 'aws-services'],\n      'coding': ['algorithms', 'data-structures', 'problem-solving'],\n      'cultural': ['company-knowledge', 'interview-process', 'negotiation']\n    };\n    \n    let totalScore = 0;\n    let totalSkills = 0;\n    \n    Object.values(skillCategories).forEach(skills => {\n      skills.forEach(skill => {\n        const skillData = this.progress.skills[skill] || { level: 0 };\n        totalScore += skillData.level;\n        totalSkills++;\n      });\n    });\n    \n    return totalSkills > 0 ? (totalScore / (totalSkills * 5)) * 100 : 0;\n  }\n\n  renderRecentAchievements() {\n    const recentAchievements = this.progress.achievements\n      .sort((a, b) => new Date(b.earnedAt) - new Date(a.earnedAt))\n      .slice(0, 6);\n    \n    if (recentAchievements.length === 0) {\n      return `\n        <div class=\"achievement-badge locked\">\n          <div class=\"achievement-icon\">üéØ</div>\n          <div class=\"achievement-title\">First Goal</div>\n          <div class=\"achievement-description\">Complete your first milestone</div>\n        </div>\n      `;\n    }\n    \n    return recentAchievements.map(achievement => `\n      <div class=\"achievement-badge earned\">\n        <div class=\"achievement-icon\">${achievement.icon}</div>\n        <div class=\"achievement-title\">${achievement.title}</div>\n        <div class=\"achievement-description\">${achievement.description}</div>\n      </div>\n    `).join('');\n  }\n\n  initSkillTrees() {\n    const skillTrees = document.querySelectorAll('.skill-tree-container');\n    skillTrees.forEach(container => {\n      const category = container.dataset.category;\n      if (category) {\n        this.renderSkillTree(container, category);\n      }\n    });\n  }\n\n  renderSkillTree(container, category) {\n    const skills = this.getSkillsForCategory(category);\n    const html = `\n      <div class=\"skill-tree\">\n        ${skills.map((level, levelIndex) => `\n          <div class=\"skill-level\">\n            <div class=\"skill-level-label\">Level ${levelIndex + 1}</div>\n            <div class=\"skill-nodes\">\n              ${level.map(skill => this.renderSkillNode(skill)).join('')}\n            </div>\n          </div>\n          ${levelIndex < skills.length - 1 ? '<div class=\"flowchart-connector\"></div>' : ''}\n        `).join('')}\n      </div>\n    `;\n    container.innerHTML = html;\n    this.bindSkillTreeEvents(container);\n  }\n\n  renderSkillNode(skill) {\n    const skillData = this.progress.skills[skill.id] || { level: 0, unlocked: skill.prerequisites.length === 0 };\n    const isUnlocked = this.isSkillUnlocked(skill);\n    const isCompleted = skillData.level >= 4;\n    const isInProgress = skillData.level > 0 && skillData.level < 4;\n    \n    let className = 'skill-node';\n    if (isCompleted) className += ' completed';\n    else if (isInProgress) className += ' in-progress';\n    else if (!isUnlocked) className += ' locked';\n    \n    return `\n      <div class=\"${className}\" \n           data-skill=\"${skill.id}\"\n           tabindex=\"${isUnlocked ? '0' : '-1'}\"\n           role=\"button\"\n           aria-describedby=\"skill-tooltip-${skill.id}\">\n        <div class=\"skill-node-icon\">${skill.icon}</div>\n        <div class=\"skill-node-title\">${skill.title}</div>\n        <div class=\"skill-node-progress\">\n          <div class=\"skill-node-progress-fill\" style=\"width: ${(skillData.level / 5) * 100}%\"></div>\n        </div>\n        <div id=\"skill-tooltip-${skill.id}\" class=\"sr-only\">\n          ${skill.description}. Current level: ${skillData.level} out of 5.\n          ${skill.prerequisites.length > 0 ? `Prerequisites: ${skill.prerequisites.join(', ')}` : ''}\n        </div>\n      </div>\n    `;\n  }\n\n  getSkillsForCategory(category) {\n    const skillDefinitions = {\n      'behavioral': [\n        [\n          {\n            id: 'star-framework',\n            title: 'STAR Framework',\n            icon: '‚≠ê',\n            description: 'Master the STAR storytelling framework',\n            prerequisites: []\n          },\n          {\n            id: 'leadership-stories',\n            title: 'Leadership Stories',\n            icon: 'üë•',\n            description: 'Develop compelling leadership narratives',\n            prerequisites: ['star-framework']\n          }\n        ],\n        [\n          {\n            id: 'amazon-lps',\n            title: 'Amazon LPs',\n            icon: 'üéØ',\n            description: 'Deep understanding of Leadership Principles',\n            prerequisites: ['star-framework']\n          },\n          {\n            id: 'bar-raiser',\n            title: 'Bar Raiser Prep',\n            icon: 'üéñÔ∏è',\n            description: 'Prepare for the bar raiser round',\n            prerequisites: ['leadership-stories', 'amazon-lps']\n          }\n        ]\n      ],\n      'system-design': [\n        [\n          {\n            id: 'design-fundamentals',\n            title: 'Design Fundamentals',\n            icon: 'üèóÔ∏è',\n            description: 'Basic system design principles',\n            prerequisites: []\n          },\n          {\n            id: 'scalability',\n            title: 'Scalability',\n            icon: 'üìà',\n            description: 'Designing for scale',\n            prerequisites: ['design-fundamentals']\n          }\n        ],\n        [\n          {\n            id: 'distributed-systems',\n            title: 'Distributed Systems',\n            icon: 'üåê',\n            description: 'Understanding distributed architectures',\n            prerequisites: ['scalability']\n          },\n          {\n            id: 'aws-services',\n            title: 'AWS Services',\n            icon: '‚òÅÔ∏è',\n            description: 'Amazon Web Services expertise',\n            prerequisites: ['distributed-systems']\n          }\n        ]\n      ],\n      'coding': [\n        [\n          {\n            id: 'data-structures',\n            title: 'Data Structures',\n            icon: 'üìä',\n            description: 'Master common data structures',\n            prerequisites: []\n          },\n          {\n            id: 'algorithms',\n            title: 'Algorithms',\n            icon: '‚ö°',\n            description: 'Core algorithmic concepts',\n            prerequisites: ['data-structures']\n          }\n        ],\n        [\n          {\n            id: 'problem-patterns',\n            title: 'Problem Patterns',\n            icon: 'üß©',\n            description: 'Recognize and apply common patterns',\n            prerequisites: ['algorithms']\n          },\n          {\n            id: 'optimization',\n            title: 'Optimization',\n            icon: 'üöÄ',\n            description: 'Code optimization techniques',\n            prerequisites: ['problem-patterns']\n          }\n        ]\n      ]\n    };\n    \n    return skillDefinitions[category] || [];\n  }\n\n  isSkillUnlocked(skill) {\n    if (skill.prerequisites.length === 0) return true;\n    \n    return skill.prerequisites.every(prereq => {\n      const skillData = this.progress.skills[prereq];\n      return skillData && skillData.level >= 3;\n    });\n  }\n\n  bindSkillTreeEvents(container) {\n    container.addEventListener('click', (e) => {\n      const skillNode = e.target.closest('.skill-node');\n      if (skillNode && !skillNode.classList.contains('locked')) {\n        this.openSkillDetails(skillNode.dataset.skill);\n      }\n    });\n    \n    container.addEventListener('keydown', (e) => {\n      const skillNode = e.target.closest('.skill-node');\n      if (skillNode && (e.key === 'Enter' || e.key === ' ')) {\n        e.preventDefault();\n        if (!skillNode.classList.contains('locked')) {\n          this.openSkillDetails(skillNode.dataset.skill);\n        }\n      }\n    });\n  }\n\n  openSkillDetails(skillId) {\n    const modal = this.createSkillModal(skillId);\n    document.body.appendChild(modal);\n    modal.focus();\n  }\n\n  createSkillModal(skillId) {\n    const skillData = this.progress.skills[skillId] || { level: 0, experience: 0, notes: '' };\n    const skill = this.findSkillById(skillId);\n    \n    const modal = document.createElement('div');\n    modal.className = 'skill-modal';\n    modal.setAttribute('role', 'dialog');\n    modal.setAttribute('aria-labelledby', `skill-modal-title-${skillId}`);\n    modal.setAttribute('tabindex', '-1');\n    \n    modal.innerHTML = `\n      <div class=\"skill-modal-content\">\n        <div class=\"skill-modal-header\">\n          <h3 id=\"skill-modal-title-${skillId}\">${skill.icon} ${skill.title}</h3>\n          <button class=\"skill-modal-close\" aria-label=\"Close\">&times;</button>\n        </div>\n        \n        <div class=\"skill-modal-body\">\n          <p>${skill.description}</p>\n          \n          <div class=\"skill-progress-section mt-md\">\n            <h4>Current Progress</h4>\n            <div class=\"skill-level-indicator\">\n              <div class=\"skill-levels\">\n                ${Array.from({length: 5}, (_, i) => `\n                  <div class=\"skill-level-dot ${i < skillData.level ? 'active' : ''}\" \n                       data-level=\"${i + 1}\" \n                       title=\"Level ${i + 1}\">\n                    ${i + 1}\n                  </div>\n                `).join('')}\n              </div>\n              <div class=\"skill-level-labels\">\n                <span>Beginner</span>\n                <span>Advanced</span>\n              </div>\n            </div>\n          </div>\n          \n          <div class=\"skill-actions mt-lg\">\n            <button class=\"md-button md-button--primary\" \n                    onclick=\"learningProgress.practiceSkill('${skillId}')\">\n              Practice This Skill\n            </button>\n            <button class=\"md-button\" \n                    onclick=\"learningProgress.viewResources('${skillId}')\">\n              View Resources\n            </button>\n          </div>\n          \n          <div class=\"skill-notes mt-lg\">\n            <h4>Personal Notes</h4>\n            <textarea class=\"skill-notes-input\" \n                      placeholder=\"Add your notes about this skill...\" \n                      onchange=\"learningProgress.updateSkillNotes('${skillId}', this.value)\">\n${skillData.notes || ''}</textarea>\n          </div>\n        </div>\n      </div>\n      <div class=\"skill-modal-backdrop\"></div>\n    `;\n    \n    // Bind close events\n    modal.querySelector('.skill-modal-close').onclick = () => this.closeSkillModal(modal);\n    modal.querySelector('.skill-modal-backdrop').onclick = () => this.closeSkillModal(modal);\n    \n    // Bind level selection\n    modal.querySelectorAll('.skill-level-dot').forEach(dot => {\n      dot.addEventListener('click', () => {\n        const level = parseInt(dot.dataset.level);\n        this.updateSkillLevel(skillId, level);\n        this.updateSkillModalDisplay(modal, skillId);\n      });\n    });\n    \n    return modal;\n  }\n\n  findSkillById(skillId) {\n    const allSkills = {\n      'star-framework': { title: 'STAR Framework', icon: '‚≠ê', description: 'Master the STAR storytelling framework for behavioral interviews' },\n      'leadership-stories': { title: 'Leadership Stories', icon: 'üë•', description: 'Develop compelling leadership narratives that demonstrate impact' },\n      'amazon-lps': { title: 'Amazon Leadership Principles', icon: 'üéØ', description: 'Deep understanding of Amazon\\'s 16 Leadership Principles' },\n      'design-fundamentals': { title: 'Design Fundamentals', icon: 'üèóÔ∏è', description: 'Master basic system design principles and patterns' },\n      'scalability': { title: 'Scalability', icon: 'üìà', description: 'Learn to design systems that scale to millions of users' },\n      'data-structures': { title: 'Data Structures', icon: 'üìä', description: 'Master arrays, trees, graphs, and other fundamental structures' },\n      'algorithms': { title: 'Algorithms', icon: '‚ö°', description: 'Core algorithmic concepts and problem-solving techniques' }\n    };\n    \n    return allSkills[skillId] || { title: skillId, icon: 'üìö', description: 'Skill description not available' };\n  }\n\n  updateSkillLevel(skillId, level) {\n    if (!this.progress.skills[skillId]) {\n      this.progress.skills[skillId] = { level: 0, experience: 0, notes: '', lastUpdate: new Date().toISOString() };\n    }\n    \n    const oldLevel = this.progress.skills[skillId].level;\n    this.progress.skills[skillId].level = level;\n    this.progress.skills[skillId].lastUpdate = new Date().toISOString();\n    \n    // Check for achievements\n    if (level > oldLevel) {\n      this.checkSkillAchievements(skillId, level);\n    }\n    \n    this.saveProgress();\n    this.updateSkillTreeDisplay();\n  }\n\n  updateSkillNotes(skillId, notes) {\n    if (!this.progress.skills[skillId]) {\n      this.progress.skills[skillId] = { level: 0, experience: 0, notes: '', lastUpdate: new Date().toISOString() };\n    }\n    \n    this.progress.skills[skillId].notes = notes;\n    this.progress.skills[skillId].lastUpdate = new Date().toISOString();\n    this.saveProgress();\n  }\n\n  checkSkillAchievements(skillId, level) {\n    const achievements = [];\n    \n    if (level === 1 && !this.hasAchievement('first-skill')) {\n      achievements.push({\n        id: 'first-skill',\n        title: 'First Steps',\n        description: 'Started learning your first skill',\n        icon: 'üå±',\n        earnedAt: new Date().toISOString()\n      });\n    }\n    \n    if (level === 5 && !this.hasAchievement('skill-master')) {\n      achievements.push({\n        id: 'skill-master',\n        title: 'Skill Master',\n        description: 'Mastered your first skill',\n        icon: 'üèÜ',\n        earnedAt: new Date().toISOString()\n      });\n    }\n    \n    achievements.forEach(achievement => {\n      this.progress.achievements.push(achievement);\n      this.showAchievementNotification(achievement);\n    });\n  }\n\n  hasAchievement(achievementId) {\n    return this.progress.achievements.some(a => a.id === achievementId);\n  }\n\n  showAchievementNotification(achievement) {\n    const notification = document.createElement('div');\n    notification.className = 'achievement-notification';\n    notification.innerHTML = `\n      <div class=\"achievement-notification-content\">\n        <div class=\"achievement-notification-icon\">${achievement.icon}</div>\n        <div class=\"achievement-notification-text\">\n          <strong>${achievement.title}</strong>\n          <p>${achievement.description}</p>\n        </div>\n      </div>\n    `;\n    \n    document.body.appendChild(notification);\n    \n    setTimeout(() => {\n      notification.classList.add('show');\n    }, 100);\n    \n    setTimeout(() => {\n      notification.classList.remove('show');\n      setTimeout(() => {\n        document.body.removeChild(notification);\n      }, 300);\n    }, 4000);\n  }\n\n  closeSkillModal(modal) {\n    document.body.removeChild(modal);\n  }\n\n  updateSkillTreeDisplay() {\n    // Refresh all skill trees\n    this.initSkillTrees();\n  }\n\n  updateSkillModalDisplay(modal, skillId) {\n    const skillData = this.progress.skills[skillId] || { level: 0 };\n    modal.querySelectorAll('.skill-level-dot').forEach((dot, index) => {\n      if (index < skillData.level) {\n        dot.classList.add('active');\n      } else {\n        dot.classList.remove('active');\n      }\n    });\n  }\n\n  practiceSkill(skillId) {\n    // Implementation would redirect to practice content\n    const skill = this.findSkillById(skillId);\n    this.announceToScreenReader(`Starting practice session for ${skill.title}`);\n    // Redirect to appropriate practice content\n  }\n\n  viewResources(skillId) {\n    // Implementation would show resources for the skill\n    const skill = this.findSkillById(skillId);\n    this.announceToScreenReader(`Opening resources for ${skill.title}`);\n    // Show or redirect to resources\n  }\n\n  initProgressTracking() {\n    // Track page visits and time\n    this.trackPageView();\n    this.startTimeTracking();\n    this.updateStreak();\n  }\n\n  trackPageView() {\n    const currentPage = window.location.pathname;\n    if (!this.progress.completedContent.includes(currentPage)) {\n      this.progress.completedContent.push(currentPage);\n      this.saveProgress();\n    }\n  }\n\n  startTimeTracking() {\n    this.sessionStartTime = Date.now();\n    \n    // Track time spent on page\n    let lastActivity = Date.now();\n    const updateActivity = () => {\n      lastActivity = Date.now();\n    };\n    \n    ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart'].forEach(event => {\n      document.addEventListener(event, updateActivity, true);\n    });\n    \n    // Save time periodically\n    setInterval(() => {\n      const now = Date.now();\n      if (now - lastActivity < 30000) { // Only count active time\n        const sessionTime = Math.floor((now - this.sessionStartTime) / (1000 * 60)); // minutes\n        this.progress.studyTime += Math.max(0, sessionTime - (this.progress.studyTime || 0));\n        this.progress.lastActivity = new Date().toISOString();\n      }\n    }, 60000); // Update every minute\n  }\n\n  updateStreak() {\n    const today = new Date().toDateString();\n    const lastActivity = this.progress.lastActivity ? new Date(this.progress.lastActivity).toDateString() : null;\n    const yesterday = new Date(Date.now() - 86400000).toDateString();\n    \n    if (lastActivity === today) {\n      // Already counted today\n      return;\n    } else if (lastActivity === yesterday) {\n      // Continue streak\n      this.progress.streak++;\n    } else if (lastActivity && lastActivity !== yesterday) {\n      // Streak broken\n      this.progress.streak = 1;\n    } else {\n      // First day\n      this.progress.streak = 1;\n    }\n    \n    this.progress.lastActivity = new Date().toISOString();\n    this.saveProgress();\n  }\n\n  startPeriodicSave() {\n    // Auto-save every 5 minutes\n    setInterval(() => {\n      this.saveProgress();\n    }, 5 * 60 * 1000);\n    \n    // Save on page unload\n    window.addEventListener('beforeunload', () => {\n      this.saveProgress();\n    });\n  }\n\n  dispatchProgressEvent(type, data) {\n    const event = new CustomEvent('progressUpdate', {\n      detail: { type, data }\n    });\n    window.dispatchEvent(event);\n  }\n\n  announceToScreenReader(message) {\n    const announcement = document.createElement('div');\n    announcement.setAttribute('aria-live', 'polite');\n    announcement.setAttribute('aria-atomic', 'true');\n    announcement.className = 'sr-only';\n    announcement.textContent = message;\n    document.body.appendChild(announcement);\n    \n    setTimeout(() => {\n      document.body.removeChild(announcement);\n    }, 1000);\n  }\n\n  exportProgress() {\n    const data = {\n      ...this.progress,\n      exportedAt: new Date().toISOString(),\n      version: '1.0'\n    };\n    \n    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `systemcraft-progress-${new Date().toISOString().split('T')[0]}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  }\n\n  importProgress(file) {\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      try {\n        const importedData = JSON.parse(e.target.result);\n        if (this.validateProgressData(importedData)) {\n          this.progress = importedData;\n          this.saveProgress();\n          this.init(); // Refresh all displays\n          this.announceToScreenReader('Progress data imported successfully');\n        } else {\n          throw new Error('Invalid progress data format');\n        }\n      } catch (error) {\n        console.error('Failed to import progress:', error);\n        this.announceToScreenReader('Failed to import progress data');\n      }\n    };\n    reader.readAsText(file);\n  }\n\n  validateProgressData(data) {\n    return data && \n           typeof data.skills === 'object' &&\n           typeof data.milestones === 'object' &&\n           Array.isArray(data.achievements) &&\n           Array.isArray(data.completedContent);\n  }\n\n  resetProgress() {\n    if (confirm('Are you sure you want to reset all progress? This cannot be undone.')) {\n      localStorage.removeItem(this.storageKey);\n      this.progress = this.loadProgress();\n      this.init();\n      this.announceToScreenReader('Progress reset successfully');\n    }\n  }\n}\n\n// Initialize when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n  window.learningProgress = new LearningProgress();\n});\n\n// Add CSS for achievement notifications\nconst achievementCSS = `\n.achievement-notification {\n  position: fixed;\n  top: 20px;\n  right: -400px;\n  width: 350px;\n  background: linear-gradient(135deg, #4CAF50, #66BB6A);\n  color: white;\n  border-radius: 12px;\n  padding: 16px;\n  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.2);\n  transition: right 0.3s ease;\n  z-index: 10000;\n}\n\n.achievement-notification.show {\n  right: 20px;\n}\n\n.achievement-notification-content {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n}\n\n.achievement-notification-icon {\n  font-size: 32px;\n  flex-shrink: 0;\n}\n\n.achievement-notification-text h4 {\n  margin: 0 0 4px 0;\n  font-size: 16px;\n  font-weight: 600;\n}\n\n.achievement-notification-text p {\n  margin: 0;\n  font-size: 14px;\n  opacity: 0.9;\n}\n\n.skill-modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 9999;\n}\n\n.skill-modal-backdrop {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.5);\n}\n\n.skill-modal-content {\n  background: white;\n  border-radius: 16px;\n  max-width: 600px;\n  width: 90%;\n  max-height: 80vh;\n  overflow-y: auto;\n  position: relative;\n  z-index: 1;\n}\n\n.skill-modal-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 24px 24px 0;\n  border-bottom: 1px solid #e0e0e0;\n  margin-bottom: 24px;\n}\n\n.skill-modal-close {\n  background: none;\n  border: none;\n  font-size: 24px;\n  cursor: pointer;\n  padding: 4px;\n  border-radius: 4px;\n  transition: background 0.2s;\n}\n\n.skill-modal-close:hover {\n  background: #f0f0f0;\n}\n\n.skill-modal-body {\n  padding: 0 24px 24px;\n}\n\n.skill-levels {\n  display: flex;\n  gap: 12px;\n  justify-content: center;\n  margin: 16px 0;\n}\n\n.skill-level-dot {\n  width: 48px;\n  height: 48px;\n  border: 2px solid #e0e0e0;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  transition: all 0.2s;\n  font-weight: 600;\n}\n\n.skill-level-dot.active {\n  background: #FF9900;\n  border-color: #FF9900;\n  color: white;\n}\n\n.skill-level-dot:hover {\n  border-color: #FF9900;\n  transform: scale(1.05);\n}\n\n.skill-level-labels {\n  display: flex;\n  justify-content: space-between;\n  font-size: 14px;\n  color: #666;\n  margin-top: 8px;\n}\n\n.skill-notes-input {\n  width: 100%;\n  min-height: 100px;\n  padding: 12px;\n  border: 1px solid #ddd;\n  border-radius: 8px;\n  font-family: inherit;\n  resize: vertical;\n}\n\n@media (max-width: 768px) {\n  .skill-modal-content {\n    width: 95%;\n    max-height: 90vh;\n  }\n  \n  .skill-modal-header,\n  .skill-modal-body {\n    padding-left: 16px;\n    padding-right: 16px;\n  }\n  \n  .skill-levels {\n    flex-wrap: wrap;\n    gap: 8px;\n  }\n  \n  .skill-level-dot {\n    width: 40px;\n    height: 40px;\n  }\n}\n`;\n\nconst styleSheet = document.createElement('style');\nstyleSheet.textContent = achievementCSS;\ndocument.head.appendChild(styleSheet);"