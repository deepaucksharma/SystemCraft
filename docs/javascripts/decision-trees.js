/**\n * Decision Trees and Interactive Assessment Tools\n * Provides interactive decision-making workflows for study path selection\n */\n\nclass DecisionTree {\n  constructor(containerId, config) {\n    this.container = document.getElementById(containerId);\n    this.config = config;\n    this.currentNode = config.root;\n    this.responses = {};\n    this.init();\n  }\n\n  init() {\n    if (!this.container) return;\n    this.render();\n    this.bindEvents();\n  }\n\n  render() {\n    const node = this.config.nodes[this.currentNode];\n    const html = `\n      <div class=\"decision-tree-content\">\n        <div class=\"decision-node active\" data-node=\"${this.currentNode}\">\n          <h3>${node.title}</h3>\n          <p>${node.description}</p>\n          ${this.renderOptions(node)}\n        </div>\n        ${this.renderProgress()}\n      </div>\n    `;\n    this.container.innerHTML = html;\n  }\n\n  renderOptions(node) {\n    if (node.type === 'question') {\n      return `\n        <div class=\"decision-options\">\n          ${node.options.map(option => `\n            <div class=\"decision-option\" data-value=\"${option.value}\">\n              <strong>${option.label}</strong>\n              ${option.description ? `<p>${option.description}</p>` : ''}\n            </div>\n          `).join('')}\n        </div>\n      `;\n    } else if (node.type === 'result') {\n      return `\n        <div class=\"decision-result ${node.resultType || 'positive'}\" data-icon=\"${node.icon || 'âœ“'}\">\n          <h4>${node.resultTitle}</h4>\n          <div>${node.resultContent}</div>\n          ${this.renderActionButtons(node)}\n        </div>\n      `;\n    }\n    return '';\n  }\n\n  renderActionButtons(node) {\n    if (!node.actions) return '';\n    return `\n      <div class=\"decision-actions mt-md\">\n        ${node.actions.map(action => `\n          <a href=\"${action.url}\" class=\"md-button ${action.primary ? 'md-button--primary' : ''}\">\n            ${action.label}\n          </a>\n        `).join('')}\n      </div>\n    `;\n  }\n\n  renderProgress() {\n    const totalNodes = Object.keys(this.config.nodes).length;\n    const visitedNodes = Object.keys(this.responses).length + 1;\n    const progress = Math.round((visitedNodes / totalNodes) * 100);\n    \n    return `\n      <div class=\"decision-progress mt-lg\">\n        <div class=\"progress-indicator\">\n          <span>Progress: ${progress}%</span>\n        </div>\n        <div class=\"progress-bar\">\n          <div class=\"progress-fill\" style=\"width: ${progress}%\"></div>\n        </div>\n      </div>\n    `;\n  }\n\n  bindEvents() {\n    this.container.addEventListener('click', (e) => {\n      if (e.target.classList.contains('decision-option')) {\n        this.handleOptionClick(e.target);\n      }\n    });\n  }\n\n  handleOptionClick(optionElement) {\n    const value = optionElement.dataset.value;\n    const node = this.config.nodes[this.currentNode];\n    \n    // Store response\n    this.responses[this.currentNode] = value;\n    \n    // Find next node\n    const option = node.options.find(opt => opt.value === value);\n    if (option && option.next) {\n      this.currentNode = option.next;\n      this.render();\n      this.announceToScreenReader(`Selected ${option.label}. Moving to next question.`);\n    }\n  }\n\n  announceToScreenReader(message) {\n    const announcement = document.createElement('div');\n    announcement.setAttribute('aria-live', 'polite');\n    announcement.setAttribute('aria-atomic', 'true');\n    announcement.className = 'sr-only';\n    announcement.textContent = message;\n    document.body.appendChild(announcement);\n    \n    setTimeout(() => {\n      document.body.removeChild(announcement);\n    }, 1000);\n  }\n\n  getResults() {\n    return {\n      responses: this.responses,\n      currentNode: this.currentNode,\n      path: this.getDecisionPath()\n    };\n  }\n\n  getDecisionPath() {\n    const path = [];\n    let current = this.config.root;\n    \n    while (this.responses[current]) {\n      const node = this.config.nodes[current];\n      const response = this.responses[current];\n      const option = node.options.find(opt => opt.value === response);\n      \n      path.push({\n        node: current,\n        question: node.title,\n        response: option.label,\n        value: response\n      });\n      \n      current = option.next;\n      if (!current) break;\n    }\n    \n    return path;\n  }\n\n  reset() {\n    this.currentNode = this.config.root;\n    this.responses = {};\n    this.render();\n  }\n}\n\nclass AssessmentTool {\n  constructor(containerId, questions) {\n    this.container = document.getElementById(containerId);\n    this.questions = questions;\n    this.responses = {};\n    this.currentQuestion = 0;\n    this.init();\n  }\n\n  init() {\n    if (!this.container) return;\n    this.render();\n    this.bindEvents();\n  }\n\n  render() {\n    const question = this.questions[this.currentQuestion];\n    const progress = Math.round(((this.currentQuestion + 1) / this.questions.length) * 100);\n    \n    const html = `\n      <div class=\"assessment-container\">\n        <div class=\"assessment-progress\">\n          <div class=\"progress-indicator\">\n            <span>Question ${this.currentQuestion + 1} of ${this.questions.length}</span>\n            <span>${progress}% Complete</span>\n          </div>\n          <div class=\"progress-bar\">\n            <div class=\"progress-fill\" style=\"width: ${progress}%\"></div>\n          </div>\n        </div>\n        \n        <div class=\"assessment-question\">\n          <h4>${question.question}</h4>\n          ${question.description ? `<p>${question.description}</p>` : ''}\n          \n          ${this.renderQuestionInput(question)}\n        </div>\n        \n        <div class=\"assessment-navigation mt-lg\">\n          <button class=\"md-button\" ${this.currentQuestion === 0 ? 'disabled' : ''} \n                  onclick=\"assessmentTool.previousQuestion()\">\n            Previous\n          </button>\n          <button class=\"md-button md-button--primary\" \n                  onclick=\"assessmentTool.nextQuestion()\">\n            ${this.currentQuestion === this.questions.length - 1 ? 'Finish' : 'Next'}\n          </button>\n        </div>\n      </div>\n    `;\n    \n    this.container.innerHTML = html;\n  }\n\n  renderQuestionInput(question) {\n    switch (question.type) {\n      case 'scale':\n        return this.renderScaleInput(question);\n      case 'multiple-choice':\n        return this.renderMultipleChoiceInput(question);\n      case 'text':\n        return this.renderTextInput(question);\n      case 'boolean':\n        return this.renderBooleanInput(question);\n      default:\n        return this.renderScaleInput(question);\n    }\n  }\n\n  renderScaleInput(question) {\n    const min = question.min || 1;\n    const max = question.max || 5;\n    const current = this.responses[this.currentQuestion] || '';\n    \n    let html = '<div class=\"assessment-scale\">';\n    for (let i = min; i <= max; i++) {\n      html += `\n        <div class=\"scale-option ${current == i ? 'selected' : ''}\" \n             data-value=\"${i}\" \n             role=\"radio\" \n             tabindex=\"${current == i ? '0' : '-1'}\"\n             aria-checked=\"${current == i}\">\n          ${i}\n        </div>\n      `;\n    }\n    html += '</div>';\n    \n    if (question.scaleLabels) {\n      html += `\n        <div class=\"scale-labels mt-sm\">\n          <span>${question.scaleLabels.min}</span>\n          <span>${question.scaleLabels.max}</span>\n        </div>\n      `;\n    }\n    \n    return html;\n  }\n\n  renderMultipleChoiceInput(question) {\n    const current = this.responses[this.currentQuestion] || '';\n    \n    return `\n      <div class=\"assessment-choices\">\n        ${question.options.map(option => `\n          <label class=\"choice-option ${current === option.value ? 'selected' : ''}\">\n            <input type=\"radio\" name=\"question_${this.currentQuestion}\" \n                   value=\"${option.value}\" ${current === option.value ? 'checked' : ''}>\n            <span class=\"choice-label\">${option.label}</span>\n            ${option.description ? `<p class=\"choice-description\">${option.description}</p>` : ''}\n          </label>\n        `).join('')}\n      </div>\n    `;\n  }\n\n  renderTextInput(question) {\n    const current = this.responses[this.currentQuestion] || '';\n    return `\n      <div class=\"assessment-text\">\n        <textarea name=\"question_${this.currentQuestion}\" \n                  placeholder=\"${question.placeholder || 'Enter your response...'}\" \n                  rows=\"4\">${current}</textarea>\n      </div>\n    `;\n  }\n\n  renderBooleanInput(question) {\n    const current = this.responses[this.currentQuestion];\n    return `\n      <div class=\"assessment-boolean\">\n        <label class=\"boolean-option ${current === true ? 'selected' : ''}\">\n          <input type=\"radio\" name=\"question_${this.currentQuestion}\" \n                 value=\"true\" ${current === true ? 'checked' : ''}>\n          <span>Yes</span>\n        </label>\n        <label class=\"boolean-option ${current === false ? 'selected' : ''}\">\n          <input type=\"radio\" name=\"question_${this.currentQuestion}\" \n                 value=\"false\" ${current === false ? 'checked' : ''}>\n          <span>No</span>\n        </label>\n      </div>\n    `;\n  }\n\n  bindEvents() {\n    this.container.addEventListener('click', (e) => {\n      if (e.target.classList.contains('scale-option')) {\n        this.handleScaleSelection(e.target);\n      }\n    });\n    \n    this.container.addEventListener('change', (e) => {\n      if (e.target.type === 'radio' || e.target.type === 'textarea') {\n        this.handleInputChange(e.target);\n      }\n    });\n    \n    // Keyboard navigation for scale\n    this.container.addEventListener('keydown', (e) => {\n      if (e.target.classList.contains('scale-option')) {\n        this.handleScaleKeyboard(e);\n      }\n    });\n  }\n\n  handleScaleSelection(element) {\n    const value = parseInt(element.dataset.value);\n    this.responses[this.currentQuestion] = value;\n    \n    // Update visual state\n    this.container.querySelectorAll('.scale-option').forEach(opt => {\n      opt.classList.remove('selected');\n      opt.setAttribute('aria-checked', 'false');\n      opt.setAttribute('tabindex', '-1');\n    });\n    \n    element.classList.add('selected');\n    element.setAttribute('aria-checked', 'true');\n    element.setAttribute('tabindex', '0');\n    \n    this.announceToScreenReader(`Selected ${value} out of ${this.questions[this.currentQuestion].max || 5}`);\n  }\n\n  handleInputChange(element) {\n    let value = element.value;\n    if (element.type === 'radio') {\n      value = element.value === 'true' ? true : element.value === 'false' ? false : element.value;\n    }\n    this.responses[this.currentQuestion] = value;\n  }\n\n  handleScaleKeyboard(e) {\n    const current = e.target;\n    const options = Array.from(this.container.querySelectorAll('.scale-option'));\n    const currentIndex = options.indexOf(current);\n    \n    let newIndex = currentIndex;\n    \n    switch (e.key) {\n      case 'ArrowLeft':\n      case 'ArrowUp':\n        newIndex = Math.max(0, currentIndex - 1);\n        break;\n      case 'ArrowRight':\n      case 'ArrowDown':\n        newIndex = Math.min(options.length - 1, currentIndex + 1);\n        break;\n      case 'Home':\n        newIndex = 0;\n        break;\n      case 'End':\n        newIndex = options.length - 1;\n        break;\n      case 'Enter':\n      case ' ':\n        this.handleScaleSelection(current);\n        e.preventDefault();\n        return;\n      default:\n        return;\n    }\n    \n    if (newIndex !== currentIndex) {\n      options[newIndex].focus();\n      e.preventDefault();\n    }\n  }\n\n  nextQuestion() {\n    if (this.currentQuestion < this.questions.length - 1) {\n      this.currentQuestion++;\n      this.render();\n    } else {\n      this.completeAssessment();\n    }\n  }\n\n  previousQuestion() {\n    if (this.currentQuestion > 0) {\n      this.currentQuestion--;\n      this.render();\n    }\n  }\n\n  completeAssessment() {\n    const results = this.calculateResults();\n    this.displayResults(results);\n  }\n\n  calculateResults() {\n    let totalScore = 0;\n    let maxScore = 0;\n    const categoryScores = {};\n    \n    this.questions.forEach((question, index) => {\n      const response = this.responses[index];\n      const score = this.getQuestionScore(question, response);\n      const maxQuestionScore = this.getMaxQuestionScore(question);\n      \n      totalScore += score;\n      maxScore += maxQuestionScore;\n      \n      // Category scoring\n      if (question.category) {\n        if (!categoryScores[question.category]) {\n          categoryScores[question.category] = { score: 0, max: 0 };\n        }\n        categoryScores[question.category].score += score;\n        categoryScores[question.category].max += maxQuestionScore;\n      }\n    });\n    \n    const percentage = Math.round((totalScore / maxScore) * 100);\n    \n    return {\n      totalScore,\n      maxScore,\n      percentage,\n      categoryScores,\n      responses: this.responses,\n      recommendation: this.getRecommendation(percentage)\n    };\n  }\n\n  getQuestionScore(question, response) {\n    switch (question.type) {\n      case 'scale':\n        return parseInt(response) || 0;\n      case 'boolean':\n        return response === true ? (question.max || 5) : 0;\n      case 'multiple-choice':\n        const option = question.options.find(opt => opt.value === response);\n        return option ? (option.score || 1) : 0;\n      default:\n        return 0;\n    }\n  }\n\n  getMaxQuestionScore(question) {\n    switch (question.type) {\n      case 'scale':\n        return question.max || 5;\n      case 'boolean':\n        return question.max || 5;\n      case 'multiple-choice':\n        return Math.max(...question.options.map(opt => opt.score || 1));\n      default:\n        return 1;\n    }\n  }\n\n  getRecommendation(percentage) {\n    if (percentage >= 85) {\n      return {\n        level: 'excellent',\n        title: 'Interview Ready',\n        description: 'You\\'re well-prepared! Focus on final practice and mock interviews.',\n        nextSteps: ['quick-reference.md', 'practice/mock-interviews.md']\n      };\n    } else if (percentage >= 70) {\n      return {\n        level: 'good',\n        title: 'Strong Foundation',\n        description: 'You have a solid base. Follow the 6-week intensive plan.',\n        nextSteps: ['practice/6-week-plan.md', 'behavioral/index.md']\n      };\n    } else if (percentage >= 55) {\n      return {\n        level: 'developing',\n        title: 'Building Skills',\n        description: 'Focus on comprehensive skill development with our 12-week plan.',\n        nextSteps: ['practice/12-week-plan.md', 'fundamentals/index.md']\n      };\n    } else {\n      return {\n        level: 'beginning',\n        title: 'Foundation Needed',\n        description: 'Consider gaining more experience before intensive interview prep.',\n        nextSteps: ['getting-started.md', 'fundamentals/l6-vs-l7.md']\n      };\n    }\n  }\n\n  displayResults(results) {\n    const html = `\n      <div class=\"assessment-results\">\n        <div class=\"results-header text-center mb-xl\">\n          <h3>Assessment Complete!</h3>\n          <div class=\"results-score\">\n            <div class=\"score-circle\">\n              <span class=\"score-percentage\">${results.percentage}%</span>\n            </div>\n            <p class=\"score-description\">${results.recommendation.description}</p>\n          </div>\n        </div>\n        \n        <div class=\"results-recommendation card\">\n          <h4>${results.recommendation.title}</h4>\n          <p>${results.recommendation.description}</p>\n          \n          <div class=\"recommended-actions mt-md\">\n            <h5>Recommended Next Steps:</h5>\n            <div class=\"action-buttons\">\n              ${results.recommendation.nextSteps.map(step => `\n                <a href=\"${step}\" class=\"md-button\">${this.getStepLabel(step)}</a>\n              `).join('')}\n            </div>\n          </div>\n        </div>\n        \n        <div class=\"results-breakdown mt-lg\">\n          <h4>Category Breakdown:</h4>\n          <div class=\"category-scores\">\n            ${Object.entries(results.categoryScores).map(([category, scores]) => `\n              <div class=\"category-score\">\n                <div class=\"category-label\">${category}</div>\n                <div class=\"category-progress\">\n                  <div class=\"progress-bar\">\n                    <div class=\"progress-fill\" \n                         style=\"width: ${Math.round((scores.score / scores.max) * 100)}%\"></div>\n                  </div>\n                  <span class=\"category-percentage\">${Math.round((scores.score / scores.max) * 100)}%</span>\n                </div>\n              </div>\n            `).join('')}\n          </div>\n        </div>\n        \n        <div class=\"results-actions mt-xl text-center\">\n          <button class=\"md-button\" onclick=\"assessmentTool.reset()\">Retake Assessment</button>\n          <button class=\"md-button md-button--primary\" onclick=\"assessmentTool.saveResults()\">Save Results</button>\n        </div>\n      </div>\n    `;\n    \n    this.container.innerHTML = html;\n    this.announceToScreenReader(`Assessment complete. Your score is ${results.percentage}%. ${results.recommendation.title}.`);\n  }\n\n  getStepLabel(step) {\n    const labels = {\n      'quick-reference.md': 'Quick Reference',\n      'practice/mock-interviews.md': 'Mock Interviews',\n      'practice/6-week-plan.md': '6-Week Plan',\n      'behavioral/index.md': 'Behavioral Prep',\n      'practice/12-week-plan.md': '12-Week Plan',\n      'fundamentals/index.md': 'Fundamentals',\n      'getting-started.md': 'Getting Started',\n      'fundamentals/l6-vs-l7.md': 'L6 vs L7 Guide'\n    };\n    return labels[step] || step;\n  }\n\n  reset() {\n    this.currentQuestion = 0;\n    this.responses = {};\n    this.render();\n  }\n\n  saveResults() {\n    const results = this.calculateResults();\n    localStorage.setItem('assessmentResults', JSON.stringify({\n      ...results,\n      timestamp: new Date().toISOString()\n    }));\n    this.announceToScreenReader('Assessment results saved.');\n  }\n\n  announceToScreenReader(message) {\n    const announcement = document.createElement('div');\n    announcement.setAttribute('aria-live', 'polite');\n    announcement.setAttribute('aria-atomic', 'true');\n    announcement.className = 'sr-only';\n    announcement.textContent = message;\n    document.body.appendChild(announcement);\n    \n    setTimeout(() => {\n      document.body.removeChild(announcement);\n    }, 1000);\n  }\n}\n\n// Initialize decision trees when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', function() {\n  // Study Plan Decision Tree Configuration\n  const studyPlanConfig = {\n    root: 'timeline',\n    nodes: {\n      timeline: {\n        type: 'question',\n        title: 'How much time do you have?',\n        description: 'Select the timeframe that best matches your situation.',\n        options: [\n          {\n            label: '2-4 weeks (Urgent)',\n            value: 'urgent',\n            description: 'Interview scheduled soon',\n            next: 'experience_urgent'\n          },\n          {\n            label: '6-12 weeks (Planned)',\n            value: 'planned',\n            description: 'Structured preparation',\n            next: 'experience_planned'\n          },\n          {\n            label: '6+ months (Comprehensive)',\n            value: 'comprehensive',\n            description: 'Career development focus',\n            next: 'experience_comprehensive'\n          }\n        ]\n      },\n      experience_urgent: {\n        type: 'question',\n        title: 'What\\'s your current experience level?',\n        description: 'This helps us prioritize your preparation areas.',\n        options: [\n          {\n            label: 'Senior Engineer (L5)',\n            value: 'l5',\n            next: 'result_urgent_l5'\n          },\n          {\n            label: 'Engineering Manager (L6)',\n            value: 'l6',\n            next: 'result_urgent_l6'\n          },\n          {\n            label: 'Experienced Manager',\n            value: 'experienced',\n            next: 'result_urgent_exp'\n          }\n        ]\n      },\n      result_urgent_l5: {\n        type: 'result',\n        resultType: 'warning',\n        icon: 'âš¡',\n        resultTitle: 'High-Impact Crash Course',\n        resultContent: `\n          <p><strong>Reality check:</strong> 2-4 weeks is extremely tight for L5â†’L6 transition. Focus on highest-impact areas:</p>\n          <ul>\n            <li><strong>80% Behavioral:</strong> Develop 5-7 strong STAR stories</li>\n            <li><strong>15% System Design:</strong> Master L6-level patterns</li>\n            <li><strong>5% Coding:</strong> Practice Amazon-style problems</li>\n          </ul>\n          <p><strong>Daily commitment:</strong> 3-4 hours minimum</p>\n        `,\n        actions: [\n          {\n            label: 'Start Crash Course',\n            url: 'practice/6-week-plan.md',\n            primary: true\n          },\n          {\n            label: 'Behavioral Priority',\n            url: 'behavioral/index.md'\n          }\n        ]\n      },\n      // Add more nodes as needed...\n    }\n  };\n\n  // Assessment Questions Configuration\n  const assessmentQuestions = [\n    {\n      question: 'How confident are you in designing systems for millions of users?',\n      type: 'scale',\n      category: 'Technical Skills',\n      min: 1,\n      max: 5,\n      scaleLabels: {\n        min: 'Not confident',\n        max: 'Very confident'\n      }\n    },\n    {\n      question: 'How many engineers have you directly managed?',\n      type: 'multiple-choice',\n      category: 'Leadership Experience',\n      options: [\n        { label: '0-2 engineers', value: '0-2', score: 1 },\n        { label: '3-7 engineers', value: '3-7', score: 3 },\n        { label: '8-15 engineers', value: '8-15', score: 4 },\n        { label: '15+ engineers', value: '15+', score: 5 }\n      ]\n    },\n    {\n      question: 'Can you solve LeetCode medium problems in under 45 minutes?',\n      type: 'boolean',\n      category: 'Technical Skills'\n    },\n    {\n      question: 'How familiar are you with Amazon\\'s Leadership Principles?',\n      type: 'scale',\n      category: 'Cultural Fit',\n      min: 1,\n      max: 5,\n      scaleLabels: {\n        min: 'Never heard of them',\n        max: 'Know them by heart'\n      }\n    }\n    // Add more questions as needed...\n  ];\n\n  // Initialize tools\n  const decisionTreeElement = document.getElementById('study-plan-decision-tree');\n  if (decisionTreeElement) {\n    window.studyPlanDecisionTree = new DecisionTree('study-plan-decision-tree', studyPlanConfig);\n  }\n\n  const assessmentElement = document.getElementById('readiness-assessment');\n  if (assessmentElement) {\n    window.assessmentTool = new AssessmentTool('readiness-assessment', assessmentQuestions);\n  }\n});"