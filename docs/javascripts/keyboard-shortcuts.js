/**\n * Keyboard Shortcuts and Quick Access Systems\n * Provides keyboard navigation and command palette functionality\n */\n\nclass KeyboardShortcuts {\n  constructor() {\n    this.shortcuts = new Map();\n    this.commandPalette = null;\n    this.isCommandPaletteOpen = false;\n    this.currentFocus = null;\n    this.init();\n  }\n\n  init() {\n    this.registerDefaultShortcuts();\n    this.createCommandPalette();\n    this.bindGlobalEvents();\n    this.initQuickAccess();\n    this.showShortcutHints();\n  }\n\n  registerDefaultShortcuts() {\n    // Navigation shortcuts\n    this.register('ctrl+k', 'Open command palette', () => this.openCommandPalette());\n    this.register('/', 'Focus search', () => this.focusSearch());\n    this.register('h', 'Go to home page', () => this.navigateToHome());\n    this.register('g h', 'Go to getting started', () => this.navigateToGettingStarted());\n    this.register('g b', 'Go to behavioral section', () => this.navigateToBehavioral());\n    this.register('g s', 'Go to system design', () => this.navigateToSystemDesign());\n    this.register('g c', 'Go to coding section', () => this.navigateToCoding());\n    this.register('g p', 'Go to practice plans', () => this.navigateToPractice());\n    \n    // Page navigation\n    this.register('j', 'Next section', () => this.navigateNext());\n    this.register('k', 'Previous section', () => this.navigatePrevious());\n    this.register('g g', 'Go to top', () => this.goToTop());\n    this.register('shift+g', 'Go to bottom', () => this.goToBottom());\n    \n    // Content interaction\n    this.register('t', 'Toggle table of contents', () => this.toggleToc());\n    this.register('s', 'Toggle sidebar', () => this.toggleSidebar());\n    this.register('f', 'Toggle fullscreen', () => this.toggleFullscreen());\n    this.register('d', 'Toggle dark mode', () => this.toggleDarkMode());\n    this.register('?', 'Show keyboard shortcuts', () => this.showShortcutHelp());\n    \n    // Accessibility\n    this.register('alt+plus', 'Increase font size', () => this.increaseFontSize());\n    this.register('alt+minus', 'Decrease font size', () => this.decreaseFontSize());\n    this.register('alt+0', 'Reset font size', () => this.resetFontSize());\n    this.register('alt+h', 'Toggle high contrast', () => this.toggleHighContrast());\n    \n    // Study features\n    this.register('b', 'Bookmark current page', () => this.bookmarkPage());\n    this.register('n', 'Add note to current page', () => this.addNote());\n    this.register('m', 'Mark as completed', () => this.markCompleted());\n    this.register('r', 'Start reading mode', () => this.enterReadingMode());\n    \n    // Quick actions\n    this.register('ctrl+p', 'Print current page', () => this.printPage());\n    this.register('ctrl+shift+c', 'Copy page URL', () => this.copyPageUrl());\n    this.register('ctrl+shift+l', 'Copy page link', () => this.copyPageLink());\n  }\n\n  register(shortcut, description, action) {\n    const normalizedShortcut = this.normalizeShortcut(shortcut);\n    this.shortcuts.set(normalizedShortcut, {\n      description,\n      action,\n      originalShortcut: shortcut\n    });\n  }\n\n  normalizeShortcut(shortcut) {\n    return shortcut.toLowerCase()\n      .replace(/\\s+/g, ' ')\n      .replace('cmd', 'ctrl')\n      .replace('option', 'alt');\n  }\n\n  bindGlobalEvents() {\n    let keySequence = [];\n    let sequenceTimeout = null;\n    \n    document.addEventListener('keydown', (e) => {\n      // Skip if typing in input fields\n      if (this.isTypingInInput(e.target)) {\n        return;\n      }\n      \n      // Skip if command palette is open and handle separately\n      if (this.isCommandPaletteOpen && e.key !== 'Escape') {\n        this.handleCommandPaletteKeydown(e);\n        return;\n      }\n      \n      const key = this.getKeyFromEvent(e);\n      \n      // Handle escape key\n      if (e.key === 'Escape') {\n        this.handleEscape();\n        return;\n      }\n      \n      // Add key to sequence\n      keySequence.push(key);\n      \n      // Clear timeout and set new one\n      clearTimeout(sequenceTimeout);\n      sequenceTimeout = setTimeout(() => {\n        keySequence = [];\n      }, 1000);\n      \n      // Check for matches\n      const sequence = keySequence.join(' ');\n      const shortcut = this.shortcuts.get(sequence);\n      \n      if (shortcut) {\n        e.preventDefault();\n        shortcut.action();\n        keySequence = [];\n        clearTimeout(sequenceTimeout);\n        return;\n      }\n      \n      // Check for single key shortcuts\n      if (keySequence.length === 1) {\n        const singleKeyShortcut = this.shortcuts.get(key);\n        if (singleKeyShortcut) {\n          e.preventDefault();\n          singleKeyShortcut.action();\n          keySequence = [];\n          clearTimeout(sequenceTimeout);\n        }\n      }\n    });\n  }\n\n  getKeyFromEvent(e) {\n    const modifiers = [];\n    if (e.ctrlKey || e.metaKey) modifiers.push('ctrl');\n    if (e.altKey) modifiers.push('alt');\n    if (e.shiftKey) modifiers.push('shift');\n    \n    let key = e.key.toLowerCase();\n    \n    // Special key mappings\n    const specialKeys = {\n      ' ': 'space',\n      'arrowup': 'up',\n      'arrowdown': 'down',\n      'arrowleft': 'left',\n      'arrowright': 'right',\n      '=': 'plus'\n    };\n    \n    key = specialKeys[key] || key;\n    \n    return modifiers.length > 0 ? `${modifiers.join('+')}-${key}` : key;\n  }\n\n  isTypingInInput(element) {\n    const inputTypes = ['INPUT', 'TEXTAREA', 'SELECT'];\n    return inputTypes.includes(element.tagName) || \n           element.contentEditable === 'true' ||\n           element.closest('.CodeMirror') !== null;\n  }\n\n  createCommandPalette() {\n    const palette = document.createElement('div');\n    palette.className = 'command-palette';\n    palette.setAttribute('role', 'dialog');\n    palette.setAttribute('aria-labelledby', 'command-palette-title');\n    palette.innerHTML = `\n      <div class=\"command-palette-backdrop\"></div>\n      <div class=\"command-palette-modal\">\n        <div class=\"command-palette-header\">\n          <h3 id=\"command-palette-title\" class=\"sr-only\">Command Palette</h3>\n          <input type=\"text\" \n                 class=\"command-palette-input\" \n                 placeholder=\"Type a command or search...\"\n                 autocomplete=\"off\"\n                 spellcheck=\"false\">\n          <div class=\"command-palette-hint\">\n            <kbd>Esc</kbd> to close\n          </div>\n        </div>\n        <div class=\"command-palette-body\">\n          <div class=\"command-palette-results\" role=\"listbox\">\n            ${this.renderDefaultCommands()}\n          </div>\n        </div>\n        <div class=\"command-palette-footer\">\n          <div class=\"palette-navigation-hint\">\n            <kbd>↑</kbd><kbd>↓</kbd> navigate\n            <kbd>↵</kbd> select\n            <kbd>Esc</kbd> close\n          </div>\n        </div>\n      </div>\n    `;\n    \n    document.body.appendChild(palette);\n    this.commandPalette = palette;\n    \n    // Bind events\n    const backdrop = palette.querySelector('.command-palette-backdrop');\n    backdrop.addEventListener('click', () => this.closeCommandPalette());\n    \n    const input = palette.querySelector('.command-palette-input');\n    input.addEventListener('input', (e) => this.handleCommandPaletteInput(e.target.value));\n  }\n\n  renderDefaultCommands() {\n    const commands = [\n      { icon: '🏠', title: 'Go to Home', description: 'Navigate to the homepage', action: () => this.navigateToHome() },\n      { icon: '🚀', title: 'Getting Started', description: 'Open the getting started guide', action: () => this.navigateToGettingStarted() },\n      { icon: '🔍', title: 'Search', description: 'Open search', action: () => this.focusSearch() },\n      { icon: '💼', title: 'Behavioral Interview Prep', description: 'Go to behavioral section', action: () => this.navigateToBehavioral() },\n      { icon: '🏗️', title: 'System Design', description: 'Go to system design section', action: () => this.navigateToSystemDesign() },\n      { icon: '💻', title: 'Coding Practice', description: 'Go to coding section', action: () => this.navigateToCoding() },\n      { icon: '📚', title: 'Practice Plans', description: 'View study plans', action: () => this.navigateToPractice() },\n      { icon: '📖', title: 'Toggle Reading Mode', description: 'Focus on content', action: () => this.enterReadingMode() },\n      { icon: '🌙', title: 'Toggle Dark Mode', description: 'Switch color scheme', action: () => this.toggleDarkMode() },\n      { icon: '🔖', title: 'Bookmark Page', description: 'Save current page', action: () => this.bookmarkPage() },\n      { icon: '📝', title: 'Add Note', description: 'Add personal note', action: () => this.addNote() },\n      { icon: '✅', title: 'Mark Completed', description: 'Mark page as completed', action: () => this.markCompleted() },\n      { icon: '❓', title: 'Keyboard Shortcuts', description: 'Show all shortcuts', action: () => this.showShortcutHelp() }\n    ];\n    \n    return commands.map((cmd, index) => `\n      <div class=\"command-palette-item\" \n           role=\"option\" \n           data-index=\"${index}\"\n           tabindex=\"-1\">\n        <div class=\"command-icon\">${cmd.icon}</div>\n        <div class=\"command-content\">\n          <div class=\"command-title\">${cmd.title}</div>\n          <div class=\"command-description\">${cmd.description}</div>\n        </div>\n      </div>\n    `).join('');\n  }\n\n  openCommandPalette() {\n    if (this.commandPalette) {\n      this.commandPalette.hidden = false;\n      this.isCommandPaletteOpen = true;\n      \n      const input = this.commandPalette.querySelector('.command-palette-input');\n      input.value = '';\n      input.focus();\n      \n      // Render default commands\n      this.updateCommandPaletteResults(this.renderDefaultCommands());\n      \n      // Disable body scroll\n      document.body.style.overflow = 'hidden';\n      \n      this.announceToScreenReader('Command palette opened');\n    }\n  }\n\n  closeCommandPalette() {\n    if (this.commandPalette) {\n      this.commandPalette.hidden = true;\n      this.isCommandPaletteOpen = false;\n      \n      // Restore body scroll\n      document.body.style.overflow = '';\n      \n      this.announceToScreenReader('Command palette closed');\n    }\n  }\n\n  handleCommandPaletteInput(query) {\n    if (!query.trim()) {\n      this.updateCommandPaletteResults(this.renderDefaultCommands());\n      return;\n    }\n    \n    // Search through all available commands and pages\n    const results = this.searchCommands(query);\n    this.updateCommandPaletteResults(this.renderSearchResults(results, query));\n  }\n\n  searchCommands(query) {\n    const queryLower = query.toLowerCase();\n    const results = [];\n    \n    // Search shortcuts\n    for (const [shortcut, command] of this.shortcuts) {\n      if (command.description.toLowerCase().includes(queryLower) ||\n          command.originalShortcut.toLowerCase().includes(queryLower)) {\n        results.push({\n          type: 'shortcut',\n          icon: '⌨️',\n          title: command.description,\n          description: `Shortcut: ${command.originalShortcut}`,\n          action: command.action,\n          score: this.calculateMatchScore(command.description, query)\n        });\n      }\n    }\n    \n    // Search navigation items\n    const navItems = this.getNavigationItems();\n    navItems.forEach(item => {\n      if (item.title.toLowerCase().includes(queryLower)) {\n        results.push({\n          type: 'navigation',\n          icon: '📄',\n          title: item.title,\n          description: item.description || item.url,\n          action: () => window.location.href = item.url,\n          score: this.calculateMatchScore(item.title, query)\n        });\n      }\n    });\n    \n    // Sort by relevance score\n    return results.sort((a, b) => b.score - a.score).slice(0, 10);\n  }\n\n  calculateMatchScore(text, query) {\n    const textLower = text.toLowerCase();\n    const queryLower = query.toLowerCase();\n    \n    if (textLower === queryLower) return 100;\n    if (textLower.startsWith(queryLower)) return 80;\n    if (textLower.includes(queryLower)) return 60;\n    \n    // Fuzzy match scoring\n    let score = 0;\n    let queryIndex = 0;\n    \n    for (let i = 0; i < textLower.length && queryIndex < queryLower.length; i++) {\n      if (textLower[i] === queryLower[queryIndex]) {\n        score += 1;\n        queryIndex++;\n      }\n    }\n    \n    return queryIndex === queryLower.length ? score : 0;\n  }\n\n  getNavigationItems() {\n    const items = [];\n    \n    // Extract from navigation menu\n    const navLinks = document.querySelectorAll('.md-nav__link');\n    navLinks.forEach(link => {\n      if (link.href && link.textContent.trim()) {\n        items.push({\n          title: link.textContent.trim(),\n          url: link.href,\n          description: link.getAttribute('title') || ''\n        });\n      }\n    });\n    \n    return items;\n  }\n\n  renderSearchResults(results, query) {\n    if (results.length === 0) {\n      return `\n        <div class=\"command-palette-no-results\">\n          <div class=\"no-results-icon\">🔍</div>\n          <p>No commands found for \"<strong>${this.escapeHtml(query)}</strong>\"</p>\n        </div>\n      `;\n    }\n    \n    return results.map((result, index) => `\n      <div class=\"command-palette-item\" \n           role=\"option\" \n           data-index=\"${index}\"\n           tabindex=\"-1\">\n        <div class=\"command-icon\">${result.icon}</div>\n        <div class=\"command-content\">\n          <div class=\"command-title\">${this.highlightQuery(result.title, query)}</div>\n          <div class=\"command-description\">${this.highlightQuery(result.description, query)}</div>\n        </div>\n        ${result.type === 'shortcut' ? `<div class=\"command-shortcut\">${result.description.split(': ')[1] || ''}</div>` : ''}\n      </div>\n    `).join('');\n  }\n\n  updateCommandPaletteResults(html) {\n    const resultsContainer = this.commandPalette.querySelector('.command-palette-results');\n    resultsContainer.innerHTML = html;\n    \n    // Bind click events\n    resultsContainer.querySelectorAll('.command-palette-item').forEach((item, index) => {\n      item.addEventListener('click', () => {\n        this.executeCommandAtIndex(index);\n      });\n    });\n    \n    // Reset focus to first item\n    this.setActiveCommandItem(0);\n  }\n\n  handleCommandPaletteKeydown(e) {\n    const items = this.commandPalette.querySelectorAll('.command-palette-item');\n    const activeItem = this.commandPalette.querySelector('.command-palette-item.active');\n    const currentIndex = activeItem ? parseInt(activeItem.dataset.index) : 0;\n    \n    switch (e.key) {\n      case 'ArrowDown':\n        e.preventDefault();\n        this.setActiveCommandItem(Math.min(currentIndex + 1, items.length - 1));\n        break;\n      \n      case 'ArrowUp':\n        e.preventDefault();\n        this.setActiveCommandItem(Math.max(currentIndex - 1, 0));\n        break;\n      \n      case 'Enter':\n        e.preventDefault();\n        this.executeCommandAtIndex(currentIndex);\n        break;\n      \n      case 'Escape':\n        e.preventDefault();\n        this.closeCommandPalette();\n        break;\n    }\n  }\n\n  setActiveCommandItem(index) {\n    const items = this.commandPalette.querySelectorAll('.command-palette-item');\n    items.forEach((item, i) => {\n      item.classList.toggle('active', i === index);\n      if (i === index) {\n        item.scrollIntoView({ block: 'nearest' });\n      }\n    });\n  }\n\n  executeCommandAtIndex(index) {\n    // Implementation depends on current search results\n    // This would need to track the current results and execute the appropriate action\n    console.log('Executing command at index:', index);\n    this.closeCommandPalette();\n  }\n\n  // Navigation actions\n  navigateToHome() {\n    window.location.href = '/';\n  }\n\n  navigateToGettingStarted() {\n    window.location.href = '/getting-started/';\n  }\n\n  navigateToBehavioral() {\n    window.location.href = '/behavioral/';\n  }\n\n  navigateToSystemDesign() {\n    window.location.href = '/system-design/';\n  }\n\n  navigateToCoding() {\n    window.location.href = '/coding/';\n  }\n\n  navigateToPractice() {\n    window.location.href = '/practice/';\n  }\n\n  // Page navigation\n  navigateNext() {\n    const nextLink = document.querySelector('a[title=\"Next\"], .md-footer__link--next');\n    if (nextLink) {\n      nextLink.click();\n      this.announceToScreenReader('Navigated to next page');\n    }\n  }\n\n  navigatePrevious() {\n    const prevLink = document.querySelector('a[title=\"Previous\"], .md-footer__link--prev');\n    if (prevLink) {\n      prevLink.click();\n      this.announceToScreenReader('Navigated to previous page');\n    }\n  }\n\n  goToTop() {\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n    this.announceToScreenReader('Scrolled to top');\n  }\n\n  goToBottom() {\n    window.scrollTo({ top: document.body.scrollHeight, behavior: 'smooth' });\n    this.announceToScreenReader('Scrolled to bottom');\n  }\n\n  // UI actions\n  focusSearch() {\n    const searchInput = document.querySelector('.md-search__input, .search-widget-input');\n    if (searchInput) {\n      searchInput.focus();\n      this.announceToScreenReader('Search focused');\n    }\n  }\n\n  toggleToc() {\n    const tocToggle = document.querySelector('.md-nav__toggle');\n    if (tocToggle) {\n      tocToggle.click();\n      this.announceToScreenReader('Table of contents toggled');\n    }\n  }\n\n  toggleSidebar() {\n    const sidebarToggle = document.querySelector('.md-nav__button');\n    if (sidebarToggle) {\n      sidebarToggle.click();\n      this.announceToScreenReader('Sidebar toggled');\n    }\n  }\n\n  toggleDarkMode() {\n    const colorToggle = document.querySelector('.md-header__button[title*=\"Switch to\"]');\n    if (colorToggle) {\n      colorToggle.click();\n      this.announceToScreenReader('Dark mode toggled');\n    }\n  }\n\n  toggleFullscreen() {\n    if (document.fullscreenElement) {\n      document.exitFullscreen();\n      this.announceToScreenReader('Exited fullscreen');\n    } else {\n      document.documentElement.requestFullscreen();\n      this.announceToScreenReader('Entered fullscreen');\n    }\n  }\n\n  // Accessibility actions\n  increaseFontSize() {\n    const currentSize = this.getCurrentFontSize();\n    this.setFontSize(Math.min(currentSize + 2, 24));\n    this.announceToScreenReader('Font size increased');\n  }\n\n  decreaseFontSize() {\n    const currentSize = this.getCurrentFontSize();\n    this.setFontSize(Math.max(currentSize - 2, 12));\n    this.announceToScreenReader('Font size decreased');\n  }\n\n  resetFontSize() {\n    this.setFontSize(16);\n    this.announceToScreenReader('Font size reset');\n  }\n\n  getCurrentFontSize() {\n    return parseInt(getComputedStyle(document.documentElement).fontSize);\n  }\n\n  setFontSize(size) {\n    document.documentElement.style.fontSize = `${size}px`;\n    localStorage.setItem('systemcraft-font-size', size.toString());\n  }\n\n  toggleHighContrast() {\n    const isHighContrast = document.documentElement.classList.contains('high-contrast');\n    document.documentElement.classList.toggle('high-contrast', !isHighContrast);\n    localStorage.setItem('systemcraft-high-contrast', (!isHighContrast).toString());\n    this.announceToScreenReader(`High contrast ${!isHighContrast ? 'enabled' : 'disabled'}`);\n  }\n\n  // Study features\n  bookmarkPage() {\n    if (window.learningProgress) {\n      // Integration with learning progress system\n      window.learningProgress.bookmarkPage(window.location.pathname);\n      this.announceToScreenReader('Page bookmarked');\n    } else {\n      // Fallback to localStorage\n      const bookmarks = JSON.parse(localStorage.getItem('systemcraft-bookmarks') || '[]');\n      const bookmark = {\n        url: window.location.pathname,\n        title: document.title,\n        timestamp: new Date().toISOString()\n      };\n      bookmarks.push(bookmark);\n      localStorage.setItem('systemcraft-bookmarks', JSON.stringify(bookmarks));\n      this.announceToScreenReader('Page bookmarked');\n    }\n  }\n\n  addNote() {\n    const note = prompt('Add a note for this page:');\n    if (note && note.trim()) {\n      if (window.learningProgress) {\n        window.learningProgress.addNote(window.location.pathname, note.trim());\n      } else {\n        const notes = JSON.parse(localStorage.getItem('systemcraft-notes') || '{}');\n        notes[window.location.pathname] = notes[window.location.pathname] || [];\n        notes[window.location.pathname].push({\n          text: note.trim(),\n          timestamp: new Date().toISOString()\n        });\n        localStorage.setItem('systemcraft-notes', JSON.stringify(notes));\n      }\n      this.announceToScreenReader('Note added');\n    }\n  }\n\n  markCompleted() {\n    if (window.learningProgress) {\n      window.learningProgress.markPageCompleted(window.location.pathname);\n    } else {\n      const completed = JSON.parse(localStorage.getItem('systemcraft-completed') || '[]');\n      if (!completed.includes(window.location.pathname)) {\n        completed.push(window.location.pathname);\n        localStorage.setItem('systemcraft-completed', JSON.stringify(completed));\n      }\n    }\n    this.announceToScreenReader('Page marked as completed');\n  }\n\n  enterReadingMode() {\n    document.body.classList.toggle('reading-mode');\n    const isReadingMode = document.body.classList.contains('reading-mode');\n    this.announceToScreenReader(`Reading mode ${isReadingMode ? 'enabled' : 'disabled'}`);\n  }\n\n  // Utility actions\n  printPage() {\n    window.print();\n  }\n\n  copyPageUrl() {\n    navigator.clipboard.writeText(window.location.href).then(() => {\n      this.announceToScreenReader('Page URL copied to clipboard');\n    });\n  }\n\n  copyPageLink() {\n    const link = `[${document.title}](${window.location.href})`;\n    navigator.clipboard.writeText(link).then(() => {\n      this.announceToScreenReader('Page link copied as Markdown');\n    });\n  }\n\n  // Help and hints\n  showShortcutHelp() {\n    const helpModal = this.createShortcutHelpModal();\n    document.body.appendChild(helpModal);\n    helpModal.querySelector('.shortcut-help-close').focus();\n  }\n\n  createShortcutHelpModal() {\n    const modal = document.createElement('div');\n    modal.className = 'shortcut-help-modal';\n    modal.setAttribute('role', 'dialog');\n    modal.setAttribute('aria-labelledby', 'shortcut-help-title');\n    \n    const shortcutsByCategory = this.groupShortcutsByCategory();\n    \n    modal.innerHTML = `\n      <div class=\"shortcut-help-backdrop\"></div>\n      <div class=\"shortcut-help-content\">\n        <div class=\"shortcut-help-header\">\n          <h2 id=\"shortcut-help-title\">Keyboard Shortcuts</h2>\n          <button class=\"shortcut-help-close\" aria-label=\"Close\">&times;</button>\n        </div>\n        <div class=\"shortcut-help-body\">\n          ${Object.entries(shortcutsByCategory).map(([category, shortcuts]) => `\n            <div class=\"shortcut-category\">\n              <h3>${category}</h3>\n              <div class=\"shortcut-list\">\n                ${shortcuts.map(shortcut => `\n                  <div class=\"shortcut-item\">\n                    <div class=\"shortcut-keys\">\n                      ${this.renderShortcutKeys(shortcut.originalShortcut)}\n                    </div>\n                    <div class=\"shortcut-description\">${shortcut.description}</div>\n                  </div>\n                `).join('')}\n              </div>\n            </div>\n          `).join('')}\n        </div>\n      </div>\n    `;\n    \n    // Bind close events\n    modal.querySelector('.shortcut-help-close').onclick = () => this.closeShortcutHelp(modal);\n    modal.querySelector('.shortcut-help-backdrop').onclick = () => this.closeShortcutHelp(modal);\n    \n    // Handle escape key\n    modal.addEventListener('keydown', (e) => {\n      if (e.key === 'Escape') {\n        this.closeShortcutHelp(modal);\n      }\n    });\n    \n    return modal;\n  }\n\n  groupShortcutsByCategory() {\n    const categories = {\n      'Navigation': [],\n      'Page Actions': [],\n      'Study Features': [],\n      'Accessibility': [],\n      'Quick Actions': []\n    };\n    \n    const categoryMap = {\n      'open command palette': 'Navigation',\n      'focus search': 'Navigation',\n      'go to home': 'Navigation',\n      'go to getting started': 'Navigation',\n      'go to behavioral': 'Navigation',\n      'go to system design': 'Navigation',\n      'go to coding': 'Navigation',\n      'go to practice': 'Navigation',\n      'next section': 'Page Actions',\n      'previous section': 'Page Actions',\n      'go to top': 'Page Actions',\n      'go to bottom': 'Page Actions',\n      'toggle table of contents': 'Page Actions',\n      'toggle sidebar': 'Page Actions',\n      'toggle fullscreen': 'Page Actions',\n      'toggle dark mode': 'Page Actions',\n      'bookmark current page': 'Study Features',\n      'add note': 'Study Features',\n      'mark as completed': 'Study Features',\n      'start reading mode': 'Study Features',\n      'increase font size': 'Accessibility',\n      'decrease font size': 'Accessibility',\n      'reset font size': 'Accessibility',\n      'toggle high contrast': 'Accessibility',\n      'print current page': 'Quick Actions',\n      'copy page url': 'Quick Actions',\n      'copy page link': 'Quick Actions',\n      'show keyboard shortcuts': 'Quick Actions'\n    };\n    \n    for (const [shortcut, command] of this.shortcuts) {\n      const category = categoryMap[command.description.toLowerCase()] || 'Quick Actions';\n      categories[category].push(command);\n    }\n    \n    // Remove empty categories\n    Object.keys(categories).forEach(key => {\n      if (categories[key].length === 0) {\n        delete categories[key];\n      }\n    });\n    \n    return categories;\n  }\n\n  renderShortcutKeys(shortcut) {\n    return shortcut.split(' ').map(key => {\n      const keys = key.split('+');\n      return keys.map(k => `<kbd>${k}</kbd>`).join('+');\n    }).join(' then ');\n  }\n\n  closeShortcutHelp(modal) {\n    document.body.removeChild(modal);\n  }\n\n  showShortcutHints() {\n    // Show contextual hints for first-time users\n    const hasSeenHints = localStorage.getItem('systemcraft-seen-shortcuts');\n    if (!hasSeenHints) {\n      setTimeout(() => {\n        this.showShortcutTooltip('Press <kbd>Ctrl+K</kbd> to open command palette', 3000);\n        localStorage.setItem('systemcraft-seen-shortcuts', 'true');\n      }, 2000);\n    }\n  }\n\n  showShortcutTooltip(message, duration = 2000) {\n    const tooltip = document.createElement('div');\n    tooltip.className = 'shortcut-tooltip';\n    tooltip.innerHTML = message;\n    \n    document.body.appendChild(tooltip);\n    \n    setTimeout(() => {\n      tooltip.classList.add('show');\n    }, 100);\n    \n    setTimeout(() => {\n      tooltip.classList.remove('show');\n      setTimeout(() => {\n        if (document.body.contains(tooltip)) {\n          document.body.removeChild(tooltip);\n        }\n      }, 300);\n    }, duration);\n  }\n\n  initQuickAccess() {\n    // Create quick access indicators\n    this.createQuickAccessIndicators();\n    // Apply saved preferences\n    this.applySavedPreferences();\n  }\n\n  createQuickAccessIndicators() {\n    // Add visual indicators for shortcuts where appropriate\n    const searchInput = document.querySelector('.md-search__input');\n    if (searchInput && !searchInput.getAttribute('data-shortcut-hint')) {\n      searchInput.setAttribute('placeholder', 'Search (press / to focus)');\n      searchInput.setAttribute('data-shortcut-hint', 'true');\n    }\n  }\n\n  applySavedPreferences() {\n    // Apply saved font size\n    const savedFontSize = localStorage.getItem('systemcraft-font-size');\n    if (savedFontSize) {\n      this.setFontSize(parseInt(savedFontSize));\n    }\n    \n    // Apply saved high contrast\n    const savedHighContrast = localStorage.getItem('systemcraft-high-contrast');\n    if (savedHighContrast === 'true') {\n      document.documentElement.classList.add('high-contrast');\n    }\n  }\n\n  handleEscape() {\n    // Close any open modals or panels\n    if (this.isCommandPaletteOpen) {\n      this.closeCommandPalette();\n      return;\n    }\n    \n    // Close search suggestions\n    const searchSuggestions = document.querySelector('.search-suggestions');\n    if (searchSuggestions && searchSuggestions.style.display !== 'none') {\n      searchSuggestions.style.display = 'none';\n      return;\n    }\n    \n    // Exit reading mode\n    if (document.body.classList.contains('reading-mode')) {\n      this.enterReadingMode();\n      return;\n    }\n    \n    // Blur active element\n    if (document.activeElement && document.activeElement !== document.body) {\n      document.activeElement.blur();\n    }\n  }\n\n  // Utility methods\n  escapeHtml(text) {\n    const div = document.createElement('div');\n    div.textContent = text;\n    return div.innerHTML;\n  }\n\n  highlightQuery(text, query) {\n    if (!query || !text) return text;\n    \n    const queryTerms = query.toLowerCase().split(/\\s+/);\n    let highlightedText = text;\n    \n    queryTerms.forEach(term => {\n      const regex = new RegExp(`(${term.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')})`, 'gi');\n      highlightedText = highlightedText.replace(regex, '<mark>$1</mark>');\n    });\n    \n    return highlightedText;\n  }\n\n  announceToScreenReader(message) {\n    const announcement = document.createElement('div');\n    announcement.setAttribute('aria-live', 'polite');\n    announcement.setAttribute('aria-atomic', 'true');\n    announcement.className = 'sr-only';\n    announcement.textContent = message;\n    document.body.appendChild(announcement);\n    \n    setTimeout(() => {\n      if (document.body.contains(announcement)) {\n        document.body.removeChild(announcement);\n      }\n    }, 1000);\n  }\n}\n\n// Initialize keyboard shortcuts when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n  window.keyboardShortcuts = new KeyboardShortcuts();\n});\n\n// Add required CSS\nconst keyboardCSS = `\n/* Command Palette Styles */\n.command-palette {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 10000;\n  display: flex;\n  align-items: flex-start;\n  justify-content: center;\n  padding-top: 10vh;\n}\n\n.command-palette[hidden] {\n  display: none;\n}\n\n.command-palette-backdrop {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.5);\n  backdrop-filter: blur(4px);\n}\n\n.command-palette-modal {\n  position: relative;\n  width: 90%;\n  max-width: 600px;\n  max-height: 70vh;\n  background: white;\n  border-radius: var(--radius-lg);\n  box-shadow: var(--shadow-heavy);\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n}\n\n.command-palette-header {\n  padding: var(--spacing-lg);\n  border-bottom: 1px solid var(--md-default-fg-color--lighter);\n  display: flex;\n  align-items: center;\n  gap: var(--spacing-md);\n}\n\n.command-palette-input {\n  flex: 1;\n  border: none;\n  outline: none;\n  font-size: 18px;\n  background: transparent;\n}\n\n.command-palette-hint {\n  display: flex;\n  align-items: center;\n  gap: var(--spacing-xs);\n  color: var(--md-default-fg-color--light);\n  font-size: 0.9rem;\n}\n\n.command-palette-body {\n  flex: 1;\n  overflow-y: auto;\n  padding: var(--spacing-sm) 0;\n}\n\n.command-palette-results {\n  padding: 0;\n}\n\n.command-palette-item {\n  display: flex;\n  align-items: center;\n  gap: var(--spacing-md);\n  padding: var(--spacing-md) var(--spacing-lg);\n  cursor: pointer;\n  transition: var(--hover-transition);\n  border-bottom: 1px solid transparent;\n}\n\n.command-palette-item:hover,\n.command-palette-item.active {\n  background: rgba(255, 153, 0, 0.1);\n  border-bottom-color: var(--md-primary-fg-color);\n}\n\n.command-icon {\n  font-size: 1.5rem;\n  flex-shrink: 0;\n}\n\n.command-content {\n  flex: 1;\n  min-width: 0;\n}\n\n.command-title {\n  font-weight: 600;\n  color: var(--md-default-fg-color--dark);\n  margin: 0;\n}\n\n.command-description {\n  color: var(--md-default-fg-color--light);\n  font-size: 0.9rem;\n  margin-top: 0.2em;\n}\n\n.command-shortcut {\n  display: flex;\n  gap: var(--spacing-xs);\n  align-items: center;\n}\n\n.command-palette-no-results {\n  text-align: center;\n  padding: var(--spacing-xl);\n  color: var(--md-default-fg-color--light);\n}\n\n.no-results-icon {\n  font-size: 3rem;\n  margin-bottom: var(--spacing-md);\n  opacity: 0.5;\n}\n\n.command-palette-footer {\n  padding: var(--spacing-md) var(--spacing-lg);\n  border-top: 1px solid var(--md-default-fg-color--lighter);\n  background: var(--md-default-fg-color--lightest);\n}\n\n.palette-navigation-hint {\n  display: flex;\n  gap: var(--spacing-md);\n  align-items: center;\n  font-size: 0.8rem;\n  color: var(--md-default-fg-color--light);\n  justify-content: center;\n}\n\n/* Shortcut Help Modal */\n.shortcut-help-modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 10000;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.shortcut-help-backdrop {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.5);\n}\n\n.shortcut-help-content {\n  position: relative;\n  width: 90%;\n  max-width: 800px;\n  max-height: 80vh;\n  background: white;\n  border-radius: var(--radius-lg);\n  box-shadow: var(--shadow-heavy);\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n}\n\n.shortcut-help-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: var(--spacing-lg);\n  border-bottom: 1px solid var(--md-default-fg-color--lighter);\n}\n\n.shortcut-help-close {\n  background: none;\n  border: none;\n  font-size: 24px;\n  cursor: pointer;\n  padding: var(--spacing-xs);\n  border-radius: var(--radius-sm);\n  transition: var(--hover-transition);\n}\n\n.shortcut-help-close:hover {\n  background: var(--md-default-fg-color--lightest);\n}\n\n.shortcut-help-body {\n  flex: 1;\n  overflow-y: auto;\n  padding: var(--spacing-lg);\n}\n\n.shortcut-category {\n  margin-bottom: var(--spacing-xl);\n}\n\n.shortcut-category h3 {\n  margin: 0 0 var(--spacing-md) 0;\n  color: var(--md-primary-fg-color--dark);\n  font-size: 1.1rem;\n  border-bottom: 2px solid var(--md-primary-fg-color);\n  padding-bottom: var(--spacing-xs);\n}\n\n.shortcut-list {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n  gap: var(--spacing-md);\n}\n\n.shortcut-item {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: var(--spacing-sm) 0;\n  border-bottom: 1px solid var(--md-default-fg-color--lightest);\n}\n\n.shortcut-keys {\n  display: flex;\n  gap: var(--spacing-xs);\n  align-items: center;\n}\n\n.shortcut-description {\n  color: var(--md-default-fg-color--light);\n  font-size: 0.9rem;\n}\n\n/* Shortcut Tooltip */\n.shortcut-tooltip {\n  position: fixed;\n  bottom: 20px;\n  right: 20px;\n  background: var(--md-primary-fg-color);\n  color: white;\n  padding: var(--spacing-md) var(--spacing-lg);\n  border-radius: var(--radius-md);\n  box-shadow: var(--shadow-medium);\n  max-width: 300px;\n  font-size: 0.9rem;\n  transform: translateY(20px);\n  opacity: 0;\n  transition: all 0.3s ease;\n  z-index: 1000;\n}\n\n.shortcut-tooltip.show {\n  transform: translateY(0);\n  opacity: 1;\n}\n\n/* Reading Mode */\n.reading-mode .md-header,\n.reading-mode .md-sidebar,\n.reading-mode .md-footer {\n  opacity: 0.3;\n  transition: opacity 0.3s;\n}\n\n.reading-mode .md-header:hover,\n.reading-mode .md-sidebar:hover,\n.reading-mode .md-footer:hover {\n  opacity: 1;\n}\n\n.reading-mode .md-content {\n  max-width: 800px;\n  margin: 0 auto;\n  padding: var(--spacing-xl);\n}\n\n/* High Contrast Mode */\n.high-contrast {\n  filter: contrast(150%) brightness(1.2);\n}\n\n.high-contrast .md-typeset {\n  color: #000000 !important;\n}\n\n.high-contrast a {\n  color: #0000FF !important;\n  text-decoration: underline !important;\n}\n\n.high-contrast .md-button {\n  border: 2px solid currentColor !important;\n  font-weight: bold !important;\n}\n\n/* Keyboard styles */\nkbd {\n  background: var(--md-default-fg-color--lightest);\n  border: 1px solid var(--md-default-fg-color--lighter);\n  border-radius: var(--radius-sm);\n  padding: 0.2em 0.4em;\n  font-family: monospace;\n  font-size: 0.8em;\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\n}\n\n/* Mobile responsiveness */\n@media (max-width: 768px) {\n  .command-palette-modal {\n    width: 95%;\n    max-height: 80vh;\n    margin-top: 5vh;\n  }\n  \n  .shortcut-help-content {\n    width: 95%;\n    max-height: 85vh;\n  }\n  \n  .shortcut-list {\n    grid-template-columns: 1fr;\n  }\n  \n  .palette-navigation-hint {\n    flex-wrap: wrap;\n    justify-content: center;\n  }\n  \n  .shortcut-tooltip {\n    bottom: 80px; /* Account for mobile toolbar */\n    right: 10px;\n    left: 10px;\n    max-width: none;\n  }\n}\n`;\n\nconst styleSheet = document.createElement('style');\nstyleSheet.textContent = keyboardCSS;\ndocument.head.appendChild(styleSheet);"