/**\n * Onboarding and Help System\n * Provides interactive site tours, contextual help, and user guidance\n */\n\nclass OnboardingSystem {\n  constructor() {\n    this.storageKey = 'systemcraft-onboarding';\n    this.onboardingState = this.loadOnboardingState();\n    this.currentTour = null;\n    this.tourStep = 0;\n    this.init();\n  }\n\n  loadOnboardingState() {\n    try {\n      const saved = localStorage.getItem(this.storageKey);\n      if (saved) {\n        return JSON.parse(saved);\n      }\n    } catch (e) {\n      console.warn('Could not load onboarding state:', e);\n    }\n    \n    return {\n      completedTours: [],\n      firstVisit: true,\n      lastHelpShown: null,\n      dismissedTips: [],\n      userPreferences: {\n        showTooltips: true,\n        autoStartTours: true,\n        helpPosition: 'bottom-right'\n      }\n    };\n  }\n\n  saveOnboardingState() {\n    try {\n      localStorage.setItem(this.storageKey, JSON.stringify(this.onboardingState));\n    } catch (e) {\n      console.error('Could not save onboarding state:', e);\n    }\n  }\n\n  init() {\n    this.createHelpWidget();\n    this.initContextualHelp();\n    this.initTooltips();\n    this.checkForAutoTours();\n    this.bindEvents();\n    this.addKeyboardShortcuts();\n  }\n\n  createHelpWidget() {\n    const widget = document.createElement('div');\n    widget.className = 'help-widget';\n    widget.innerHTML = `\n      <button class=\"help-toggle\" aria-label=\"Open help menu\" title=\"Help & Tours (F1)\">\n        <svg viewBox=\"0 0 24 24\" width=\"20\" height=\"20\">\n          <path d=\"M11,18H13V16H11V18M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20,12C20,16.41 16.41,20 12,20M12,6A4,4 0 0,0 8,10H10A2,2 0 0,1 12,8A2,2 0 0,1 14,10C14,12 11,11.75 11,15H13C13,12.75 16,12.5 16,10A4,4 0 0,0 12,6Z\"/>\n        </svg>\n      </button>\n      <div class=\"help-menu\" hidden>\n        <div class=\"help-menu-header\">\n          <h3>Help & Tours</h3>\n          <button class=\"help-close\" aria-label=\"Close help menu\">&times;</button>\n        </div>\n        <div class=\"help-menu-content\">\n          <div class=\"help-section\">\n            <h4>Quick Start</h4>\n            <div class=\"help-actions\">\n              <button class=\"help-action\" data-action=\"tour\" data-tour=\"first-visit\">\n                <span class=\"help-icon\">üéØ</span>\n                <div class=\"help-action-content\">\n                  <div class=\"help-action-title\">Site Overview Tour</div>\n                  <div class=\"help-action-description\">Learn the basics in 3 minutes</div>\n                </div>\n              </button>\n              \n              <button class=\"help-action\" data-action=\"tour\" data-tour=\"study-planning\">\n                <span class=\"help-icon\">üìö</span>\n                <div class=\"help-action-content\">\n                  <div class=\"help-action-title\">Study Planning Tour</div>\n                  <div class=\"help-action-description\">Create your personalized plan</div>\n                </div>\n              </button>\n              \n              <button class=\"help-action\" data-action=\"tour\" data-tour=\"features\">\n                <span class=\"help-icon\">‚ú®</span>\n                <div class=\"help-action-content\">\n                  <div class=\"help-action-title\">Advanced Features</div>\n                  <div class=\"help-action-description\">Discover all the tools</div>\n                </div>\n              </button>\n            </div>\n          </div>\n          \n          <div class=\"help-section\">\n            <h4>Quick Help</h4>\n            <div class=\"help-links\">\n              <a href=\"#\" class=\"help-link\" data-action=\"faq\">\n                <span class=\"help-icon\">‚ùì</span>\n                <span>Frequently Asked Questions</span>\n              </a>\n              <a href=\"#\" class=\"help-link\" data-action=\"shortcuts\">\n                <span class=\"help-icon\">‚å®Ô∏è</span>\n                <span>Keyboard Shortcuts</span>\n              </a>\n              <a href=\"#\" class=\"help-link\" data-action=\"contact\">\n                <span class=\"help-icon\">üìß</span>\n                <span>Contact Support</span>\n              </a>\n            </div>\n          </div>\n          \n          <div class=\"help-section\">\n            <h4>Settings</h4>\n            <div class=\"help-settings\">\n              <label class=\"help-setting\">\n                <input type=\"checkbox\" ${this.onboardingState.userPreferences.showTooltips ? 'checked' : ''} \n                       onchange=\"onboardingSystem.updatePreference('showTooltips', this.checked)\">\n                <span>Show contextual tooltips</span>\n              </label>\n              <label class=\"help-setting\">\n                <input type=\"checkbox\" ${this.onboardingState.userPreferences.autoStartTours ? 'checked' : ''} \n                       onchange=\"onboardingSystem.updatePreference('autoStartTours', this.checked)\">\n                <span>Auto-start tours for new features</span>\n              </label>\n            </div>\n          </div>\n        </div>\n      </div>\n    `;\n    \n    document.body.appendChild(widget);\n  }\n\n  initContextualHelp() {\n    // Add contextual help buttons to complex sections\n    const complexSections = document.querySelectorAll(\n      '.assessment-container, .decision-tree, .skill-tree, .system-design-canvas'\n    );\n    \n    complexSections.forEach(section => {\n      this.addContextualHelpButton(section);\n    });\n  }\n\n  addContextualHelpButton(section) {\n    const helpButton = document.createElement('button');\n    helpButton.className = 'contextual-help-button';\n    helpButton.innerHTML = '?';\n    helpButton.title = 'Get help with this section';\n    helpButton.setAttribute('aria-label', 'Show contextual help');\n    \n    helpButton.onclick = () => {\n      this.showContextualHelp(section);\n    };\n    \n    // Position the button\n    section.style.position = 'relative';\n    section.appendChild(helpButton);\n  }\n\n  showContextualHelp(section) {\n    const helpType = this.identifyHelpType(section);\n    const helpContent = this.getContextualHelpContent(helpType);\n    \n    this.showHelpOverlay(helpContent, section);\n  }\n\n  identifyHelpType(section) {\n    if (section.classList.contains('assessment-container')) return 'assessment';\n    if (section.classList.contains('decision-tree')) return 'decision-tree';\n    if (section.classList.contains('skill-tree')) return 'skill-tree';\n    if (section.classList.contains('system-design-canvas')) return 'design-canvas';\n    return 'general';\n  }\n\n  getContextualHelpContent(type) {\n    const helpContent = {\n      'assessment': {\n        title: 'Assessment Tool Help',\n        content: `\n          <div class=\"help-content\">\n            <h4>How to use the assessment:</h4>\n            <ol>\n              <li><strong>Rate yourself honestly</strong> - Use the 1-5 scale to rate your current skill level</li>\n              <li><strong>Take your time</strong> - Think about real examples from your experience</li>\n              <li><strong>Be specific</strong> - Consider concrete situations, not general knowledge</li>\n              <li><strong>Review results</strong> - Use the recommendations to focus your study time</li>\n            </ol>\n            \n            <h4>Tips for accurate assessment:</h4>\n            <ul>\n              <li>1-2: Beginner level, little to no experience</li>\n              <li>3: Intermediate, some practical experience</li>\n              <li>4-5: Advanced, extensive real-world experience</li>\n            </ul>\n            \n            <div class=\"help-video\">\n              <button class=\"help-demo-button\">‚ñ∂ Watch Assessment Demo (2 min)</button>\n            </div>\n          </div>\n        `,\n        actions: []\n      },\n      'decision-tree': {\n        title: 'Decision Tree Help',\n        content: `\n          <div class=\"help-content\">\n            <h4>Using Decision Trees:</h4>\n            <p>Decision trees help you find the right path based on your specific situation.</p>\n            \n            <h4>How to navigate:</h4>\n            <ol>\n              <li><strong>Read each question carefully</strong> - Consider your current situation</li>\n              <li><strong>Select the best option</strong> - Choose what matches your circumstances</li>\n              <li><strong>Follow the path</strong> - The tree will guide you to personalized recommendations</li>\n              <li><strong>Take action</strong> - Use the final recommendations to plan your next steps</li>\n            </ol>\n            \n            <div class=\"help-tip\">\n              <strong>üí° Tip:</strong> You can restart the decision tree at any time by clicking the reset button.\n            </div>\n          </div>\n        `,\n        actions: []\n      },\n      'skill-tree': {\n        title: 'Skill Tree Help',\n        content: `\n          <div class=\"help-content\">\n            <h4>Understanding Skill Trees:</h4>\n            <p>Skill trees show your learning progression with prerequisites and dependencies.</p>\n            \n            <h4>Skill States:</h4>\n            <ul>\n              <li><strong>üîí Locked:</strong> Prerequisites not met yet</li>\n              <li><strong>‚≠ê Available:</strong> Ready to start learning</li>\n              <li><strong>üìö In Progress:</strong> Currently studying</li>\n              <li><strong>‚úÖ Completed:</strong> Mastery achieved</li>\n            </ul>\n            \n            <h4>How to use:</h4>\n            <ol>\n              <li><strong>Click on skills</strong> to see details and resources</li>\n              <li><strong>Track your progress</strong> by updating skill levels</li>\n              <li><strong>Follow the path</strong> from basics to advanced topics</li>\n            </ol>\n          </div>\n        `,\n        actions: []\n      },\n      'design-canvas': {\n        title: 'System Design Canvas Help',\n        content: `\n          <div class=\"help-content\">\n            <h4>Using the Design Canvas:</h4>\n            <p>Practice system design by dragging and connecting components.</p>\n            \n            <h4>How to design:</h4>\n            <ol>\n              <li><strong>Drag components</strong> from the toolbar to the canvas</li>\n              <li><strong>Position elements</strong> to show your system architecture</li>\n              <li><strong>Connect components</strong> to show data flow</li>\n              <li><strong>Save your design</strong> for later reference</li>\n            </ol>\n            \n            <h4>Best Practices:</h4>\n            <ul>\n              <li>Start with user requests and trace the flow</li>\n              <li>Consider scalability and failure points</li>\n              <li>Label connections with data types/protocols</li>\n              <li>Think about trade-offs for each component choice</li>\n            </ul>\n          </div>\n        `,\n        actions: []\n      }\n    };\n    \n    return helpContent[type] || helpContent['general'];\n  }\n\n  showHelpOverlay(helpContent, targetElement) {\n    const overlay = document.createElement('div');\n    overlay.className = 'help-overlay';\n    overlay.innerHTML = `\n      <div class=\"help-overlay-backdrop\"></div>\n      <div class=\"help-overlay-content\">\n        <div class=\"help-overlay-header\">\n          <h3>${helpContent.title}</h3>\n          <button class=\"help-overlay-close\" onclick=\"this.closest('.help-overlay').remove()\">&times;</button>\n        </div>\n        <div class=\"help-overlay-body\">\n          ${helpContent.content}\n        </div>\n        <div class=\"help-overlay-footer\">\n          <button class=\"md-button\" onclick=\"this.closest('.help-overlay').remove()\">Got it!</button>\n          ${helpContent.actions ? helpContent.actions.map(action => \n            `<button class=\"md-button md-button--primary\" onclick=\"${action.onclick}\">${action.label}</button>`\n          ).join('') : ''}\n        </div>\n      </div>\n    `;\n    \n    document.body.appendChild(overlay);\n    \n    // Position relative to target element if provided\n    if (targetElement) {\n      const rect = targetElement.getBoundingClientRect();\n      const content = overlay.querySelector('.help-overlay-content');\n      \n      // Position help overlay near the target element\n      content.style.maxWidth = '500px';\n      content.style.position = 'fixed';\n      content.style.top = `${Math.max(50, rect.bottom + 10)}px`;\n      content.style.left = `${Math.max(20, rect.left)}px`;\n    }\n    \n    // Show with animation\n    setTimeout(() => overlay.classList.add('show'), 10);\n    \n    // Close on backdrop click\n    overlay.querySelector('.help-overlay-backdrop').onclick = () => overlay.remove();\n  }\n\n  initTooltips() {\n    if (!this.onboardingState.userPreferences.showTooltips) return;\n    \n    // Add tooltips to key interface elements\n    const tooltipElements = [\n      { selector: '.md-search__input', text: 'Search all content (press / to focus)' },\n      { selector: '.md-nav__toggle', text: 'Toggle table of contents' },\n      { selector: '.md-header__button[for=\"__drawer\"]', text: 'Open navigation menu' },\n      { selector: '.personalization-toggle', text: 'Personalize your experience' },\n      { selector: '.search-widget-toggle', text: 'Advanced search with filters' },\n      { selector: '.mobile-toolbar-item', text: 'Quick access to key features' }\n    ];\n    \n    tooltipElements.forEach(({ selector, text }) => {\n      const elements = document.querySelectorAll(selector);\n      elements.forEach(element => {\n        if (!element.title && !element.getAttribute('aria-label')) {\n          this.addTooltip(element, text);\n        }\n      });\n    });\n  }\n\n  addTooltip(element, text) {\n    let tooltip = null;\n    \n    const showTooltip = (e) => {\n      if (tooltip) return;\n      \n      tooltip = document.createElement('div');\n      tooltip.className = 'contextual-tooltip';\n      tooltip.textContent = text;\n      document.body.appendChild(tooltip);\n      \n      const rect = element.getBoundingClientRect();\n      tooltip.style.left = `${rect.left + (rect.width / 2)}px`;\n      tooltip.style.top = `${rect.bottom + 8}px`;\n      \n      setTimeout(() => tooltip.classList.add('show'), 10);\n    };\n    \n    const hideTooltip = () => {\n      if (tooltip) {\n        tooltip.remove();\n        tooltip = null;\n      }\n    };\n    \n    element.addEventListener('mouseenter', showTooltip);\n    element.addEventListener('mouseleave', hideTooltip);\n    element.addEventListener('focus', showTooltip);\n    element.addEventListener('blur', hideTooltip);\n  }\n\n  checkForAutoTours() {\n    if (!this.onboardingState.userPreferences.autoStartTours) return;\n    \n    // Check if this is the first visit\n    if (this.onboardingState.firstVisit) {\n      setTimeout(() => {\n        this.showWelcomeDialog();\n      }, 2000); // Wait for page to settle\n    }\n    \n    // Check for page-specific tours\n    this.checkPageSpecificTours();\n  }\n\n  showWelcomeDialog() {\n    const dialog = document.createElement('div');\n    dialog.className = 'welcome-dialog';\n    dialog.innerHTML = `\n      <div class=\"welcome-dialog-backdrop\"></div>\n      <div class=\"welcome-dialog-content\">\n        <div class=\"welcome-header\">\n          <h2>Welcome to SystemCraft! üëã</h2>\n          <p>Your comprehensive guide to Amazon L6/L7 Engineering Manager interviews</p>\n        </div>\n        \n        <div class=\"welcome-body\">\n          <div class=\"welcome-features\">\n            <div class=\"welcome-feature\">\n              <div class=\"feature-icon\">üéØ</div>\n              <h3>Personalized Learning</h3>\n              <p>Take assessments to get customized study plans</p>\n            </div>\n            <div class=\"welcome-feature\">\n              <div class=\"feature-icon\">üìö</div>\n              <h3>Interactive Content</h3>\n              <p>Practice with decision trees, skill maps, and design tools</p>\n            </div>\n            <div class=\"welcome-feature\">\n              <div class=\"feature-icon\">üìä</div>\n              <h3>Progress Tracking</h3>\n              <p>Monitor your learning journey with detailed analytics</p>\n            </div>\n          </div>\n          \n          <div class=\"welcome-question\">\n            <h3>How would you like to start?</h3>\n            <div class=\"welcome-options\">\n              <button class=\"welcome-option\" data-action=\"tour\">\n                <span class=\"option-icon\">üé¨</span>\n                <div class=\"option-content\">\n                  <strong>Take the Tour</strong>\n                  <p>3-minute overview of key features</p>\n                </div>\n              </button>\n              \n              <button class=\"welcome-option\" data-action=\"assessment\">\n                <span class=\"option-icon\">üìù</span>\n                <div class=\"option-content\">\n                  <strong>Start Assessment</strong>\n                  <p>Find your current skill level</p>\n                </div>\n              </button>\n              \n              <button class=\"welcome-option\" data-action=\"browse\">\n                <span class=\"option-icon\">üîç</span>\n                <div class=\"option-content\">\n                  <strong>Browse Content</strong>\n                  <p>Explore at your own pace</p>\n                </div>\n              </button>\n            </div>\n          </div>\n        </div>\n        \n        <div class=\"welcome-footer\">\n          <label class=\"welcome-setting\">\n            <input type=\"checkbox\" checked onchange=\"onboardingSystem.updatePreference('autoStartTours', this.checked)\">\n            <span>Show welcome dialog for new features</span>\n          </label>\n          \n          <div class=\"welcome-actions\">\n            <button class=\"md-button\" onclick=\"onboardingSystem.dismissWelcome()\">Skip for now</button>\n          </div>\n        </div>\n      </div>\n    `;\n    \n    document.body.appendChild(dialog);\n    setTimeout(() => dialog.classList.add('show'), 100);\n    \n    // Bind option events\n    dialog.querySelectorAll('.welcome-option').forEach(option => {\n      option.addEventListener('click', () => {\n        const action = option.dataset.action;\n        this.handleWelcomeAction(action);\n        dialog.remove();\n      });\n    });\n  }\n\n  handleWelcomeAction(action) {\n    switch (action) {\n      case 'tour':\n        this.startTour('first-visit');\n        break;\n      case 'assessment':\n        window.location.href = '/self-assessment-quiz/';\n        break;\n      case 'browse':\n        // Just dismiss - user will explore naturally\n        break;\n    }\n    \n    // Mark first visit as complete\n    this.onboardingState.firstVisit = false;\n    this.saveOnboardingState();\n  }\n\n  dismissWelcome() {\n    const dialog = document.querySelector('.welcome-dialog');\n    if (dialog) {\n      dialog.remove();\n    }\n    \n    this.onboardingState.firstVisit = false;\n    this.saveOnboardingState();\n  }\n\n  checkPageSpecificTours() {\n    const currentPath = window.location.pathname;\n    const pageTours = {\n      '/self-assessment-quiz/': 'assessment-help',\n      '/practice/': 'study-planning',\n      '/behavioral/': 'behavioral-prep',\n      '/system-design/': 'system-design-help'\n    };\n    \n    const tourId = pageTours[currentPath];\n    if (tourId && !this.onboardingState.completedTours.includes(tourId)) {\n      setTimeout(() => {\n        this.suggestPageTour(tourId);\n      }, 5000);\n    }\n  }\n\n  suggestPageTour(tourId) {\n    const suggestion = document.createElement('div');\n    suggestion.className = 'tour-suggestion';\n    suggestion.innerHTML = `\n      <div class=\"tour-suggestion-content\">\n        <div class=\"suggestion-icon\">üí°</div>\n        <div class=\"suggestion-text\">\n          <strong>New to this section?</strong>\n          <p>Take a quick tour to learn how to use these tools effectively</p>\n        </div>\n        <div class=\"suggestion-actions\">\n          <button class=\"suggestion-button primary\" onclick=\"onboardingSystem.startTour('${tourId}'); this.closest('.tour-suggestion').remove();\">Start Tour</button>\n          <button class=\"suggestion-button\" onclick=\"this.closest('.tour-suggestion').remove();\">Not now</button>\n        </div>\n      </div>\n    `;\n    \n    document.body.appendChild(suggestion);\n    setTimeout(() => suggestion.classList.add('show'), 100);\n    \n    // Auto-dismiss after 10 seconds\n    setTimeout(() => {\n      if (document.body.contains(suggestion)) {\n        suggestion.remove();\n      }\n    }, 10000);\n  }\n\n  startTour(tourId) {\n    const tours = this.getTourDefinitions();\n    const tour = tours[tourId];\n    \n    if (!tour) {\n      console.warn('Tour not found:', tourId);\n      return;\n    }\n    \n    this.currentTour = tour;\n    this.tourStep = 0;\n    this.showTourStep();\n  }\n\n  getTourDefinitions() {\n    return {\n      'first-visit': {\n        id: 'first-visit',\n        title: 'SystemCraft Overview',\n        description: 'Learn the basics of navigating and using SystemCraft',\n        steps: [\n          {\n            title: 'Welcome to SystemCraft',\n            content: 'This is your comprehensive guide to Amazon L6/L7 Engineering Manager interviews. Let\\'s take a quick tour of the key features.',\n            target: null,\n            position: 'center'\n          },\n          {\n            title: 'Navigation Menu',\n            content: 'The main navigation helps you explore different topics. Content is organized by interview components: Behavioral, System Design, and Coding.',\n            target: '.md-nav--primary',\n            position: 'right'\n          },\n          {\n            title: 'Search Everything',\n            content: 'Use the search bar to quickly find content. Press \"/\" anywhere to focus the search, or click the advanced search button for filters.',\n            target: '.md-search',\n            position: 'bottom'\n          },\n          {\n            title: 'Personalization',\n            content: 'Click here to access personalization features: bookmarks, notes, custom goals, and preferences.',\n            target: '.personalization-toggle',\n            position: 'left'\n          },\n          {\n            title: 'Progress Tracking',\n            content: 'Track your learning progress with skill trees, achievements, and detailed analytics throughout the site.',\n            target: '.progress-dashboard, .skill-tree',\n            position: 'top'\n          },\n          {\n            title: 'Get Help Anytime',\n            content: 'Access help, tours, and keyboard shortcuts anytime from this help button. Press F1 or click here when you need assistance.',\n            target: '.help-toggle',\n            position: 'left'\n          }\n        ]\n      },\n      'study-planning': {\n        id: 'study-planning',\n        title: 'Study Planning Tour',\n        description: 'Learn how to create and follow personalized study plans',\n        steps: [\n          {\n            title: 'Study Plans Overview',\n            content: 'SystemCraft offers multiple study plans based on your timeline and experience level.',\n            target: '.study-plans-section',\n            position: 'top'\n          },\n          {\n            title: 'Assessment First',\n            content: 'Start with the self-assessment to identify your current skill level and get personalized recommendations.',\n            target: 'a[href*=\"self-assessment\"]',\n            position: 'bottom'\n          },\n          {\n            title: 'Progress Tracking',\n            content: 'Monitor your progress through the comprehensive tracking system. Mark sections as completed and track your study time.',\n            target: '.progress-tracking',\n            position: 'right'\n          }\n        ]\n      },\n      'assessment-help': {\n        id: 'assessment-help',\n        title: 'Assessment Tool Guide',\n        description: 'Learn how to use the assessment tool effectively',\n        steps: [\n          {\n            title: 'Assessment Purpose',\n            content: 'This assessment evaluates your current skills across technical, leadership, and cultural dimensions to provide personalized study recommendations.',\n            target: '.assessment-container',\n            position: 'top'\n          },\n          {\n            title: 'Honest Self-Evaluation',\n            content: 'Rate yourself based on real experience, not theoretical knowledge. This ensures accurate recommendations.',\n            target: '.assessment-question',\n            position: 'right'\n          },\n          {\n            title: 'View Results',\n            content: 'After completing the assessment, you\\'ll receive detailed results with specific study plan recommendations.',\n            target: '.assessment-results',\n            position: 'top'\n          }\n        ]\n      }\n    };\n  }\n\n  showTourStep() {\n    if (!this.currentTour || this.tourStep >= this.currentTour.steps.length) {\n      this.completeTour();\n      return;\n    }\n    \n    const step = this.currentTour.steps[this.tourStep];\n    const target = step.target ? document.querySelector(step.target) : null;\n    \n    // Create tour overlay\n    this.removeTourOverlay(); // Remove any existing overlay\n    \n    const overlay = document.createElement('div');\n    overlay.className = 'tour-overlay';\n    overlay.innerHTML = `\n      <div class=\"tour-backdrop\"></div>\n      <div class=\"tour-spotlight\" ${target ? '' : 'hidden'}></div>\n      <div class=\"tour-tooltip\">\n        <div class=\"tour-tooltip-header\">\n          <div class=\"tour-progress\">\n            <span class=\"tour-step-counter\">${this.tourStep + 1} of ${this.currentTour.steps.length}</span>\n            <div class=\"tour-progress-bar\">\n              <div class=\"tour-progress-fill\" style=\"width: ${((this.tourStep + 1) / this.currentTour.steps.length) * 100}%\"></div>\n            </div>\n          </div>\n          <button class=\"tour-close\" onclick=\"onboardingSystem.endTour()\">&times;</button>\n        </div>\n        \n        <div class=\"tour-tooltip-body\">\n          <h4>${step.title}</h4>\n          <p>${step.content}</p>\n        </div>\n        \n        <div class=\"tour-tooltip-footer\">\n          <div class=\"tour-navigation\">\n            <button class=\"tour-button secondary\" \n                    ${this.tourStep === 0 ? 'disabled' : ''} \n                    onclick=\"onboardingSystem.previousTourStep()\">Previous</button>\n            \n            <button class=\"tour-button primary\" onclick=\"onboardingSystem.nextTourStep()\">\n              ${this.tourStep === this.currentTour.steps.length - 1 ? 'Finish' : 'Next'}\n            </button>\n          </div>\n          \n          <button class=\"tour-skip\" onclick=\"onboardingSystem.endTour()\">Skip Tour</button>\n        </div>\n      </div>\n    `;\n    \n    document.body.appendChild(overlay);\n    \n    // Position tooltip and spotlight\n    if (target) {\n      this.positionTourElements(overlay, target, step.position);\n      \n      // Scroll target into view\n      target.scrollIntoView({ behavior: 'smooth', block: 'center' });\n    } else {\n      // Center the tooltip if no target\n      const tooltip = overlay.querySelector('.tour-tooltip');\n      tooltip.classList.add('centered');\n    }\n    \n    // Show overlay with animation\n    setTimeout(() => overlay.classList.add('show'), 100);\n    \n    // Track analytics\n    this.trackTourStep(this.currentTour.id, this.tourStep);\n  }\n\n  positionTourElements(overlay, target, position) {\n    const rect = target.getBoundingClientRect();\n    const spotlight = overlay.querySelector('.tour-spotlight');\n    const tooltip = overlay.querySelector('.tour-tooltip');\n    \n    // Position spotlight over target\n    spotlight.style.left = `${rect.left - 8}px`;\n    spotlight.style.top = `${rect.top - 8}px`;\n    spotlight.style.width = `${rect.width + 16}px`;\n    spotlight.style.height = `${rect.height + 16}px`;\n    \n    // Position tooltip based on specified position\n    const tooltipRect = tooltip.getBoundingClientRect();\n    let left, top;\n    \n    switch (position) {\n      case 'top':\n        left = rect.left + (rect.width / 2) - (tooltipRect.width / 2);\n        top = rect.top - tooltipRect.height - 20;\n        break;\n      case 'bottom':\n        left = rect.left + (rect.width / 2) - (tooltipRect.width / 2);\n        top = rect.bottom + 20;\n        break;\n      case 'left':\n        left = rect.left - tooltipRect.width - 20;\n        top = rect.top + (rect.height / 2) - (tooltipRect.height / 2);\n        break;\n      case 'right':\n        left = rect.right + 20;\n        top = rect.top + (rect.height / 2) - (tooltipRect.height / 2);\n        break;\n      default:\n        left = rect.left + (rect.width / 2) - (tooltipRect.width / 2);\n        top = rect.bottom + 20;\n    }\n    \n    // Ensure tooltip stays within viewport\n    left = Math.max(20, Math.min(left, window.innerWidth - tooltipRect.width - 20));\n    top = Math.max(20, Math.min(top, window.innerHeight - tooltipRect.height - 20));\n    \n    tooltip.style.left = `${left}px`;\n    tooltip.style.top = `${top}px`;\n  }\n\n  nextTourStep() {\n    this.tourStep++;\n    this.showTourStep();\n  }\n\n  previousTourStep() {\n    if (this.tourStep > 0) {\n      this.tourStep--;\n      this.showTourStep();\n    }\n  }\n\n  endTour() {\n    this.removeTourOverlay();\n    \n    if (this.currentTour) {\n      // Mark tour as completed if user finished it\n      if (this.tourStep >= this.currentTour.steps.length - 1) {\n        this.onboardingState.completedTours.push(this.currentTour.id);\n      }\n      \n      this.trackTourCompletion(this.currentTour.id, this.tourStep >= this.currentTour.steps.length - 1);\n    }\n    \n    this.currentTour = null;\n    this.tourStep = 0;\n    this.saveOnboardingState();\n  }\n\n  completeTour() {\n    if (this.currentTour) {\n      this.onboardingState.completedTours.push(this.currentTour.id);\n      this.trackTourCompletion(this.currentTour.id, true);\n      \n      // Show completion message\n      this.showTourCompletionMessage();\n    }\n    \n    this.endTour();\n  }\n\n  showTourCompletionMessage() {\n    const message = document.createElement('div');\n    message.className = 'tour-completion-message';\n    message.innerHTML = `\n      <div class=\"completion-content\">\n        <div class=\"completion-icon\">üéâ</div>\n        <h3>Tour Complete!</h3>\n        <p>You've successfully completed the ${this.currentTour.title} tour.</p>\n        <button class=\"md-button md-button--primary\" onclick=\"this.parentElement.parentElement.remove()\">Continue</button>\n      </div>\n    `;\n    \n    document.body.appendChild(message);\n    setTimeout(() => message.classList.add('show'), 100);\n    \n    // Auto-dismiss after 5 seconds\n    setTimeout(() => {\n      if (document.body.contains(message)) {\n        message.remove();\n      }\n    }, 5000);\n  }\n\n  removeTourOverlay() {\n    const overlay = document.querySelector('.tour-overlay');\n    if (overlay) {\n      overlay.remove();\n    }\n  }\n\n  bindEvents() {\n    // Help widget events\n    document.addEventListener('click', (e) => {\n      if (e.target.classList.contains('help-toggle')) {\n        this.toggleHelpMenu();\n      }\n      \n      if (e.target.classList.contains('help-close')) {\n        this.closeHelpMenu();\n      }\n      \n      if (e.target.classList.contains('help-action')) {\n        this.handleHelpAction(e.target);\n      }\n      \n      if (e.target.classList.contains('help-link')) {\n        this.handleHelpLink(e.target);\n      }\n    });\n  }\n\n  toggleHelpMenu() {\n    const menu = document.querySelector('.help-menu');\n    const isHidden = menu.hasAttribute('hidden');\n    \n    if (isHidden) {\n      menu.removeAttribute('hidden');\n    } else {\n      menu.setAttribute('hidden', '');\n    }\n  }\n\n  closeHelpMenu() {\n    const menu = document.querySelector('.help-menu');\n    menu.setAttribute('hidden', '');\n  }\n\n  handleHelpAction(button) {\n    const action = button.dataset.action;\n    const tour = button.dataset.tour;\n    \n    this.closeHelpMenu();\n    \n    if (action === 'tour' && tour) {\n      this.startTour(tour);\n    }\n  }\n\n  handleHelpLink(link) {\n    const action = link.dataset.action;\n    \n    this.closeHelpMenu();\n    \n    switch (action) {\n      case 'faq':\n        window.location.href = '/fundamentals/faq/';\n        break;\n      case 'shortcuts':\n        if (window.keyboardShortcuts) {\n          window.keyboardShortcuts.showShortcutHelp();\n        }\n        break;\n      case 'contact':\n        this.showContactInfo();\n        break;\n    }\n  }\n\n  showContactInfo() {\n    const modal = document.createElement('div');\n    modal.className = 'help-modal';\n    modal.innerHTML = `\n      <div class=\"help-modal-backdrop\"></div>\n      <div class=\"help-modal-content\">\n        <div class=\"help-modal-header\">\n          <h3>Get Help & Support</h3>\n          <button class=\"help-modal-close\">&times;</button>\n        </div>\n        <div class=\"help-modal-body\">\n          <div class=\"contact-options\">\n            <div class=\"contact-option\">\n              <div class=\"contact-icon\">üìö</div>\n              <div class=\"contact-content\">\n                <h4>Documentation</h4>\n                <p>Comprehensive guides and FAQs</p>\n                <a href=\"/fundamentals/faq/\" class=\"md-button\">View FAQ</a>\n              </div>\n            </div>\n            \n            <div class=\"contact-option\">\n              <div class=\"contact-icon\">üí¨</div>\n              <div class=\"contact-content\">\n                <h4>Community</h4>\n                <p>Connect with other learners</p>\n                <a href=\"#\" class=\"md-button\">Join Discord</a>\n              </div>\n            </div>\n            \n            <div class=\"contact-option\">\n              <div class=\"contact-icon\">üêõ</div>\n              <div class=\"contact-content\">\n                <h4>Report Issues</h4>\n                <p>Found a bug or have feedback?</p>\n                <a href=\"#\" class=\"md-button\">Report Issue</a>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    `;\n    \n    document.body.appendChild(modal);\n    \n    // Bind close events\n    modal.querySelector('.help-modal-close').onclick = () => modal.remove();\n    modal.querySelector('.help-modal-backdrop').onclick = () => modal.remove();\n    \n    setTimeout(() => modal.classList.add('show'), 10);\n  }\n\n  addKeyboardShortcuts() {\n    document.addEventListener('keydown', (e) => {\n      // F1 - Open help menu\n      if (e.key === 'F1') {\n        e.preventDefault();\n        this.toggleHelpMenu();\n      }\n      \n      // Escape - Close help menu or end tour\n      if (e.key === 'Escape') {\n        if (this.currentTour) {\n          this.endTour();\n        } else {\n          this.closeHelpMenu();\n        }\n      }\n      \n      // Arrow keys in tour\n      if (this.currentTour) {\n        if (e.key === 'ArrowLeft' || e.key === 'ArrowUp') {\n          e.preventDefault();\n          this.previousTourStep();\n        } else if (e.key === 'ArrowRight' || e.key === 'ArrowDown' || e.key === 'Enter') {\n          e.preventDefault();\n          this.nextTourStep();\n        }\n      }\n    });\n  }\n\n  updatePreference(key, value) {\n    this.onboardingState.userPreferences[key] = value;\n    this.saveOnboardingState();\n    \n    // Apply preference changes immediately\n    if (key === 'showTooltips') {\n      if (value) {\n        this.initTooltips();\n      } else {\n        // Remove existing tooltips\n        document.querySelectorAll('.contextual-tooltip').forEach(t => t.remove());\n      }\n    }\n  }\n\n  // Analytics and tracking\n  trackTourStep(tourId, stepIndex) {\n    // Track tour progress for analytics\n    if (window.gtag) {\n      gtag('event', 'tour_step', {\n        tour_id: tourId,\n        step_index: stepIndex,\n        step_total: this.currentTour?.steps.length || 0\n      });\n    }\n  }\n\n  trackTourCompletion(tourId, completed) {\n    // Track tour completion for analytics\n    if (window.gtag) {\n      gtag('event', 'tour_complete', {\n        tour_id: tourId,\n        completed: completed\n      });\n    }\n  }\n\n  // Public API for external calls\n  showHelp(topic) {\n    if (topic) {\n      const helpContent = this.getContextualHelpContent(topic);\n      this.showHelpOverlay(helpContent);\n    } else {\n      this.toggleHelpMenu();\n    }\n  }\n\n  startFeatureTour(feature) {\n    this.startTour(feature);\n  }\n\n  resetOnboarding() {\n    if (confirm('Reset all onboarding progress? This will show all tours and tips again.')) {\n      localStorage.removeItem(this.storageKey);\n      this.onboardingState = this.loadOnboardingState();\n      this.saveOnboardingState();\n    }\n  }\n}\n\n// Initialize onboarding system when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n  window.onboardingSystem = new OnboardingSystem();\n});\n\n// Add required CSS styles\nconst onboardingCSS = `\n  /* Help Widget Styles */\n  .help-widget {\n    position: fixed;\n    bottom: 20px;\n    right: 80px;\n    z-index: 1000;\n  }\n  \n  .help-toggle {\n    width: 48px;\n    height: 48px;\n    border-radius: 50%;\n    background: var(--info-color);\n    color: white;\n    border: none;\n    cursor: pointer;\n    box-shadow: var(--shadow-medium);\n    transition: var(--hover-transition);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n  \n  .help-toggle:hover {\n    background: #1976D2;\n    transform: scale(1.05);\n  }\n  \n  .help-menu {\n    position: absolute;\n    bottom: 60px;\n    right: 0;\n    width: 320px;\n    max-height: 500px;\n    background: white;\n    border-radius: var(--radius-lg);\n    box-shadow: var(--shadow-heavy);\n    border: 1px solid var(--md-default-fg-color--lighter);\n    overflow: hidden;\n  }\n  \n  .help-menu-header {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    padding: var(--spacing-lg);\n    background: var(--info-color);\n    color: white;\n  }\n  \n  .help-menu-header h3 {\n    margin: 0;\n    font-size: 1.1rem;\n  }\n  \n  .help-close {\n    background: none;\n    border: none;\n    color: white;\n    font-size: 20px;\n    cursor: pointer;\n    padding: var(--spacing-xs);\n    border-radius: var(--radius-sm);\n    transition: var(--hover-transition);\n  }\n  \n  .help-close:hover {\n    background: rgba(255, 255, 255, 0.2);\n  }\n  \n  .help-menu-content {\n    max-height: 400px;\n    overflow-y: auto;\n  }\n  \n  .help-section {\n    padding: var(--spacing-lg);\n    border-bottom: 1px solid var(--md-default-fg-color--lighter);\n  }\n  \n  .help-section:last-child {\n    border-bottom: none;\n  }\n  \n  .help-section h4 {\n    margin: 0 0 var(--spacing-md) 0;\n    font-size: 0.9rem;\n    color: var(--md-default-fg-color--dark);\n    text-transform: uppercase;\n    letter-spacing: 0.5px;\n  }\n  \n  .help-action {\n    display: flex;\n    align-items: center;\n    gap: var(--spacing-md);\n    width: 100%;\n    padding: var(--spacing-md);\n    background: none;\n    border: 1px solid var(--md-default-fg-color--lighter);\n    border-radius: var(--radius-md);\n    cursor: pointer;\n    transition: var(--hover-transition);\n    margin-bottom: var(--spacing-sm);\n    text-align: left;\n  }\n  \n  .help-action:hover {\n    background: rgba(33, 150, 243, 0.1);\n    border-color: var(--info-color);\n  }\n  \n  .help-icon {\n    font-size: 1.5rem;\n    flex-shrink: 0;\n  }\n  \n  .help-action-content {\n    flex: 1;\n  }\n  \n  .help-action-title {\n    font-weight: 600;\n    color: var(--md-default-fg-color--dark);\n    margin-bottom: 0.2em;\n  }\n  \n  .help-action-description {\n    font-size: 0.8rem;\n    color: var(--md-default-fg-color--light);\n  }\n  \n  .help-links {\n    display: flex;\n    flex-direction: column;\n    gap: var(--spacing-sm);\n  }\n  \n  .help-link {\n    display: flex;\n    align-items: center;\n    gap: var(--spacing-sm);\n    padding: var(--spacing-sm);\n    color: var(--md-default-fg-color);\n    text-decoration: none;\n    border-radius: var(--radius-md);\n    transition: var(--hover-transition);\n    font-size: 0.9rem;\n  }\n  \n  .help-link:hover {\n    background: var(--md-default-fg-color--lightest);\n    color: var(--info-color);\n  }\n  \n  .help-settings {\n    display: flex;\n    flex-direction: column;\n    gap: var(--spacing-sm);\n  }\n  \n  .help-setting {\n    display: flex;\n    align-items: center;\n    gap: var(--spacing-sm);\n    font-size: 0.9rem;\n    cursor: pointer;\n  }\n  \n  .help-setting input[type=\"checkbox\"] {\n    margin: 0;\n  }\n  \n  /* Contextual Help */\n  .contextual-help-button {\n    position: absolute;\n    top: 10px;\n    right: 10px;\n    width: 24px;\n    height: 24px;\n    border-radius: 50%;\n    background: var(--info-color);\n    color: white;\n    border: none;\n    cursor: pointer;\n    font-size: 12px;\n    font-weight: bold;\n    z-index: 10;\n    opacity: 0.7;\n    transition: var(--hover-transition);\n  }\n  \n  .contextual-help-button:hover {\n    opacity: 1;\n    transform: scale(1.1);\n  }\n  \n  .contextual-tooltip {\n    position: absolute;\n    background: rgba(0, 0, 0, 0.9);\n    color: white;\n    padding: var(--spacing-sm) var(--spacing-md);\n    border-radius: var(--radius-md);\n    font-size: 0.8rem;\n    max-width: 200px;\n    z-index: 10000;\n    opacity: 0;\n    transform: translateY(-10px);\n    transition: all 0.3s ease;\n    pointer-events: none;\n  }\n  \n  .contextual-tooltip.show {\n    opacity: 1;\n    transform: translateY(0);\n  }\n  \n  .contextual-tooltip::before {\n    content: '';\n    position: absolute;\n    top: -5px;\n    left: 50%;\n    transform: translateX(-50%);\n    border: 5px solid transparent;\n    border-bottom-color: rgba(0, 0, 0, 0.9);\n  }\n  \n  /* Welcome Dialog */\n  .welcome-dialog {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    z-index: 10000;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    opacity: 0;\n    transition: opacity 0.3s ease;\n  }\n  \n  .welcome-dialog.show {\n    opacity: 1;\n  }\n  \n  .welcome-dialog-backdrop {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: rgba(0, 0, 0, 0.5);\n    backdrop-filter: blur(4px);\n  }\n  \n  .welcome-dialog-content {\n    position: relative;\n    width: 90%;\n    max-width: 600px;\n    background: white;\n    border-radius: var(--radius-lg);\n    box-shadow: var(--shadow-heavy);\n    overflow: hidden;\n  }\n  \n  .welcome-header {\n    background: linear-gradient(135deg, var(--md-primary-fg-color), var(--md-accent-fg-color));\n    color: white;\n    padding: var(--spacing-xl);\n    text-align: center;\n  }\n  \n  .welcome-header h2 {\n    margin: 0 0 var(--spacing-sm) 0;\n    font-size: 1.5rem;\n  }\n  \n  .welcome-header p {\n    margin: 0;\n    opacity: 0.9;\n  }\n  \n  .welcome-body {\n    padding: var(--spacing-xl);\n  }\n  \n  .welcome-features {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\n    gap: var(--spacing-lg);\n    margin-bottom: var(--spacing-xl);\n  }\n  \n  .welcome-feature {\n    text-align: center;\n  }\n  \n  .feature-icon {\n    font-size: 2rem;\n    margin-bottom: var(--spacing-sm);\n  }\n  \n  .welcome-feature h3 {\n    margin: 0 0 var(--spacing-sm) 0;\n    font-size: 1rem;\n    color: var(--md-primary-fg-color--dark);\n  }\n  \n  .welcome-feature p {\n    margin: 0;\n    font-size: 0.9rem;\n    color: var(--md-default-fg-color--light);\n    line-height: 1.4;\n  }\n  \n  .welcome-question h3 {\n    text-align: center;\n    margin: 0 0 var(--spacing-lg) 0;\n    color: var(--md-default-fg-color--dark);\n  }\n  \n  .welcome-options {\n    display: grid;\n    gap: var(--spacing-md);\n  }\n  \n  .welcome-option {\n    display: flex;\n    align-items: center;\n    gap: var(--spacing-lg);\n    padding: var(--spacing-lg);\n    background: none;\n    border: 2px solid var(--md-default-fg-color--lighter);\n    border-radius: var(--radius-lg);\n    cursor: pointer;\n    transition: var(--hover-transition);\n    text-align: left;\n  }\n  \n  .welcome-option:hover {\n    border-color: var(--md-primary-fg-color);\n    background: rgba(255, 153, 0, 0.05);\n    transform: translateY(-2px);\n  }\n  \n  .option-icon {\n    font-size: 2rem;\n  }\n  \n  .option-content strong {\n    display: block;\n    color: var(--md-primary-fg-color--dark);\n    margin-bottom: 0.25em;\n  }\n  \n  .option-content p {\n    margin: 0;\n    color: var(--md-default-fg-color--light);\n    font-size: 0.9rem;\n  }\n  \n  .welcome-footer {\n    padding: var(--spacing-lg) var(--spacing-xl);\n    background: var(--md-default-fg-color--lightest);\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n  }\n  \n  .welcome-setting {\n    display: flex;\n    align-items: center;\n    gap: var(--spacing-sm);\n    font-size: 0.9rem;\n    cursor: pointer;\n  }\n  \n  /* Tour Styles */\n  .tour-overlay {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    z-index: 10000;\n    opacity: 0;\n    transition: opacity 0.3s ease;\n  }\n  \n  .tour-overlay.show {\n    opacity: 1;\n  }\n  \n  .tour-backdrop {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: rgba(0, 0, 0, 0.7);\n  }\n  \n  .tour-spotlight {\n    position: absolute;\n    background: transparent;\n    border: 4px solid var(--md-primary-fg-color);\n    border-radius: var(--radius-md);\n    box-shadow: 0 0 0 9999px rgba(0, 0, 0, 0.7);\n    z-index: 1;\n    transition: all 0.3s ease;\n  }\n  \n  .tour-tooltip {\n    position: absolute;\n    width: 350px;\n    background: white;\n    border-radius: var(--radius-lg);\n    box-shadow: var(--shadow-heavy);\n    z-index: 2;\n    overflow: hidden;\n  }\n  \n  .tour-tooltip.centered {\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n  }\n  \n  .tour-tooltip-header {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    padding: var(--spacing-lg);\n    background: var(--md-default-fg-color--lightest);\n    border-bottom: 1px solid var(--md-default-fg-color--lighter);\n  }\n  \n  .tour-progress {\n    display: flex;\n    align-items: center;\n    gap: var(--spacing-md);\n  }\n  \n  .tour-step-counter {\n    font-size: 0.8rem;\n    color: var(--md-default-fg-color--light);\n    white-space: nowrap;\n  }\n  \n  .tour-progress-bar {\n    width: 100px;\n    height: 4px;\n    background: var(--md-default-fg-color--lighter);\n    border-radius: 2px;\n    overflow: hidden;\n  }\n  \n  .tour-progress-fill {\n    height: 100%;\n    background: var(--md-primary-fg-color);\n    border-radius: 2px;\n    transition: width 0.3s ease;\n  }\n  \n  .tour-close {\n    background: none;\n    border: none;\n    font-size: 20px;\n    cursor: pointer;\n    padding: var(--spacing-xs);\n    border-radius: var(--radius-sm);\n    color: var(--md-default-fg-color--light);\n    transition: var(--hover-transition);\n  }\n  \n  .tour-close:hover {\n    background: var(--md-default-fg-color--lighter);\n  }\n  \n  .tour-tooltip-body {\n    padding: var(--spacing-xl);\n  }\n  \n  .tour-tooltip-body h4 {\n    margin: 0 0 var(--spacing-md) 0;\n    color: var(--md-primary-fg-color--dark);\n    font-size: 1.1rem;\n  }\n  \n  .tour-tooltip-body p {\n    margin: 0;\n    line-height: 1.5;\n    color: var(--md-default-fg-color);\n  }\n  \n  .tour-tooltip-footer {\n    padding: var(--spacing-lg) var(--spacing-xl);\n    background: var(--md-default-fg-color--lightest);\n    border-top: 1px solid var(--md-default-fg-color--lighter);\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n  }\n  \n  .tour-navigation {\n    display: flex;\n    gap: var(--spacing-md);\n  }\n  \n  .tour-button {\n    padding: var(--spacing-sm) var(--spacing-lg);\n    border: 1px solid var(--md-default-fg-color--lighter);\n    border-radius: var(--radius-md);\n    cursor: pointer;\n    transition: var(--hover-transition);\n    font-size: 0.9rem;\n  }\n  \n  .tour-button.primary {\n    background: var(--md-primary-fg-color);\n    color: white;\n    border-color: var(--md-primary-fg-color);\n  }\n  \n  .tour-button.primary:hover {\n    background: var(--md-primary-fg-color--dark);\n  }\n  \n  .tour-button.secondary {\n    background: white;\n    color: var(--md-default-fg-color);\n  }\n  \n  .tour-button.secondary:hover {\n    background: var(--md-default-fg-color--lightest);\n  }\n  \n  .tour-button:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n  \n  .tour-skip {\n    background: none;\n    border: none;\n    color: var(--md-default-fg-color--light);\n    cursor: pointer;\n    font-size: 0.8rem;\n    text-decoration: underline;\n    transition: var(--hover-transition);\n  }\n  \n  .tour-skip:hover {\n    color: var(--md-default-fg-color);\n  }\n  \n  /* Tour Suggestions */\n  .tour-suggestion {\n    position: fixed;\n    top: 20px;\n    right: -400px;\n    width: 350px;\n    background: white;\n    border-radius: var(--radius-lg);\n    box-shadow: var(--shadow-medium);\n    border: 1px solid var(--info-color);\n    transition: right 0.3s ease;\n    z-index: 1000;\n  }\n  \n  .tour-suggestion.show {\n    right: 20px;\n  }\n  \n  .tour-suggestion-content {\n    padding: var(--spacing-lg);\n    display: flex;\n    gap: var(--spacing-md);\n  }\n  \n  .suggestion-icon {\n    font-size: 1.5rem;\n    flex-shrink: 0;\n  }\n  \n  .suggestion-text {\n    flex: 1;\n  }\n  \n  .suggestion-text strong {\n    display: block;\n    margin-bottom: 0.25em;\n    color: var(--md-default-fg-color--dark);\n  }\n  \n  .suggestion-text p {\n    margin: 0;\n    font-size: 0.9rem;\n    color: var(--md-default-fg-color--light);\n  }\n  \n  .suggestion-actions {\n    display: flex;\n    gap: var(--spacing-sm);\n    margin-top: var(--spacing-md);\n  }\n  \n  .suggestion-button {\n    padding: var(--spacing-xs) var(--spacing-md);\n    border: 1px solid var(--md-default-fg-color--lighter);\n    border-radius: var(--radius-md);\n    cursor: pointer;\n    font-size: 0.8rem;\n    transition: var(--hover-transition);\n  }\n  \n  .suggestion-button.primary {\n    background: var(--info-color);\n    color: white;\n    border-color: var(--info-color);\n  }\n  \n  .suggestion-button.primary:hover {\n    background: #1976D2;\n  }\n  \n  .suggestion-button:hover {\n    background: var(--md-default-fg-color--lightest);\n  }\n  \n  /* Mobile Responsiveness */\n  @media (max-width: 768px) {\n    .help-widget {\n      bottom: 80px; /* Account for mobile toolbar */\n      right: 20px;\n    }\n    \n    .help-menu {\n      width: calc(100vw - 40px);\n      max-width: 320px;\n    }\n    \n    .welcome-dialog-content {\n      width: 95%;\n      margin: 20px;\n    }\n    \n    .welcome-features {\n      grid-template-columns: 1fr;\n    }\n    \n    .welcome-footer {\n      flex-direction: column;\n      gap: var(--spacing-md);\n    }\n    \n    .tour-tooltip {\n      width: calc(100vw - 40px);\n      max-width: 350px;\n    }\n    \n    .tour-suggestion {\n      width: calc(100vw - 40px);\n      right: -100vw;\n    }\n    \n    .tour-suggestion.show {\n      right: 20px;\n    }\n  }\n`;\n\nconst styleSheet = document.createElement('style');\nstyleSheet.textContent = onboardingCSS;\ndocument.head.appendChild(styleSheet);"