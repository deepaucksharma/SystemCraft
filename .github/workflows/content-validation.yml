name: Content Standards Validation

on:
  pull_request:
    paths:
      - 'docs/**/*.md'
      - 'scripts/**/*.py'
      - 'mkdocs.yml'
      - '.pre-commit-config.yaml'
  push:
    branches: [main]
    paths:
      - 'docs/**/*.md'
      - 'scripts/**/*.py'
      - 'mkdocs.yml'

jobs:
  content-validation:
    runs-on: ubuntu-latest
    name: Content Validation & Build Test
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install pyyaml markdown beautifulsoup4 requests
          pip install -r requirements.txt
          
      - name: Validate YAML front-matter
        run: |
          echo "Validating YAML front-matter compliance..."
          python scripts/validate-frontmatter.py
        
      - name: Check internal links
        run: |
          echo "Validating internal links..."
          python scripts/check-links.py
        
      - name: Validate content standards
        run: |
          echo "Validating content standards compliance..."
          python scripts/validate-content.py
        
      - name: Test MkDocs build
        run: |
          echo "Testing MkDocs build..."
          mkdocs build --strict --verbose
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: mkdocs-build
          path: site/
          retention-days: 7
        if: success()

  markdown-lint:
    runs-on: ubuntu-latest
    name: Markdown Linting & Security Scan
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install markdownlint
        run: npm install -g markdownlint-cli
        
      - name: Run markdownlint
        run: |
          echo "Running markdown linting..."
          markdownlint docs/**/*.md --config .markdownlint.yaml
        continue-on-error: true
        
      - name: Run security scan
        run: |
          echo "Running security scan on content..."
          # Check for potential security issues in content
          find docs -name "*.md" -exec grep -l "password\|secret\|key\|token" {} \; > potential_secrets.txt || true
          if [ -s potential_secrets.txt ]; then
            echo "⚠️ Potential secrets found in content:"
            cat potential_secrets.txt
            echo "Please review these files for sensitive information."
            exit 1
          else
            echo "✅ No potential secrets found in content."
          fi
        continue-on-error: true

  pr-validation:
    runs-on: ubuntu-latest
    name: PR Change Validation
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install pyyaml markdown beautifulsoup4
          
      - name: Get changed files
        id: changed-files
        run: |
          echo "changed_files=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | grep '\.md$' | tr '\n' ' ')" >> $GITHUB_OUTPUT
          
      - name: Validate changed content
        run: |
          echo "Validating changed files: ${{ steps.changed-files.outputs.changed_files }}"
          python scripts/validate-content.py
        if: steps.changed-files.outputs.changed_files != ''
        
      - name: Comment on PR
        uses: actions/github-script@v6
        if: failure()
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '⚠️ Content validation failed. Please check the workflow logs for details and fix any issues before merging.'
            })

permissions:
  contents: read
  pull-requests: write
  actions: read